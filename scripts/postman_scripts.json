{
	"info": {
		"_postman_id": "a9011295-a2e9-4e90-b3c5-0344a38e62e9",
		"name": "MVP Rel 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Preview",
			"item": [
				{
					"name": "tpchy1974@gmail.com demo PRD_ADMIN",
					"item": [
						{
							"name": "Get Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"AAT_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"K6KA6PRLRFWQLSD6\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-aat",
										"service",
										"core-compute-aat",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "praveen.thottempudi@hmcts.net:hmcts2Aldgate",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "rd-professional-api:cc5f2a6-9690-11e9-bc42-526af7764f64",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "rd-professional-api",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"demo",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.globals.set(\"XUI_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "rd-professional-api",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "cc5f2a6-9690-11e9-bc42-526af7764f64",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api",
										"demo",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Demo",
			"item": [
				{
					"name": "1_TOKEN",
					"item": [
						{
							"name": "DEMO External Tokens",
							"item": [
								{
									"name": "Super user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5zdXBlckBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"Super_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Multi user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5tdWx0aUBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"Multi_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wdW1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PUM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PFM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wZm1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PFM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PCM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wY21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Demo Service Authorization token Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60219fd7-6f40-4b90-8d2c-9d2ca0996e4c",
												"exec": [
													"let response = pm.response.text();",
													"pm.globals.set(\"S2S_AUTH_TOKEN\",response);",
													"",
													"pm.test(\"Successful POST request to get S2S_AUTH_TOKEN\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d5fc10a-f743-4566-a778-0787ef5d3fdc",
												"exec": [
													"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
													"",
													"/**",
													" * @preserve A JavaScript implementation of the SHA family of hashes, as",
													" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
													" * HMAC implementation as defined in FIPS PUB 198a",
													" *",
													" * Copyright Brian Turek 2008-2017",
													" * Distributed under the BSD License",
													" * See http://caligatio.github.com/jsSHA/ for more information",
													" *",
													" * Several functions taken from Paul Johnston",
													" */",
													"",
													"/*jslint",
													"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
													"*/",
													"",
													" /**",
													"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
													"  * functions that are not needed when a limited number of SHA families are",
													"  * selected",
													"  *",
													"  * @define {number} ORed value of SHA variants to be supported",
													"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
													"  */",
													"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
													"var X={};",
													"",
													"(function (global)",
													"{",
													"\t\"use strict\";",
													"",
													"\t/* Globals */",
													"\tvar TWO_PWR_32 = 4294967296;",
													"",
													"\t/**",
													"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
													"\t *",
													"\t * @private",
													"\t * @constructor",
													"\t * @this {Int_64}",
													"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
													"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
													"\t */",
													"\tfunction Int_64(msint_32, lsint_32)",
													"\t{",
													"\t\tthis.highOrder = msint_32;",
													"\t\tthis.lowOrder = lsint_32;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string to an array of big-endian words",
													"\t *",
													"\t * There is a known bug with an odd number of existing bytes and using a",
													"\t * UTF-16 encoding.  However, this function is used such that the existing",
													"\t * bytes are always a result of a previous UTF-16 str2packed call and",
													"\t * therefore there should never be an odd number of existing bytes",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
													"\t *   use to encode the source string",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
													"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"",
													"\t\tif (\"UTF8\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tcodePntArr = [];",
													"",
													"\t\t\t\tif (0x80 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(codePnt);",
													"\t\t\t\t}",
													"\t\t\t\telse if (0x800 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
													"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
													"\t\t\t\t}",
													"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\ti += 1;",
													"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t\t{",
													"\t\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t\t}",
													"\t\t\t\t\t/* Known bug kicks in here */",
													"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\t\tbyteCnt += 1;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
													"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
													"\t\t\t\t* need LE and not switching endianness due to SHA-3",
													"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
													"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tif (transposeBytes === true)",
													"\t\t\t\t{",
													"\t\t\t\t\tj = codePnt & 0xFF;",
													"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 2;",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a hex string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
													"\t\t\texistingByteLen, shiftModifier;",
													"",
													"\t\tif (0 !== (length % 2))",
													"\t\t{",
													"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 2)",
													"\t\t{",
													"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
													"\t\t\tif (!isNaN(num))",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string of raw bytes to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
													"\t\t\tbyteOffset, shiftModifier;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t{",
													"\t\t\tcodePnt = str.charCodeAt(i);",
													"",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a base-64 string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
													"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
													"",
													"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
													"\t\t}",
													"",
													"\t\tfirstEqual = str.indexOf(\"=\");",
													"\t\tstr = str.replace(/\\=/g, \"\");",
													"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 4)",
													"\t\t{",
													"\t\t\tstrPart = str.substr(i, 4);",
													"\t\t\ttmpInt = 0;",
													"",
													"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
													"\t\t\t{",
													"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
													"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
													"\t\t\t}",
													"",
													"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
													"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 1;",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an ArrayBuffer to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t *   representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\tarrView = new Uint8Array(arr);",
													"",
													"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
													"\t\t{",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a hex string.",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   hexidecimal representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Hexidecimal representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
													"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\t/* The below is more than a byte but it gets taken care of later */",
													"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
													"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
													"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
													"\t\t}",
													"",
													"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a base-64 string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   base-64 representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Base-64 encoded representation of the parameter in",
													"\t *   string form",
													"\t */",
													"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 3)",
													"\t\t{",
													"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
													"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
													"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
													"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
													"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
													"\t\t\tfor (j = 0; j < 4; j += 1)",
													"\t\t\t{",
													"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to raw bytes string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   a raw bytes string representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {string} Raw bytes representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t\tstr += String.fromCharCode(srcByte);",
													"\t\t}",
													"",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to an ArrayBuffer",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   an ArrayBuffer",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
													"\t *   ArrayBuffer",
													"\t */",
													"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
													"\t\tarrView = new Uint8Array(retVal);",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Validate hash list containing output formatting options, ensuring",
													"\t * presence of every option or adding the default value",
													"\t *",
													"\t * @private",
													"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
													"\t *   hash list containing output formatting options",
													"\t */",
													"\tfunction getOutputOpts(options)",
													"\t{",
													"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
													"\t\t\toutputOptions;",
													"\t\toutputOptions = options || {};",
													"",
													"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
													"",
													"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
													"\t\t{",
													"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
													"\t\t}",
													"",
													"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
													"\t\t\t}",
													"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
													"\t\t}",
													"",
													"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
													"\t\t}",
													"",
													"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Function that takes an input format and UTF encoding and returns the",
													"\t * appropriate function used to convert the input.",
													"\t *",
													"\t * @private",
													"\t * @param {string} format The format of the string to be converted",
													"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
													"\t *\tUTF16LE)",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
													"\t *   Array<number>, binLen : number}} Function that will convert an input",
													"\t *   string to a packed int array",
													"\t */",
													"\tfunction getStrConverter(format, utfType, bigEndianMod)",
													"\t{",
													"\t\tvar retVal;",
													"",
													"\t\t/* Validate encoding */",
													"\t\tswitch (utfType)",
													"\t\t{",
													"\t\tcase \"UTF8\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16BE\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16LE\":",
													"\t\t\t/* Fallthrough */",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
													"\t\t}",
													"",
													"\t\t/* Map inputFormat to the appropriate converter */",
													"\t\tswitch (format)",
													"\t\t{",
													"\t\tcase \"HEX\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"TEXT\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"B64\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"BYTES\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"ARRAYBUFFER\":",
													"\t\t\ttry {",
													"\t\t\t\tretVal = new ArrayBuffer(0);",
													"\t\t\t} catch(ignore) {",
													"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t}",
													"\t\t\t/**",
													"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t\t\t *   representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_32(x, n)",
													"\t{",
													"\t\treturn (x << n) | (x >>> (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_64(x, n)",
													"\t{",
													"\t\tif (n > 32)",
													"\t\t{",
													"\t\t\tn = n - 32;",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse if (0 !== n)",
													"\t\t{",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\treturn x;",
													"\t\t}",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_32(x, n)",
													"\t{",
													"\t\treturn (x >>> n) | (x << (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted by n bits",
													"\t */",
													"\tfunction shr_32(x, n)",
													"\t{",
													"\t\treturn x >>> n;",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted by n bits",
													"\t */",
													"\tfunction shr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null;",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\tx.highOrder >>> n,",
													"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t0,",
													"\t\t\t\t\tx.highOrder >>> (n - 32)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Parity function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction parity_32(x, y, z)",
													"\t{",
													"\t\treturn x ^ y ^ z;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (~x & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^",
													"\t\t\t\t(x.highOrder & z.highOrder) ^",
													"\t\t\t\t(y.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
													"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
													"\t\t\t\t(y.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_64(x)",
													"\t{",
													"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
													"\t\t\trotr39 = rotr_64(x, 39);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
													"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_64(x)",
													"\t{",
													"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
													"\t\t\trotr41 = rotr_64(x, 41);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
													"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_64(x)",
													"\t{",
													"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
													"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_64(x)",
													"\t{",
													"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
													"\t\t\tshr6 = shr_64(x, 6);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
													"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b",
													"\t */",
													"\tfunction safeAdd_32_2(a, b)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_32_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @param {number} e The fifth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_32_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
													"\t\t\t\t(e & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument to be added",
													"\t * @param {Int_64} y The second 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of x + y",
													"\t */",
													"\tfunction safeAdd_64_2(x, y)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
													"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_64_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_64_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
													"\t\t\t(e.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
													"\t\t\t(lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
													"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
													"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs two given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_2(a, b)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs five given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @param {Int_64} c Third argument to be XORed",
													"\t * @param {Int_64} d Fourth argument to be XORed",
													"\t * @param {Int_64} e Fifth argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_5(a, b, c, d, e)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Returns a clone of the given SHA3 state",
													"\t *",
													"\t * @private",
													"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
													"\t * @return {Array<Array<Int_64>>} The cloned state",
													"\t */",
													"\tfunction cloneSHA3State(state) {",
													"\t\tvar clone = [], i;",
													"\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t{",
													"\t\t\tclone[i] = state[i].slice();",
													"\t\t}",
													"",
													"\t\treturn clone;",
													"\t}",
													"",
													"\t/**",
													"\t * Gets the state values for the specified SHA variant",
													"\t *",
													"\t * @param {string} variant The SHA variant",
													"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
													"\t */",
													"\tfunction getNewState(variant)",
													"\t{",
													"\t\tvar retVal = [], H_trunc, H_full, i;",
													"",
													"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tH_trunc = [",
													"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
													"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
													"\t\t\t];",
													"\t\t\tH_full = [",
													"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
													"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
													"\t\t\t];",
													"",
													"\t\t\tswitch (variant)",
													"\t\t\t{",
													"\t\t\tcase \"SHA-224\":",
													"\t\t\t\tretVal = H_trunc;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-256\":",
													"\t\t\t\tretVal = H_full;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-384\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
													"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
													"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
													"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
													"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
													"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
													"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
													"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-512\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
													"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
													"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
													"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
													"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
													"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
													"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
													"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t\t{",
													"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
													"\t\t\t}",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"No SHA variants supported\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-1 hashing over a 512-byte block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @return {Array<number>} The resulting H values",
													"\t */",
													"\tfunction roundSHA1(block, H)",
													"\t{",
													"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
													"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"",
													"\t\tfor (t = 0; t < 80; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\tW[t] = block[t];",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
													"\t\t\t}",
													"",
													"\t\t\tif (t < 20)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 40)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 60)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
													"\t\t\t} else {",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
													"\t\t\t}",
													"",
													"\t\t\te = d;",
													"\t\t\td = c;",
													"\t\t\tc = rotl(b, 30);",
													"\t\t\tb = a;",
													"\t\t\ta = T;",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-1 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-1",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, totalLen;",
													"",
													"\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t   \"shorting\" the addition is OK. */",
													"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
													"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
													"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
													"\t\t * a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
													"\t\t{",
													"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
													"\t\t}",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/* Put this here so the K arrays aren't put on the stack for every block */",
													"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
													"\tif ((6 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\tK_sha2 = [",
													"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
													"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
													"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
													"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
													"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
													"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
													"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
													"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
													"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
													"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
													"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
													"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
													"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
													"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
													"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
													"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
													"\t\t];",
													"",
													"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
													"\t\t{",
													"\t\t\t K_sha512 = [",
													"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
													"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
													"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
													"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
													"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
													"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
													"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
													"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
													"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
													"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
													"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
													"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
													"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
													"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
													"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
													"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
													"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
													"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
													"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
													"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
													"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
													"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
													"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
													"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
													"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
													"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
													"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
													"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
													"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
													"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
													"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
													"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
													"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
													"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
													"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
													"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
													"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
													"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
													"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
													"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
													"\t\t\t];",
													"\t\t}",
													"\t}",
													"\tif ((8 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\trc_sha3 = [",
													"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
													"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
													"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
													"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
													"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
													"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
													"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
													"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
													"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
													"\t\t];",
													"",
													"\t\tr_sha3 = [",
													"\t\t\t[ 0, 36,  3, 41, 18],",
													"\t\t\t[ 1, 44, 10, 45,  2],",
													"\t\t\t[62,  6, 43, 15, 61],",
													"\t\t\t[28, 55, 25, 21, 56],",
													"\t\t\t[27, 20, 39,  8, 14]",
													"\t\t];",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-2 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @return {Array<number|Int_64>} The resulting H values",
													"\t */",
													"\tfunction roundSHA2(block, H, variant)",
													"\t{",
													"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
													"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
													"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
													"",
													"\t\t/* Set up the various function handles and variable for the specific",
													"\t\t * variant */",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\tnumRounds = 64;",
													"\t\t\tbinaryStringMult = 1;",
													"\t\t\tInt = Number;",
													"\t\t\tsafeAdd_2 = safeAdd_32_2;",
													"\t\t\tsafeAdd_4 = safeAdd_32_4;",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"\t\t\tgamma0 = gamma0_32;",
													"\t\t\tgamma1 = gamma1_32;",
													"\t\t\tsigma0 = sigma0_32;",
													"\t\t\tsigma1 = sigma1_32;",
													"\t\t\tmaj = maj_32;",
													"\t\t\tch = ch_32;",
													"\t\t\tK = K_sha2;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\tnumRounds = 80;",
													"\t\t\tbinaryStringMult = 2;",
													"\t\t\tInt = Int_64;",
													"\t\t\tsafeAdd_2 = safeAdd_64_2;",
													"\t\t\tsafeAdd_4 = safeAdd_64_4;",
													"\t\t\tsafeAdd_5 = safeAdd_64_5;",
													"\t\t\tgamma0 = gamma0_64;",
													"\t\t\tgamma1 = gamma1_64;",
													"\t\t\tsigma0 = sigma0_64;",
													"\t\t\tsigma1 = sigma1_64;",
													"\t\t\tmaj = maj_64;",
													"\t\t\tch = ch_64;",
													"\t\t\tK = K_sha512;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"\t\tf = H[5];",
													"\t\tg = H[6];",
													"\t\th = H[7];",
													"",
													"\t\tfor (t = 0; t < numRounds; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\toffset = t * binaryStringMult;",
													"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
													"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
													"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
													"\t\t\t\tW[t] = new Int(int1, int2);",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = safeAdd_4(",
													"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
													"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
													"\t\t\t\t\t);",
													"\t\t\t}",
													"",
													"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
													"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
													"\t\t\th = g;",
													"\t\t\tg = f;",
													"\t\t\tf = e;",
													"\t\t\te = safeAdd_2(d, T1);",
													"\t\t\td = c;",
													"\t\t\tc = b;",
													"\t\t\tb = a;",
													"\t\t\ta = safeAdd_2(T1, T2);",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"\t\tH[5] = safeAdd_2(f, H[5]);",
													"\t\tH[6] = safeAdd_2(g, H[6]);",
													"\t\tH[7] = safeAdd_2(h, H[7]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-2 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-2",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
													"",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\t\tbinaryStringInc = 16;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 136 (128 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
													"\t\t\tbinaryStringInc = 32;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
													"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0], H[1], H[2], H[3],",
													"\t\t\t\tH[4], H[5], H[6]",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = H;",
													"\t\t}",
													"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
													"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
													"\t\t\t\tH[7].highOrder, H[7].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse /* This should never be reached */",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-3 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>|null} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
													"\t *   block to hash",
													"\t * @return {Array<Array<Int_64>>} The resulting state value",
													"\t */",
													"\tfunction roundSHA3(block, state)",
													"\t{",
													"\t\tvar round, x, y, B, C = [], D = [];",
													"",
													"\t\tif (null !== block)",
													"\t\t{",
													"\t\t\tfor (x = 0; x < block.length; x+=2)",
													"\t\t\t{",
													"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
													"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
													"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
													"\t\t\t\t);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\tfor (round = 0; round < 24; round += 1)",
													"\t\t{",
													"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
													"\t\t\t   value that triggers the getNewState \"if\" statement",
													"\t\t\t*/",
													"\t\t\tB = getNewState(\"SHA3-\");",
													"",
													"\t\t\t/* Perform theta step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
													"\t\t\t\t\tstate[x][3], state[x][4]);",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform combined ro and pi steps */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
													"\t\t\t\t\t\tstate[x][y],",
													"\t\t\t\t\t\tr_sha3[x][y]",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform chi step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(",
													"\t\t\t\t\t\tB[x][y],",
													"\t\t\t\t\t\tnew Int_64(",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
													"\t\t\t\t\t\t)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform iota step */",
													"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
													"\t\t}",
													"",
													"\t\treturn state;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-3 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
													"\t * @param {number} blockSize The block size/rate of the variant in bits",
													"\t * @param {number} delimiter The delimiter value for the variant",
													"\t * @param {number} outputLen The output length for the variant in bits",
													"\t * @return {Array<number>} The array of integers representing the SHA-3",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
													"\t{",
													"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
													"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
													"",
													"",
													"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
													"\t\t   with SHAKE",
													"\t\t*/",
													"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
													"\t\t\tremainderBinLen -= blockSize;",
													"\t\t}",
													"",
													"\t\tremainder = remainder.slice(i);",
													"\t\tremainderBinLen = remainderBinLen % blockSize;",
													"",
													"\t\t/* Pad out the remainder to a full block */",
													"\t\twhile (remainder.length < binaryStringInc)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"",
													"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
													"\t\ti = remainderBinLen >>> 3;",
													"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
													"",
													"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
													"\t\tstate = roundSHA3(remainder, state);",
													"",
													"\t\twhile (retVal.length * 32 < outputLen)",
													"\t\t{",
													"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
													"\t\t\tretVal.push(temp.lowOrder);",
													"\t\t\tif (retVal.length * 32 >= outputLen)",
													"\t\t\t{",
													"\t\t\t\tbreak;",
													"\t\t\t}",
													"\t\t\tretVal.push(temp.highOrder);",
													"\t\t\tstate_offset += 1;",
													"",
													"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
													"\t\t\t{",
													"\t\t\t\troundSHA3(null, state);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
													"\t * be hashed as the parameter",
													"\t *",
													"\t * @constructor",
													"\t * @this {jsSHA}",
													"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
													"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
													"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
													"\t *   BYTES, or ARRAYBUFFER",
													"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
													"\t *   options Optional values",
													"\t */",
													"\tvar jsSHA = function(variant, inputFormat, options)",
													"\t{",
													"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
													"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
													"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
													"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
													"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
													"",
													"\t\tinputOptions = options || {};",
													"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
													"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
													"",
													"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
													"\t\t{",
													"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvariantBlockSize = 512;",
													"\t\t\troundFunc = roundSHA1;",
													"\t\t\tfinalizeFunc = finalizeSHA1;",
													"\t\t\toutputBinLen = 160;",
													"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
													"\t\t}",
													"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\troundFunc = function (block, H) {",
													"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
													"\t\t\t};",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
													"\t\t\t};",
													"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
													"",
													"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 224;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvar delimiter = 0x06;",
													"",
													"\t\t\troundFunc = roundSHA3;",
													"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
													"\t\t\tbigEndianMod = 1;",
													"",
													"\t\t\tif (\"SHA3-224\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1152;",
													"\t\t\t\toutputBinLen = 224;",
													"",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-384\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 832;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-512\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 576;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE128\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1344;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
													"\t\t\t};",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
													"\t\t}",
													"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"\t\tintermediateState = getNewState(shaVariant);",
													"",
													"\t\t/**",
													"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
													"\t\t * immediately after jsSHA object instantiation",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
													"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
													"\t\t *   or ARRAYBUFFER",
													"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
													"\t\t *   of input format options",
													"\t\t */",
													"\t\tthis.setHMACKey = function(key, inputFormat, options)",
													"\t\t{",
													"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
													"\t\t\t\ti, lastArrayIndex, keyOptions;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"HMAC key already set\");",
													"\t\t\t}",
													"",
													"\t\t\tif (true === updatedCalled)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
													"\t\t\t}",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
													"\t\t\t}",
													"",
													"\t\t\tkeyOptions = options || {};",
													"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
													"",
													"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"",
													"\t\t\tconvertRet = keyConverterFunc(key);",
													"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
													"\t\t\tkeyToUse = convertRet[\"value\"];",
													"",
													"\t\t\tblockByteSize = variantBlockSize >>> 3;",
													"",
													"\t\t\t/* These are used multiple times, calculate and store them */",
													"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
													"",
													"\t\t\t/* Figure out what to do with the key based on its size relative to",
													"\t\t\t * the hash's block size */",
													"\t\t\tif (blockByteSize < (keyBinLen / 8))",
													"\t\t\t{",
													"",
													"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
													"\t\t\t\t/* For all variants, the block size is bigger than the output",
													"\t\t\t\t * size so there will never be a useful byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
													"\t\t\t{",
													"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
													"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"",
													"\t\t\t/* Create ipad and opad */",
													"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
													"\t\t\t{",
													"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
													"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
													"\t\t\t}",
													"",
													"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
													"\t\t\tprocessedLen = variantBlockSize;",
													"",
													"\t\t\thmacKeySet = true;",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
													"\t\t * rest for either a future update or getHash call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
													"\t\t */",
													"\t\tthis.update = function(srcString)",
													"\t\t{",
													"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
													"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
													"",
													"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
													"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
													"\t\t\tchunk = convertRet[\"value\"];",
													"",
													"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
													"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
													"\t\t\t{",
													"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\tintermediateState = roundFunc(",
													"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
													"\t\t\t\t\t\tintermediateState",
													"\t\t\t\t\t);",
													"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t\tprocessedLen += updateProcessedLen;",
													"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
													"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
													"\t\t\tupdatedCalled = true;",
													"",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the desired SHA hash of the string specified at instantiation",
													"\t\t * using the specified parameters",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting (B64, HEX,",
													"\t\t *   BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
													"\t\t *   in the format specified.",
													"\t\t */",
													"\t\tthis.getHash = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
													"\t\t\t\t{",
													"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
													"\t\t\t\t}",
													"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
													"\t\t\t}",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\ti = new ArrayBuffer(0);",
													"\t\t\t\t} catch (ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfor (i = 1; i < numRounds; i += 1)",
													"\t\t\t{",
													"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
													"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
													"\t\t\t\t * very last block of finalizedState has data that needs to be",
													"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
													"\t\t\t\t * unneeded bits set to 0.",
													"\t\t\t\t */",
													"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
													"\t\t\t\t{",
													"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
													"\t\t\t\t}",
													"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
													"\t\t\t}",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the the HMAC in the specified format using the key given by",
													"\t\t * a previous setHMACKey call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting",
													"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
													"\t\t *   formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
													"\t\t *   format specified.",
													"\t\t */",
													"\t\tthis.getHMAC = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
													"",
													"\t\t\tif (false === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
													"\t\t\t\t} catch(ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
													"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"\t};",
													"",
													"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
													"\t{",
													"\t\tdefine(function()",
													"\t\t{",
													"\t\t\treturn jsSHA;",
													"\t\t});",
													"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
													"\t{",
													"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
													"\t\t{",
													"\t\t  module[\"exports\"] = jsSHA;",
													"\t\t  exports = jsSHA;",
													"\t\t}",
													"\t\telse {",
													"\t\t\texports = jsSHA;",
													"\t\t}",
													"\t} else { /* Browsers and Web Workers*/",
													"\t\tglobal[\"jsSHA\"] = jsSHA;",
													"\t}",
													"}(X));",
													"",
													"TOTP = function() {",
													"",
													"    var dec2hex = function(s) {",
													"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
													"    };",
													"",
													"    var hex2dec = function(s) {",
													"        return parseInt(s, 16);",
													"    };",
													"",
													"    var leftpad = function(s, l, p) {",
													"        if(l + 1 >= s.length) {",
													"            s = Array(l + 1 - s.length).join(p) + s;",
													"        }",
													"        return s;",
													"    };",
													"",
													"    var base32tohex = function(base32) {",
													"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
													"        var bits = \"\";",
													"        var hex = \"\";",
													"        for(var i = 0; i < base32.length; i++) {",
													"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
													"            bits += leftpad(val.toString(2), 5, '0');",
													"        }",
													"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
													"            var chunk = bits.substr(i, 4);",
													"            hex = hex + parseInt(chunk, 2).toString(16) ;",
													"        }",
													"        return hex;",
													"    };",
													"",
													"    this.getOTP = function(secret) {",
													"        try {",
													"            var key = base32tohex(secret);",
													"            var epoch = Math.round(new Date().getTime() / 1000.0);",
													"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
													"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
													"            shaObj.setHMACKey(key, \"HEX\");",
													"            shaObj.update(time);",
													"            var hmac = shaObj.getHMAC(\"HEX\");",
													"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
													"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
													"            otp = (otp).substr(otp.length - 6, 6);",
													"        } catch (error) {",
													"            throw error;",
													"        }",
													"        return otp;",
													"    };",
													"",
													"}",
													"",
													"var totpObj = new TOTP();",
													"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
													"",
													"pm.environment.set(\"OTP\", otp);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
										},
										"url": {
											"raw": "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal/lease",
											"protocol": "http",
											"host": [
												"rpe-service-auth-provider-demo",
												"service",
												"core-compute-demo",
												"internal"
											],
											"path": [
												"lease"
											]
										}
									},
									"response": []
								},
								{
									"name": "AuthorizationToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2debdc29-5911-481d-93d8-d661061ae2d9",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_HTTPS_PROTO}}://{{IDAM_DOMAIN}}/o/token?grant_type=password&username=mallikarjun.puttana@hmcts.net&password=Testing1234&client_id=rd-professional-api&client_secret=cc5f2a6-9690-11e9-bc42-526af7764f64&redirect_uri=https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect&scope=openid profile roles manage-user create-user search-user",
											"protocol": "{{API_HTTPS_PROTO}}",
											"host": [
												"{{IDAM_DOMAIN}}"
											],
											"path": [
												"o",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "mallikarjun.puttana@hmcts.net"
												},
												{
													"key": "password",
													"value": "Testing1234"
												},
												{
													"key": "client_id",
													"value": "rd-professional-api"
												},
												{
													"key": "client_secret",
													"value": "cc5f2a6-9690-11e9-bc42-526af7764f64"
												},
												{
													"key": "redirect_uri",
													"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect"
												},
												{
													"key": "scope",
													"value": "openid profile roles manage-user create-user search-user"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Internal",
					"item": [
						{
							"name": "Tokens",
							"item": [
								{
									"name": "Get Demo Service Authorization token Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58505a5e-2790-484d-b1e7-76434fbb1359",
												"exec": [
													"let response = pm.response.text();",
													"pm.globals.set(\"S2S_AUTH_TOKEN\",response);",
													"",
													"pm.test(\"Successful POST request to get S2S_AUTH_TOKEN\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9663a52d-32e2-4588-95b7-51fbbf8dc394",
												"exec": [
													"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
													"",
													"/**",
													" * @preserve A JavaScript implementation of the SHA family of hashes, as",
													" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
													" * HMAC implementation as defined in FIPS PUB 198a",
													" *",
													" * Copyright Brian Turek 2008-2017",
													" * Distributed under the BSD License",
													" * See http://caligatio.github.com/jsSHA/ for more information",
													" *",
													" * Several functions taken from Paul Johnston",
													" */",
													"",
													"/*jslint",
													"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
													"*/",
													"",
													" /**",
													"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
													"  * functions that are not needed when a limited number of SHA families are",
													"  * selected",
													"  *",
													"  * @define {number} ORed value of SHA variants to be supported",
													"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
													"  */",
													"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
													"var X={};",
													"",
													"(function (global)",
													"{",
													"\t\"use strict\";",
													"",
													"\t/* Globals */",
													"\tvar TWO_PWR_32 = 4294967296;",
													"",
													"\t/**",
													"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
													"\t *",
													"\t * @private",
													"\t * @constructor",
													"\t * @this {Int_64}",
													"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
													"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
													"\t */",
													"\tfunction Int_64(msint_32, lsint_32)",
													"\t{",
													"\t\tthis.highOrder = msint_32;",
													"\t\tthis.lowOrder = lsint_32;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string to an array of big-endian words",
													"\t *",
													"\t * There is a known bug with an odd number of existing bytes and using a",
													"\t * UTF-16 encoding.  However, this function is used such that the existing",
													"\t * bytes are always a result of a previous UTF-16 str2packed call and",
													"\t * therefore there should never be an odd number of existing bytes",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
													"\t *   use to encode the source string",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
													"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"",
													"\t\tif (\"UTF8\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tcodePntArr = [];",
													"",
													"\t\t\t\tif (0x80 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(codePnt);",
													"\t\t\t\t}",
													"\t\t\t\telse if (0x800 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
													"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
													"\t\t\t\t}",
													"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\ti += 1;",
													"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t\t{",
													"\t\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t\t}",
													"\t\t\t\t\t/* Known bug kicks in here */",
													"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\t\tbyteCnt += 1;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
													"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
													"\t\t\t\t* need LE and not switching endianness due to SHA-3",
													"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
													"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tif (transposeBytes === true)",
													"\t\t\t\t{",
													"\t\t\t\t\tj = codePnt & 0xFF;",
													"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 2;",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a hex string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
													"\t\t\texistingByteLen, shiftModifier;",
													"",
													"\t\tif (0 !== (length % 2))",
													"\t\t{",
													"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 2)",
													"\t\t{",
													"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
													"\t\t\tif (!isNaN(num))",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string of raw bytes to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
													"\t\t\tbyteOffset, shiftModifier;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t{",
													"\t\t\tcodePnt = str.charCodeAt(i);",
													"",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a base-64 string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
													"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
													"",
													"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
													"\t\t}",
													"",
													"\t\tfirstEqual = str.indexOf(\"=\");",
													"\t\tstr = str.replace(/\\=/g, \"\");",
													"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 4)",
													"\t\t{",
													"\t\t\tstrPart = str.substr(i, 4);",
													"\t\t\ttmpInt = 0;",
													"",
													"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
													"\t\t\t{",
													"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
													"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
													"\t\t\t}",
													"",
													"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
													"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 1;",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an ArrayBuffer to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t *   representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\tarrView = new Uint8Array(arr);",
													"",
													"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
													"\t\t{",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a hex string.",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   hexidecimal representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Hexidecimal representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
													"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\t/* The below is more than a byte but it gets taken care of later */",
													"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
													"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
													"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
													"\t\t}",
													"",
													"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a base-64 string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   base-64 representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Base-64 encoded representation of the parameter in",
													"\t *   string form",
													"\t */",
													"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 3)",
													"\t\t{",
													"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
													"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
													"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
													"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
													"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
													"\t\t\tfor (j = 0; j < 4; j += 1)",
													"\t\t\t{",
													"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to raw bytes string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   a raw bytes string representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {string} Raw bytes representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t\tstr += String.fromCharCode(srcByte);",
													"\t\t}",
													"",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to an ArrayBuffer",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   an ArrayBuffer",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
													"\t *   ArrayBuffer",
													"\t */",
													"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
													"\t\tarrView = new Uint8Array(retVal);",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Validate hash list containing output formatting options, ensuring",
													"\t * presence of every option or adding the default value",
													"\t *",
													"\t * @private",
													"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
													"\t *   hash list containing output formatting options",
													"\t */",
													"\tfunction getOutputOpts(options)",
													"\t{",
													"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
													"\t\t\toutputOptions;",
													"\t\toutputOptions = options || {};",
													"",
													"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
													"",
													"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
													"\t\t{",
													"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
													"\t\t}",
													"",
													"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
													"\t\t\t}",
													"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
													"\t\t}",
													"",
													"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
													"\t\t}",
													"",
													"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Function that takes an input format and UTF encoding and returns the",
													"\t * appropriate function used to convert the input.",
													"\t *",
													"\t * @private",
													"\t * @param {string} format The format of the string to be converted",
													"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
													"\t *\tUTF16LE)",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
													"\t *   Array<number>, binLen : number}} Function that will convert an input",
													"\t *   string to a packed int array",
													"\t */",
													"\tfunction getStrConverter(format, utfType, bigEndianMod)",
													"\t{",
													"\t\tvar retVal;",
													"",
													"\t\t/* Validate encoding */",
													"\t\tswitch (utfType)",
													"\t\t{",
													"\t\tcase \"UTF8\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16BE\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16LE\":",
													"\t\t\t/* Fallthrough */",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
													"\t\t}",
													"",
													"\t\t/* Map inputFormat to the appropriate converter */",
													"\t\tswitch (format)",
													"\t\t{",
													"\t\tcase \"HEX\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"TEXT\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"B64\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"BYTES\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"ARRAYBUFFER\":",
													"\t\t\ttry {",
													"\t\t\t\tretVal = new ArrayBuffer(0);",
													"\t\t\t} catch(ignore) {",
													"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t}",
													"\t\t\t/**",
													"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t\t\t *   representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_32(x, n)",
													"\t{",
													"\t\treturn (x << n) | (x >>> (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_64(x, n)",
													"\t{",
													"\t\tif (n > 32)",
													"\t\t{",
													"\t\t\tn = n - 32;",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse if (0 !== n)",
													"\t\t{",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\treturn x;",
													"\t\t}",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_32(x, n)",
													"\t{",
													"\t\treturn (x >>> n) | (x << (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted by n bits",
													"\t */",
													"\tfunction shr_32(x, n)",
													"\t{",
													"\t\treturn x >>> n;",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted by n bits",
													"\t */",
													"\tfunction shr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null;",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\tx.highOrder >>> n,",
													"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t0,",
													"\t\t\t\t\tx.highOrder >>> (n - 32)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Parity function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction parity_32(x, y, z)",
													"\t{",
													"\t\treturn x ^ y ^ z;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (~x & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^",
													"\t\t\t\t(x.highOrder & z.highOrder) ^",
													"\t\t\t\t(y.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
													"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
													"\t\t\t\t(y.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_64(x)",
													"\t{",
													"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
													"\t\t\trotr39 = rotr_64(x, 39);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
													"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_64(x)",
													"\t{",
													"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
													"\t\t\trotr41 = rotr_64(x, 41);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
													"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_64(x)",
													"\t{",
													"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
													"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_64(x)",
													"\t{",
													"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
													"\t\t\tshr6 = shr_64(x, 6);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
													"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b",
													"\t */",
													"\tfunction safeAdd_32_2(a, b)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_32_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @param {number} e The fifth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_32_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
													"\t\t\t\t(e & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument to be added",
													"\t * @param {Int_64} y The second 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of x + y",
													"\t */",
													"\tfunction safeAdd_64_2(x, y)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
													"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_64_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_64_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
													"\t\t\t(e.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
													"\t\t\t(lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
													"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
													"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs two given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_2(a, b)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs five given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @param {Int_64} c Third argument to be XORed",
													"\t * @param {Int_64} d Fourth argument to be XORed",
													"\t * @param {Int_64} e Fifth argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_5(a, b, c, d, e)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Returns a clone of the given SHA3 state",
													"\t *",
													"\t * @private",
													"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
													"\t * @return {Array<Array<Int_64>>} The cloned state",
													"\t */",
													"\tfunction cloneSHA3State(state) {",
													"\t\tvar clone = [], i;",
													"\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t{",
													"\t\t\tclone[i] = state[i].slice();",
													"\t\t}",
													"",
													"\t\treturn clone;",
													"\t}",
													"",
													"\t/**",
													"\t * Gets the state values for the specified SHA variant",
													"\t *",
													"\t * @param {string} variant The SHA variant",
													"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
													"\t */",
													"\tfunction getNewState(variant)",
													"\t{",
													"\t\tvar retVal = [], H_trunc, H_full, i;",
													"",
													"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tH_trunc = [",
													"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
													"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
													"\t\t\t];",
													"\t\t\tH_full = [",
													"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
													"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
													"\t\t\t];",
													"",
													"\t\t\tswitch (variant)",
													"\t\t\t{",
													"\t\t\tcase \"SHA-224\":",
													"\t\t\t\tretVal = H_trunc;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-256\":",
													"\t\t\t\tretVal = H_full;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-384\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
													"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
													"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
													"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
													"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
													"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
													"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
													"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-512\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
													"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
													"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
													"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
													"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
													"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
													"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
													"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t\t{",
													"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
													"\t\t\t}",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"No SHA variants supported\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-1 hashing over a 512-byte block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @return {Array<number>} The resulting H values",
													"\t */",
													"\tfunction roundSHA1(block, H)",
													"\t{",
													"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
													"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"",
													"\t\tfor (t = 0; t < 80; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\tW[t] = block[t];",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
													"\t\t\t}",
													"",
													"\t\t\tif (t < 20)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 40)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 60)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
													"\t\t\t} else {",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
													"\t\t\t}",
													"",
													"\t\t\te = d;",
													"\t\t\td = c;",
													"\t\t\tc = rotl(b, 30);",
													"\t\t\tb = a;",
													"\t\t\ta = T;",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-1 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-1",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, totalLen;",
													"",
													"\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t   \"shorting\" the addition is OK. */",
													"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
													"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
													"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
													"\t\t * a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
													"\t\t{",
													"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
													"\t\t}",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/* Put this here so the K arrays aren't put on the stack for every block */",
													"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
													"\tif ((6 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\tK_sha2 = [",
													"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
													"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
													"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
													"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
													"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
													"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
													"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
													"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
													"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
													"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
													"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
													"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
													"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
													"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
													"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
													"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
													"\t\t];",
													"",
													"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
													"\t\t{",
													"\t\t\t K_sha512 = [",
													"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
													"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
													"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
													"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
													"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
													"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
													"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
													"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
													"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
													"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
													"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
													"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
													"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
													"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
													"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
													"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
													"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
													"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
													"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
													"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
													"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
													"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
													"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
													"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
													"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
													"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
													"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
													"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
													"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
													"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
													"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
													"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
													"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
													"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
													"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
													"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
													"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
													"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
													"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
													"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
													"\t\t\t];",
													"\t\t}",
													"\t}",
													"\tif ((8 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\trc_sha3 = [",
													"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
													"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
													"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
													"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
													"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
													"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
													"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
													"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
													"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
													"\t\t];",
													"",
													"\t\tr_sha3 = [",
													"\t\t\t[ 0, 36,  3, 41, 18],",
													"\t\t\t[ 1, 44, 10, 45,  2],",
													"\t\t\t[62,  6, 43, 15, 61],",
													"\t\t\t[28, 55, 25, 21, 56],",
													"\t\t\t[27, 20, 39,  8, 14]",
													"\t\t];",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-2 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @return {Array<number|Int_64>} The resulting H values",
													"\t */",
													"\tfunction roundSHA2(block, H, variant)",
													"\t{",
													"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
													"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
													"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
													"",
													"\t\t/* Set up the various function handles and variable for the specific",
													"\t\t * variant */",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\tnumRounds = 64;",
													"\t\t\tbinaryStringMult = 1;",
													"\t\t\tInt = Number;",
													"\t\t\tsafeAdd_2 = safeAdd_32_2;",
													"\t\t\tsafeAdd_4 = safeAdd_32_4;",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"\t\t\tgamma0 = gamma0_32;",
													"\t\t\tgamma1 = gamma1_32;",
													"\t\t\tsigma0 = sigma0_32;",
													"\t\t\tsigma1 = sigma1_32;",
													"\t\t\tmaj = maj_32;",
													"\t\t\tch = ch_32;",
													"\t\t\tK = K_sha2;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\tnumRounds = 80;",
													"\t\t\tbinaryStringMult = 2;",
													"\t\t\tInt = Int_64;",
													"\t\t\tsafeAdd_2 = safeAdd_64_2;",
													"\t\t\tsafeAdd_4 = safeAdd_64_4;",
													"\t\t\tsafeAdd_5 = safeAdd_64_5;",
													"\t\t\tgamma0 = gamma0_64;",
													"\t\t\tgamma1 = gamma1_64;",
													"\t\t\tsigma0 = sigma0_64;",
													"\t\t\tsigma1 = sigma1_64;",
													"\t\t\tmaj = maj_64;",
													"\t\t\tch = ch_64;",
													"\t\t\tK = K_sha512;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"\t\tf = H[5];",
													"\t\tg = H[6];",
													"\t\th = H[7];",
													"",
													"\t\tfor (t = 0; t < numRounds; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\toffset = t * binaryStringMult;",
													"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
													"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
													"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
													"\t\t\t\tW[t] = new Int(int1, int2);",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = safeAdd_4(",
													"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
													"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
													"\t\t\t\t\t);",
													"\t\t\t}",
													"",
													"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
													"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
													"\t\t\th = g;",
													"\t\t\tg = f;",
													"\t\t\tf = e;",
													"\t\t\te = safeAdd_2(d, T1);",
													"\t\t\td = c;",
													"\t\t\tc = b;",
													"\t\t\tb = a;",
													"\t\t\ta = safeAdd_2(T1, T2);",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"\t\tH[5] = safeAdd_2(f, H[5]);",
													"\t\tH[6] = safeAdd_2(g, H[6]);",
													"\t\tH[7] = safeAdd_2(h, H[7]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-2 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-2",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
													"",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\t\tbinaryStringInc = 16;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 136 (128 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
													"\t\t\tbinaryStringInc = 32;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
													"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0], H[1], H[2], H[3],",
													"\t\t\t\tH[4], H[5], H[6]",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = H;",
													"\t\t}",
													"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
													"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
													"\t\t\t\tH[7].highOrder, H[7].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse /* This should never be reached */",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-3 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>|null} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
													"\t *   block to hash",
													"\t * @return {Array<Array<Int_64>>} The resulting state value",
													"\t */",
													"\tfunction roundSHA3(block, state)",
													"\t{",
													"\t\tvar round, x, y, B, C = [], D = [];",
													"",
													"\t\tif (null !== block)",
													"\t\t{",
													"\t\t\tfor (x = 0; x < block.length; x+=2)",
													"\t\t\t{",
													"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
													"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
													"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
													"\t\t\t\t);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\tfor (round = 0; round < 24; round += 1)",
													"\t\t{",
													"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
													"\t\t\t   value that triggers the getNewState \"if\" statement",
													"\t\t\t*/",
													"\t\t\tB = getNewState(\"SHA3-\");",
													"",
													"\t\t\t/* Perform theta step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
													"\t\t\t\t\tstate[x][3], state[x][4]);",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform combined ro and pi steps */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
													"\t\t\t\t\t\tstate[x][y],",
													"\t\t\t\t\t\tr_sha3[x][y]",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform chi step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(",
													"\t\t\t\t\t\tB[x][y],",
													"\t\t\t\t\t\tnew Int_64(",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
													"\t\t\t\t\t\t)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform iota step */",
													"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
													"\t\t}",
													"",
													"\t\treturn state;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-3 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
													"\t * @param {number} blockSize The block size/rate of the variant in bits",
													"\t * @param {number} delimiter The delimiter value for the variant",
													"\t * @param {number} outputLen The output length for the variant in bits",
													"\t * @return {Array<number>} The array of integers representing the SHA-3",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
													"\t{",
													"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
													"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
													"",
													"",
													"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
													"\t\t   with SHAKE",
													"\t\t*/",
													"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
													"\t\t\tremainderBinLen -= blockSize;",
													"\t\t}",
													"",
													"\t\tremainder = remainder.slice(i);",
													"\t\tremainderBinLen = remainderBinLen % blockSize;",
													"",
													"\t\t/* Pad out the remainder to a full block */",
													"\t\twhile (remainder.length < binaryStringInc)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"",
													"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
													"\t\ti = remainderBinLen >>> 3;",
													"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
													"",
													"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
													"\t\tstate = roundSHA3(remainder, state);",
													"",
													"\t\twhile (retVal.length * 32 < outputLen)",
													"\t\t{",
													"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
													"\t\t\tretVal.push(temp.lowOrder);",
													"\t\t\tif (retVal.length * 32 >= outputLen)",
													"\t\t\t{",
													"\t\t\t\tbreak;",
													"\t\t\t}",
													"\t\t\tretVal.push(temp.highOrder);",
													"\t\t\tstate_offset += 1;",
													"",
													"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
													"\t\t\t{",
													"\t\t\t\troundSHA3(null, state);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
													"\t * be hashed as the parameter",
													"\t *",
													"\t * @constructor",
													"\t * @this {jsSHA}",
													"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
													"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
													"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
													"\t *   BYTES, or ARRAYBUFFER",
													"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
													"\t *   options Optional values",
													"\t */",
													"\tvar jsSHA = function(variant, inputFormat, options)",
													"\t{",
													"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
													"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
													"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
													"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
													"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
													"",
													"\t\tinputOptions = options || {};",
													"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
													"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
													"",
													"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
													"\t\t{",
													"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvariantBlockSize = 512;",
													"\t\t\troundFunc = roundSHA1;",
													"\t\t\tfinalizeFunc = finalizeSHA1;",
													"\t\t\toutputBinLen = 160;",
													"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
													"\t\t}",
													"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\troundFunc = function (block, H) {",
													"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
													"\t\t\t};",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
													"\t\t\t};",
													"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
													"",
													"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 224;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvar delimiter = 0x06;",
													"",
													"\t\t\troundFunc = roundSHA3;",
													"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
													"\t\t\tbigEndianMod = 1;",
													"",
													"\t\t\tif (\"SHA3-224\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1152;",
													"\t\t\t\toutputBinLen = 224;",
													"",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-384\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 832;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-512\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 576;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE128\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1344;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
													"\t\t\t};",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
													"\t\t}",
													"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"\t\tintermediateState = getNewState(shaVariant);",
													"",
													"\t\t/**",
													"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
													"\t\t * immediately after jsSHA object instantiation",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
													"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
													"\t\t *   or ARRAYBUFFER",
													"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
													"\t\t *   of input format options",
													"\t\t */",
													"\t\tthis.setHMACKey = function(key, inputFormat, options)",
													"\t\t{",
													"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
													"\t\t\t\ti, lastArrayIndex, keyOptions;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"HMAC key already set\");",
													"\t\t\t}",
													"",
													"\t\t\tif (true === updatedCalled)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
													"\t\t\t}",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
													"\t\t\t}",
													"",
													"\t\t\tkeyOptions = options || {};",
													"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
													"",
													"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"",
													"\t\t\tconvertRet = keyConverterFunc(key);",
													"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
													"\t\t\tkeyToUse = convertRet[\"value\"];",
													"",
													"\t\t\tblockByteSize = variantBlockSize >>> 3;",
													"",
													"\t\t\t/* These are used multiple times, calculate and store them */",
													"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
													"",
													"\t\t\t/* Figure out what to do with the key based on its size relative to",
													"\t\t\t * the hash's block size */",
													"\t\t\tif (blockByteSize < (keyBinLen / 8))",
													"\t\t\t{",
													"",
													"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
													"\t\t\t\t/* For all variants, the block size is bigger than the output",
													"\t\t\t\t * size so there will never be a useful byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
													"\t\t\t{",
													"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
													"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"",
													"\t\t\t/* Create ipad and opad */",
													"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
													"\t\t\t{",
													"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
													"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
													"\t\t\t}",
													"",
													"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
													"\t\t\tprocessedLen = variantBlockSize;",
													"",
													"\t\t\thmacKeySet = true;",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
													"\t\t * rest for either a future update or getHash call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
													"\t\t */",
													"\t\tthis.update = function(srcString)",
													"\t\t{",
													"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
													"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
													"",
													"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
													"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
													"\t\t\tchunk = convertRet[\"value\"];",
													"",
													"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
													"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
													"\t\t\t{",
													"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\tintermediateState = roundFunc(",
													"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
													"\t\t\t\t\t\tintermediateState",
													"\t\t\t\t\t);",
													"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t\tprocessedLen += updateProcessedLen;",
													"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
													"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
													"\t\t\tupdatedCalled = true;",
													"",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the desired SHA hash of the string specified at instantiation",
													"\t\t * using the specified parameters",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting (B64, HEX,",
													"\t\t *   BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
													"\t\t *   in the format specified.",
													"\t\t */",
													"\t\tthis.getHash = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
													"\t\t\t\t{",
													"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
													"\t\t\t\t}",
													"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
													"\t\t\t}",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\ti = new ArrayBuffer(0);",
													"\t\t\t\t} catch (ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfor (i = 1; i < numRounds; i += 1)",
													"\t\t\t{",
													"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
													"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
													"\t\t\t\t * very last block of finalizedState has data that needs to be",
													"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
													"\t\t\t\t * unneeded bits set to 0.",
													"\t\t\t\t */",
													"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
													"\t\t\t\t{",
													"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
													"\t\t\t\t}",
													"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
													"\t\t\t}",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the the HMAC in the specified format using the key given by",
													"\t\t * a previous setHMACKey call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting",
													"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
													"\t\t *   formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
													"\t\t *   format specified.",
													"\t\t */",
													"\t\tthis.getHMAC = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
													"",
													"\t\t\tif (false === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
													"\t\t\t\t} catch(ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
													"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"\t};",
													"",
													"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
													"\t{",
													"\t\tdefine(function()",
													"\t\t{",
													"\t\t\treturn jsSHA;",
													"\t\t});",
													"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
													"\t{",
													"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
													"\t\t{",
													"\t\t  module[\"exports\"] = jsSHA;",
													"\t\t  exports = jsSHA;",
													"\t\t}",
													"\t\telse {",
													"\t\t\texports = jsSHA;",
													"\t\t}",
													"\t} else { /* Browsers and Web Workers*/",
													"\t\tglobal[\"jsSHA\"] = jsSHA;",
													"\t}",
													"}(X));",
													"",
													"TOTP = function() {",
													"",
													"    var dec2hex = function(s) {",
													"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
													"    };",
													"",
													"    var hex2dec = function(s) {",
													"        return parseInt(s, 16);",
													"    };",
													"",
													"    var leftpad = function(s, l, p) {",
													"        if(l + 1 >= s.length) {",
													"            s = Array(l + 1 - s.length).join(p) + s;",
													"        }",
													"        return s;",
													"    };",
													"",
													"    var base32tohex = function(base32) {",
													"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
													"        var bits = \"\";",
													"        var hex = \"\";",
													"        for(var i = 0; i < base32.length; i++) {",
													"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
													"            bits += leftpad(val.toString(2), 5, '0');",
													"        }",
													"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
													"            var chunk = bits.substr(i, 4);",
													"            hex = hex + parseInt(chunk, 2).toString(16) ;",
													"        }",
													"        return hex;",
													"    };",
													"",
													"    this.getOTP = function(secret) {",
													"        try {",
													"            var key = base32tohex(secret);",
													"            var epoch = Math.round(new Date().getTime() / 1000.0);",
													"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
													"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
													"            shaObj.setHMACKey(key, \"HEX\");",
													"            shaObj.update(time);",
													"            var hmac = shaObj.getHMAC(\"HEX\");",
													"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
													"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
													"            otp = (otp).substr(otp.length - 6, 6);",
													"        } catch (error) {",
													"            throw error;",
													"        }",
													"        return otp;",
													"    };",
													"",
													"}",
													"",
													"var totpObj = new TOTP();",
													"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
													"",
													"pm.environment.set(\"OTP\", otp);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
										},
										"url": {
											"raw": "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal/lease",
											"protocol": "http",
											"host": [
												"rpe-service-auth-provider-demo",
												"service",
												"core-compute-demo",
												"internal"
											],
											"path": [
												"lease"
											]
										}
									},
									"response": []
								},
								{
									"name": "AuthorizationToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84df342a-967e-48ad-ae02-d639128e92ee",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_HTTPS_PROTO}}://{{IDAM_DOMAIN}}/o/token?grant_type=password&username=mallikarjun.puttana@hmcts.net&password=Testing1234&client_id=rd-professional-api&client_secret=cc5f2a6-9690-11e9-bc42-526af7764f64&redirect_uri=https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect&scope=openid profile roles manage-user create-user search-user",
											"protocol": "{{API_HTTPS_PROTO}}",
											"host": [
												"{{IDAM_DOMAIN}}"
											],
											"path": [
												"o",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "mallikarjun.puttana@hmcts.net"
												},
												{
													"key": "password",
													"value": "Testing1234"
												},
												{
													"key": "client_id",
													"value": "rd-professional-api"
												},
												{
													"key": "client_secret",
													"value": "cc5f2a6-9690-11e9-bc42-526af7764f64"
												},
												{
													"key": "redirect_uri",
													"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect"
												},
												{
													"key": "scope",
													"value": "openid profile roles manage-user create-user search-user"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Organisation",
							"item": [
								{
									"name": "CreateOrganisation_1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid1\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Solicitors\",\n    \"sraId\": \"Kirkcsraid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantk1\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"praveenext.super@gmail.com\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBATKC1011\",\"PBATKC1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"MK4 4DH\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed1ed197-a8cf-4310-8974-ae9e4cf36ba1",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid2\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org2\",\n    \"sraId\": \"Kiransraid2\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp2\",\n    \"companyUrl\": \"www.Kiran2.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg2@email.co.uk\", \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc2011\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 2 organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111112990\",\n                    \"dxExchange\": \"911111292099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid3\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org3\",\n    \"sraId\": \"Kiransraid3\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp3\",\n    \"companyUrl\": \"www.Kiran3.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg3@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 3 Organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111113990\",\n                    \"dxExchange\": \"911111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid4\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org4\",\n    \"sraId\": \"Kiransraid4\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp4\",\n    \"companyUrl\": \"www.Kiran4.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg4@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc4011\",\"PBAtpc4021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid5\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													" pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org5\",\n    \"sraId\": \"Kiransraid5\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp5\",\n    \"companyUrl\": \"www.Kiran5.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg5@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc5011\",\"PBAtpc5021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 5111111990\",\n                    \"dxExchange\": \"511111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid6\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org6\",\n    \"sraId\": \"Kiransraid6\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp6\",\n    \"companyUrl\": \"www.Kiran6.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg6@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc6011\",\"PBAtpc6021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 6111111990\",\n                    \"dxExchange\": \"611111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_7",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid7\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org7\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg7@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\"\n            \n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Create Organisation_8",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid8\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"     pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org8\",\n    \"sraId\": \"Kiransraid8\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp8\",\n    \"companyUrl\": \"www.Kiran8.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg8@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc8011\",\"PBAtpc8021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"123 MAIN HOUSE\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Company number must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of Company number must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"company_number_uq1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t    \"name\": \"Demo orgtes078\",\n\t\t\"status\":\"Active\",\n\t    \"sraId\": \"Demoorgtes078\",\n\t    \"sraRegulated\": true,\n\t    \"companyNumber\": \"DemoT078\",\n\t    \"companyUrl\": \"www.Demoorgtes078.com\",\n\t    \"superUser\": {\n\t        \"firstName\": \"FNameDemoOrg078\",\n\t        \"lastName\": \"LNameDemoOrg078\",\n\t        \"email\": \"Demoorgtes078@mailinator.com\",\n\t\t\t\"userIdentifier\":\"DemoOrg078\",\n\t         \"jurisdictions\": [\n\t     {\n\t       \"id\": \"SSCS\"\n\t     },\n\t     {\n\t       \"id\": \"Probate\"\n\t     },\n\t     {\n\t       \"id\": \"Public Law\"\n\t     },\n\t     {\n\t       \"id\": \"Bulk Scanning\"\n\t     },\n\t     {\n\t       \"id\": \"Immigration & Asylum\"\n\t     },\n\t     {\n\t       \"id\": \"Civil Money Claims\"\n\t     },\n\t     {\n\t       \"id\": \"Employment\"\n\t     },\n\t     {\n\t       \"id\": \"Family public law and adoption\"\n\t     },\n\t     {\n\t       \"id\": \"Civil enforcement and possession\"\n\t     }\n\t   ]\n\t    },\n\t    \"paymentAccount\": [\n       \n\t           \"PBA1420078\"\n       \n\t    ],\n\t    \"contactInformation\": [\n\t        {\n\t            \"addressLine1\": \"Demoorgtes078\",\n\t            \"addressLine2\": \"Demoorgtes078\",\n\t            \"addressLine3\": \"Demoorgtes078\",\n\t            \"townCity\": \"West Kirby\",\n\t            \"county\": \"London\",\n\t            \"country\": \"UK\",\n\t            \"postCode\": \"TES078\",\n\t            \"dxAddress\": [\n\t                {\n\t                    \"dxNumber\": \"DX 9000000078\",\n\t                    \"dxExchange\": \"90000000000000000078\"\n\t                }\n\t            ]\n\t        }\n\t    ]\n\t}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of SRA_ID must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of SRA_ID must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"sra_id_uq1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t    \"name\": \"Demo orgtes078\",\n\t\t\"status\":\"Active\",\n\t    \"sraId\": \"Demoorgtes078\",\n\t    \"sraRegulated\": true,\n\t    \"companyNumber\": \"{{$randomBankAccount}}\",\n\t    \"companyUrl\": \"www.Demoorgtes078.com\",\n\t    \"superUser\": {\n\t        \"firstName\": \"FNameDemoOrg078\",\n\t        \"lastName\": \"LNameDemoOrg078\",\n\t        \"email\": \"Demoorgtes078@mailinator.com\",\n\t\t\t\"userIdentifier\":\"DemoOrg078\",\n\t         \"jurisdictions\": [\n\t     {\n\t       \"id\": \"SSCS\"\n\t     },\n\t     {\n\t       \"id\": \"Probate\"\n\t     },\n\t     {\n\t       \"id\": \"Public Law\"\n\t     },\n\t     {\n\t       \"id\": \"Bulk Scanning\"\n\t     },\n\t     {\n\t       \"id\": \"Immigration & Asylum\"\n\t     },\n\t     {\n\t       \"id\": \"Civil Money Claims\"\n\t     },\n\t     {\n\t       \"id\": \"Employment\"\n\t     },\n\t     {\n\t       \"id\": \"Family public law and adoption\"\n\t     },\n\t     {\n\t       \"id\": \"Civil enforcement and possession\"\n\t     }\n\t   ]\n\t    },\n\t    \"paymentAccount\": [\n       \n\t           \"PBA1420078\"\n       \n\t    ],\n\t    \"contactInformation\": [\n\t        {\n\t            \"addressLine1\": \"Demoorgtes078\",\n\t            \"addressLine2\": \"Demoorgtes078\",\n\t            \"addressLine3\": \"Demoorgtes078\",\n\t            \"townCity\": \"West Kirby\",\n\t            \"county\": \"London\",\n\t            \"country\": \"UK\",\n\t            \"postCode\": \"TES078\",\n\t            \"dxAddress\": [\n\t                {\n\t                    \"dxNumber\": \"DX 9000000078\",\n\t                    \"dxExchange\": \"90000000000000000078\"\n\t                }\n\t            ]\n\t        }\n\t    ]\n\t}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of PBA Number  must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Validation of PBA Number must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"pba_number_uq\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg9@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc1011\",\"PBAPOrg1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}&sraId=${{$randomInt}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												},
												{
													"key": "sraId",
													"value": "${{$randomInt}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Emai id must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"deleted_null_idx\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg1@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n      \"PBA1000{{$randomInt}}\"\n      ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}&sraId=${{$randomInt}}&paymentAccount=$PBA${{$randomInt}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												},
												{
													"key": "sraId",
													"value": "${{$randomInt}}"
												},
												{
													"key": "paymentAccount",
													"value": "$PBA${{$randomInt}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Payment Account field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Payment_Account field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"PBA number must start with PBA/pba and be followed by 7 alphanumeric characters\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2211113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA22113\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \" \" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Company number field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Company number field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"size must be between 0 and 8\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2211113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA2211334\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1234555\" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Email_id field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2c514c2-3739-4392-be04-1164f243618a",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful email_id field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													" //   pm.expect(response).to.include(\"deleted_null_idx\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2218113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA82713\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk@\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1234512\" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "DX_Number field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed1ed197-a8cf-4310-8974-ae9e4cf36ba1",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful DX_Number field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"  //  pm.expect(response).to.include(\"deleted_null_idx\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA9888112\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA98882\",\n    \"companyUrl\": \"www.trA9888112.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA9888112@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA9888113\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 2 organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"aX 9ss1112390\",\n                    \"dxExchange\": \"911111292099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "AddressLine1 field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of AddressLine1 being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"address_line1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg9@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc9011\",\"PBAtpc9021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of AddressLine1 is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of AddressLine1 being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"address_line1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA1834111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA18341\",\n    \"companyUrl\": \"www.trA1834111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA11834111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1149131\",\"PBA1491312\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Firstname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"first_name\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n       \n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA5511111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5511111\",\"PBA5511112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Lastname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"last_name\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n       \n        \"email\": \"tpA5111111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5211111\",\"PBA5211112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Companyname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"name\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA5111111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5211111\",\"PBA5211112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Emailid is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28503125-c250-4b58-973d-b8a449d13275",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of Emailid being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"Email cannot be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5516111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55611\",\n    \"companyUrl\": \"www.trA5516111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5261111\",\"PBA5261112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Change Organisation status",
							"item": [
								{
									"name": "Pending",
									"item": [
										{
											"name": "PUT Update status of Orgid2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Organisation Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org2\",\n            \"status\": \"PENDING\",\n            \"sraId\": \"Kiransraid2\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp2\",\n            \"companyUrl\": \"www.Kiran2.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg2@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc2011\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 2 organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111112990\",\n                            \"dxExchange\": \"911111292099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid2}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aae490fc-e363-4ad4-a72e-f84aac0ef7a0",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.organisationIdentifier);",
															"pm.environment.set(\"intEmailidP\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status remained as Pending\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.organisationIdentifier).to.eql(environment.Orgid2);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid2}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Active",
									"item": [
										{
											"name": "PUT Update status of Orgid1 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid1 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{DEMO_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Kiran Solicitors\",\n    \"status\":\"Active\",\n    \"sraId\": \"Kirkcsraid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantk1\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"praveenext.super@gmail.com\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBATKC1011\",\"PBATKC1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"MK4 4DH\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid1}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid1 to Active Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid1 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran 1 Org1\",\n    \"status\": \"ACTIVE\",\n    \"sraId\": \"Kirans 1raid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Pravee11\",\n    \"companyUrl\": \"www.Kiran11.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"prashanth.kotla@hmcts.net\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \"PBAOr11011\",\n        \"PBAOr11121\"\n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid1}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid1 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1110804b-ee17-4b6f-a329-7bcd925d0699",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidA\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Orgid1 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid1}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid5 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid5 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org5\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid5\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp5\",\n            \"companyUrl\": \"www.Kiran5.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg5@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc5011\",\n                \"PBAtpc5021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 5111111990\",\n                            \"dxExchange\": \"511111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid5}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid5 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35b0cb24-83c2-42b9-be71-667b3691e988",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid5 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid5}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid5 Active to Pending",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful -Organisation status cannot be changed from Active to Pending\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status to PENDING since existing organisation status is ACTIVE\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org5\",\n            \"status\": \"PENDING\",\n            \"sraId\": \"Kiransraid5\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp5\",\n            \"companyUrl\": \"www.Kiran5.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg5@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc5011\",\n                \"PBAtpc5021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 5111111990\",\n                            \"dxExchange\": \"511111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid5}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid5 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9af989fd-e347-421b-9dea-4e0c25932317",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid5 status remained Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid5}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid7 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid7 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org7\",\n            \"status\": \"ACTIVE\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg7@email.co.uk\",\n                \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n           \n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\"\n                   \n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid7}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid7 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8d3e1ff-55d6-4cd6-9ef1-ac5a7f532067",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid7 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid7}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid7}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid8 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid8 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org8\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid8\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp8\",\n            \"companyUrl\": \"www.Kiran8.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg8@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc8011\",\n                \"PBAtpc8021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"PRAV HOME\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid8}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid8 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1110804b-ee17-4b6f-a329-7bcd925d0699",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"pm.test(\"Successful - Orgid8 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid8}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid8}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Blocked",
									"item": [
										{
											"name": "PUT Update status of Orgid3 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid3 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp: Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ab14bc7-bd35-4ad0-8503-609bf791c075",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid3 is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid3 Active to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid3 Status from Active to BLOCKED\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp:Blocked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1172065f-7d43-4855-8133-905183ba7921",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid3 is Blocked\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"BLOCKED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid3 Blocked to Deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful - Organisation status cannot be changed from BLOCKED to Deleted\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"DELETED\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f1563ae-2123-49ec-bd64-351e50fb05ad",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid 3 remained BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4 to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid4 to Blocked Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid4 Exp: Blocked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fbfa0a2a-0b66-4d1d-87d0-339d6c1035fb",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid4 is BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"BLOCKED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid4}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4  Blocked to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"",
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Organisation status can be changed from BLOCKED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid4 Exp: Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "166bb412-18df-4404-8c2d-12a8710f2098",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidB\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid4 remained as BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid4}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4 to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid4 to Blocked Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Deleted",
									"item": [
										{
											"name": "PUT Update status of Orgid6 to Deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid6 to Deleted Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"DELETED\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid6 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50039eff-c72f-4ea9-8057-5e71df3b0866",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status is Deleted\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid6}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid6}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid6 Deleted to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status cannot be changed from DELETED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status since existing organisation status is DELETED\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid6 Deleted to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01bbeb05-0a68-4707-bbd1-88ba782233f9",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status cannot be changed from DELETED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status since existing organisation status is DELETED\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid6 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1cda8186-155c-4310-bb12-1dc1a8ab1010",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidD\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid6 remained as DELETED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid6}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid6}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve organisations",
							"item": [
								{
									"name": "Get All Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa06ec0-18c9-411b-8c07-c3d6f64b0b1c",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfba87fd-c735-43c4-a0e6-944f5bb2d925",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Active Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa06ec0-18c9-411b-8c07-c3d6f64b0b1c",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfba87fd-c735-43c4-a0e6-944f5bb2d925",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?status=Active",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Pending Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa06ec0-18c9-411b-8c07-c3d6f64b0b1c",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfba87fd-c735-43c4-a0e6-944f5bb2d925",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?status=Pending",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "status",
													"value": "Pending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation using OrgID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "094996ad-d469-40d7-8469-e2eb8536d9f0",
												"exec": [
													"let response = pm.response.json();",
													"console.log(response.organisationIdentifier)",
													"",
													"",
													"",
													"pm.test(\"Successful - Organisation Info retrieved using Organisation Identifier\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"    pm.expect(response.organisationIdentifier).to.eql(environment.Orgid1);",
													"  });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "ServiceAuthorization",
												"value": "Bearer {{DEMO_AUTH_KEY}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid1}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "id",
													"value": "{{intOrgid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation using non-existing Orgid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ba53c7-f2ae-4014-a845-10efd7b9f510",
												"exec": [
													"let response = pm.response.json();",
													"console.log(response.organisationIdentifier)",
													"",
													"",
													"pm.test(\"Successful Test - Organisation Identifier:Kiran does not exist\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?id=Kiran",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "id",
													"value": "Kiran"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Users Demo",
							"item": [
								{
									"name": "Get All users from an Organisation in Pending Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Pending status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users of an Organisation that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "Praveen"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Active Status (UP data different to PRD)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status.Data difference between PRD and UP\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid7}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Blocked Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{XDEMO_IDAM_KEYI_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid4}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Deleted Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid6}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Get User info  using email from Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidA}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidA}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using non existing email from an Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Get User info  using email from Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email=praveen@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveen@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Pending Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Pending status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidP}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidP}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Blocked Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidB}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidB}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Deleted Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidD}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidD}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using non existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the user(emailid) does not exist in UP \", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email=poraveen@gmail.co.uk",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "poraveen@gmail.co.uk"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation Users using Active Org ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2919cf9c-9411-4fe1-ada6-60c5a2c37e20",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9a5a91e6-3fba-42c7-8744-095db20eefc0",
												"exec": [
													"",
													"pm.test(\"Successful GET request to retrieve User info using Organisation Identifier \", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "AC1:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd NO Request parameter is included (i.e. the Endpoint does not contain, showdeleted={True/False})\n      Then list of professional users, excluding the 'Deleted' ones', is returned\n      AND HTTP status is returned 200\n \nAC2:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd there is NO Organisation for the given Organisation ID\n      Then HTTP status is returned 404\n \nAC3: (to be tested as part of RDCC - 207 - here for reference only so that the story makes sense)\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd the Request parameter is set to 'True'\n      Then list of all the professional users, including the 'Deleted' ones', is returned\n      AND HTTP status is returned 200\n \nAC4:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd the Organisation 'status' is NOT 'active'     \nThen NO users will be returned (only an empty list of Users will be shown)\n      AND HTTP status is returned 200\n "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Users-PRD",
							"item": [
								{
									"name": "Add user to an organisation in Pending status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a76605a-7e3f-4b4c-9173-a4eb5f76faa9",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Pending Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"value": "Bearer {{XUI_IDAM_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kuserorg2@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ], \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"query": [
												{
													"key": "Status",
													"value": "Pending",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid2}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with all roles",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran kakatiya Test2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-case-manager\"\n   \n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user with invalid email to an organisation in Active status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg@1@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation  that does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\"\n   \n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "Praveen"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_user_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid2\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid2 with pui_user_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran pum\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pum@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_organisation_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid4\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid4 with pui_organisation_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pom@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-organisation-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid5}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status- with pui_case_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid5\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid5 with pui_case_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pcm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-case-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_finance_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid6\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid6 with pui_finance_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveen.c.thottempudi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid7}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an Organisation  in Blocked status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Blocked Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kusr000008@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid3}}"
												}
											]
										},
										"description": "(Email id same as another user within the same organisation"
									},
									"response": []
								},
								{
									"name": "Add user to an Organisation in Deleted status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Deleted Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kuser6pum@email.co.uk\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid6}}"
												}
											]
										},
										"description": "(Email id same as another user of different organsiation)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add user again to the same Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of User(email_id) must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg1@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n   ],\n    \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add a orgadmin of an Organisation as a user to different Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"{{Emailid1}}\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ], \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add a user of an Organisation to different Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg1@email.co.uk\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify roles",
							"item": [
								{
									"name": "Add user to an organisation-rdcc-528-kaka",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"KiranTIDAMTest2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kakatiyalimited@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation -rdcc-528-tpchy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"KiranTIDAMTest2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add role",
							"item": [
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":orgId",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "K55PY9N"
												},
												{
													"key": "userId",
													"value": "e6fbf3b0-c118-491f-8598-12be1c3483aa"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD PUM role to an active user RDCC_503",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":orgId",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "K55PY9N"
												},
												{
													"key": "userId",
													"value": "e6fbf3b0-c118-491f-8598-12be1c3483aa"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete role",
							"item": [
								{
									"name": "Delete POM role to an active user RDCC_453",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/K55PY9N/users/8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"K55PY9N",
												"users",
												"8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/K55PY9N/users/8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"K55PY9N",
												"users",
												"8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "External",
					"item": [
						{
							"name": "Retrieve Users",
							"item": [
								{
									"name": "Get All users from an Active Organisation using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Superuser token - All users of the organisation are retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Super_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?status=Active&showdeleted= True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												},
												{
													"key": "showdeleted",
													"value": " True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using Multi  role user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Multi role token - All users of the organisation are retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Multi_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?status=Active&showdeleted= True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												},
												{
													"key": "showdeleted",
													"value": " True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PUM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PUM token - All users of the organisation are displayed\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PCM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PCM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?showdeleted =True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "pending",
													"disabled": true
												},
												{
													"key": "showdeleted ",
													"value": "True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PFM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PFM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PFM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using POM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: POM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{POM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Blocked Status using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{BLKD_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Deleted Status using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DLTD_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Super user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Superuser token - Super user info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Super_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.super@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.super@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Super user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Superuser token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Super_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Multi role user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Multi role token - Multirole user info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Multi_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.multi@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.multi@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Multi role user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: Multirole token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Multi_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PUM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PUM token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PUM user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PUM token - PCM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pcm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pcm@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using POM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: POM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{POM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pom@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pom@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PFM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PFM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PFM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pfm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pfm@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PCM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e735250a-bec5-4ef7-bfff-73488f30283c",
												"exec": [
													"pm.test(\"Successful: PCM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cb8be9e-dca3-45cf-965b-a20f06cfcd83",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pcm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pcm@gmail.com"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Users",
							"item": [
								{
									"name": "Add users using Super user token",
									"item": [
										{
											"name": "User does not exist in SIDAM",
											"item": [
												{
													"name": "Add user to an organisation in Active status-with multiple roles",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"S_Multiuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Superuser token: Successful add user  with multiple roles to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\",\n    \"caseworker-probate\",\n\t\"caseworker-probate-solicitor\"\n    ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation validate email address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"",
																	"pm.test(\"Superuser token: Successful validation of email format\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail@.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with POM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"POMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user  with POM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pom@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \n    \"pui-organisation-manager\"\n    ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PFM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PFMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user  with PFM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pfm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \n    \"pui-finance-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PUM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PUMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user with PUM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pum@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n  \"caseworker-probate\",\n\"caseworker-probate-solicitor\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PCM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PCMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user with PCM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pcm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-case-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an Organisation  in Blocked status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"pm.test(\"Successful: Cannot add a user to a Organisation in Blocked Status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{BLKD_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenblocked@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another user within the same organisation"
													},
													"response": []
												},
												{
													"name": "Add user to an Organisation in Deleted status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"pm.test(\"Successful: Cannot add a user to a Organisation in Deleted Status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{DLTD_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveendeleted@gmail.com\",\n  \"roles\": [\n    \"pui-user-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another user of different organsiation)"
													},
													"response": []
												},
												{
													"name": "Duplicate User Validation: Add user again to the same Org",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.text();",
																	"console.log(response)",
																	"",
																	"pm.test(\"Successful Validation of User(email_id) must be unique\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(409);",
																	"    pm.expect(response).to.include(\"User with this email already exists\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another superuser)"
													},
													"response": []
												},
												{
													"name": "Duplicate User Validation: Add a Orgadmin of an Organisation as a user to different Org",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"let response = pm.response.text();",
																	"console.log(response)",
																	"",
																	"pm.test(\"Successful Validation of email_id must be unique\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(409);",
																	"    pm.expect(response).to.include(\"User with this email already exists\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.blkd@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another superuser)"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User does exist in SIDAM",
											"item": [
												{
													"name": "Add user to an organisation in Active status-with multiple roles",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
																"exec": [
																	"",
																	"//delete the user in PRD and UP before submiting this request.",
																	"",
																	"let response = pm.response.json();",
																	"pm.environment.set(\"Multiuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful Get Org information using Superuser token\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\",\n    \"caseworker-divorce\",\n                \"caseworker-divorce-solicitor\",\n                \"caseworker-divorce-financialremedy\",\n                \"caseworker-divorce-financialremedy-solicitor\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using POM token",
									"item": [
										{
											"name": "POM",
											"item": [
												{
													"name": "POM_PRD",
													"item": [
														{
															"name": "Demo POM Get SIDAM Authorisation token PartA",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																			"console.log(response.code)",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"type": "text",
																		"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/x-www-form-urlencoded"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "rd-professional-api",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
																			"type": "text"
																		},
																		{
																			"key": "response_type",
																			"value": "code",
																			"type": "text"
																		},
																		{
																			"key": "scope",
																			"value": "openid profile roles openid roles profile create-user manage-user",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"authorize"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														},
														{
															"name": "Demo POM Get SIDAM Authorisation token PartB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
																			"",
																			"",
																			"",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"value": "application/x-www-form-urlencoded",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "{{BASE64_2}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "rd-professional-api",
																			"type": "text"
																		},
																		{
																			"key": "client_secret",
																			"value": "cc5f2a6-9690-11e9-bc42-526af7764f64",
																			"type": "text"
																		},
																		{
																			"key": "code",
																			"value": "{{IDAM_CODE_PARTA}}",
																			"type": "text"
																		},
																		{
																			"key": "grant_type",
																			"value": "authorization_code",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"token"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "POM_XUI",
													"item": [
														{
															"name": "Demo POM Get SIDAM Authorisation token PartA",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																			"console.log(response.code)",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"type": "text",
																		"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/x-www-form-urlencoded"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "xuiaowebapp",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																			"type": "text"
																		},
																		{
																			"key": "response_type",
																			"value": "code",
																			"type": "text"
																		},
																		{
																			"key": "scope",
																			"value": "openid profile roles openid roles profile create-user manage-user",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"authorize"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														},
														{
															"name": "Demo POM Get SIDAM Authorisation token PartB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
																			"",
																			"",
																			"",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"value": "application/x-www-form-urlencoded",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "{{BASE64_2}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "xuiaowebapp",
																			"type": "text"
																		},
																		{
																			"key": "client_secret",
																			"value": "yB71mnPeypP3HlcN",
																			"type": "text"
																		},
																		{
																			"key": "code",
																			"value": "{{IDAM_CODE_PARTA}}",
																			"type": "text"
																		},
																		{
																			"key": "grant_type",
																			"value": "authorization_code",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"token"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"POM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: POM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{POM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pomext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PFM token",
									"item": [
										{
											"name": "PFM",
											"item": [
												{
													"name": "Demo PFM Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5wZm1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo PFM Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PFM_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PFM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PFM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PFM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pfmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PUM token",
									"item": [
										{
											"name": "Add user to an organisation in Active status-with PUM role",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{DEMO_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PUM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmex1t@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PCM token",
									"item": [
										{
											"name": "PCM",
											"item": [
												{
													"name": "Demo PCM Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5wY21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo PCM Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PCM_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles Copy Copy Copy Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PCM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using Multi token",
									"item": [
										{
											"name": "Multi user",
											"item": [
												{
													"name": "Demo Multi Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5tdWx0aUBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo Multi Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"Multi_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles Copy Copy Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{Multi_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add roles",
							"item": [
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "04bceeb5-ba00-438c-b079-585f624339e2"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD PUM role to an active user RDCC_503",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "04bceeb5-ba00-438c-b079-585f624339e2"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_452 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_503 using PCM token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete roles",
							"item": [
								{
									"name": "Delete POM role to an active user RDCC_453",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/04bceeb5-ba00-438c-b079-585f624339e2",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"04bceeb5-ba00-438c-b079-585f624339e2"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/04bceeb5-ba00-438c-b079-585f624339e2",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"04bceeb5-ba00-438c-b079-585f624339e2"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete POM role to an active user RDCC_453 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/256d2169-9133-43ad-a072-cd8cabcd9df5",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"256d2169-9133-43ad-a072-cd8cabcd9df5"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c40dc293-21df-4967-ab2c-3cb4963b732e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd683d99-19c5-4a9b-a25e-857af70a3911",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AAT",
			"item": [
				{
					"name": "tpchy1974@gmail.com AAT PRD_ADMIN Praveen Copy",
					"item": [
						{
							"name": "Get AAT Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"AAT_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"K6KA6PRLRFWQLSD6\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-aat",
										"service",
										"core-compute-aat",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "praveen.thottempudi@hmcts.net:hmcts2Aldgate",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "xuiaowebapp:yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-aat.service.core-compute-aat.internal/oauth2/callback",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.aat.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"aat",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"XUI_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-aat.service.core-compute-aat.internal/oauth2/callback",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api-idam-aat.service.core-compute-idam-aat.internal/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api-idam-aat",
										"service",
										"core-compute-idam-aat",
										"internal"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Perf",
			"item": [
				{
					"name": "Perf PRD_ADMIN_PRD",
					"item": [
						{
							"name": "Get demo Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"AAT_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-demo",
										"service",
										"core-compute-demo",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": " admin.refdata@hmcts.net:Chan9e-me",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "xuiaowebapp:yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "rd-professional-api",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://rd-professional-api-perftest.service.core-compute-perftest.internal/oauth2redirect",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.perftest.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"perftest",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-perftest.service.core-compute-perftest.internal/oauth2/callback",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.perftest.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"perftest",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.globals.set(\"XUI_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-perftest.service.core-compute-perftest.internal/oauth2/callback",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.perftest.platform.hmcts.net/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api",
										"perftest",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ITHC",
			"item": [
				{
					"name": "ITHC PRD_ADMIN admin.refdata xuiaowebapp",
					"item": [
						{
							"name": "Get ITHC Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"DEMO_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-ithc.service.core-compute-ithc.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-ithc",
										"service",
										"core-compute-ithc",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "admin.refdata@hmcts.net:Chan9e-me",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "xuiaowebapp:yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.ithc.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"ithc",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"DEMO_ADMIN_AO_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api-idam-ithc.service.core-compute-idam-ithc.internal/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api-idam-ithc",
										"service",
										"core-compute-idam-ithc",
										"internal"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ITHC PRD_ADMIN Praveen xuiaowebapp",
					"item": [
						{
							"name": "Get ITHC Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"DEMO_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"K6KA6PRLRFWQLSD6\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-aat",
										"service",
										"core-compute-aat",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "praveen.thottempudi@hmcts.net:hmcts2Aldgate",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "xuiaowebapp:yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles openid roles profile create-user manage-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.ithc.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"ithc",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"DEMO_PR_AO_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "yB71mnPeypP3HlcN",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api-idam-ithc.service.core-compute-idam-ithc.internal/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api-idam-ithc",
										"service",
										"core-compute-idam-ithc",
										"internal"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tpchy1974@gmail.com ITHC PRD_ADMIN",
					"item": [
						{
							"name": "Get AAT Service Authorization token Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9c620d-ee5b-467b-88cb-9973b5f08f32",
										"exec": [
											"let response = pm.response.text();",
											"pm.globals.set(\"AAT_AUTH_KEY\",response);",
											"",
											"pm.test(\"Successful POST request to get AAT_AUTH_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7840d4a0-e945-4e7c-b214-478ccc3ae9bd",
										"exec": [
											"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
											"",
											"/**",
											" * @preserve A JavaScript implementation of the SHA family of hashes, as",
											" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
											" * HMAC implementation as defined in FIPS PUB 198a",
											" *",
											" * Copyright Brian Turek 2008-2017",
											" * Distributed under the BSD License",
											" * See http://caligatio.github.com/jsSHA/ for more information",
											" *",
											" * Several functions taken from Paul Johnston",
											" */",
											"",
											"/*jslint",
											"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
											"*/",
											"",
											" /**",
											"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
											"  * functions that are not needed when a limited number of SHA families are",
											"  * selected",
											"  *",
											"  * @define {number} ORed value of SHA variants to be supported",
											"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
											"  */",
											"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
											"var X={};",
											"",
											"(function (global)",
											"{",
											"\t\"use strict\";",
											"",
											"\t/* Globals */",
											"\tvar TWO_PWR_32 = 4294967296;",
											"",
											"\t/**",
											"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
											"\t *",
											"\t * @private",
											"\t * @constructor",
											"\t * @this {Int_64}",
											"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
											"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
											"\t */",
											"\tfunction Int_64(msint_32, lsint_32)",
											"\t{",
											"\t\tthis.highOrder = msint_32;",
											"\t\tthis.lowOrder = lsint_32;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string to an array of big-endian words",
											"\t *",
											"\t * There is a known bug with an odd number of existing bytes and using a",
											"\t * UTF-16 encoding.  However, this function is used such that the existing",
											"\t * bytes are always a result of a previous UTF-16 str2packed call and",
											"\t * therefore there should never be an odd number of existing bytes",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
											"\t *   use to encode the source string",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
											"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"",
											"\t\tif (\"UTF8\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tcodePntArr = [];",
											"",
											"\t\t\t\tif (0x80 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(codePnt);",
											"\t\t\t\t}",
											"\t\t\t\telse if (0x800 > codePnt)",
											"\t\t\t\t{",
											"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
											"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
											"\t\t\t\t}",
											"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\ti += 1;",
											"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
											"\t\t\t\t\tcodePntArr.push(",
											"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
											"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
											"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t\t{",
											"\t\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t\t}",
											"\t\t\t\t\t/* Known bug kicks in here */",
											"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\t\tbyteCnt += 1;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
											"\t\t{",
											"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
											"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
											"\t\t\t\t* need LE and not switching endianness due to SHA-3",
											"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
											"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
											"\t\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t\t{",
											"\t\t\t\tcodePnt = str.charCodeAt(i);",
											"\t\t\t\tif (transposeBytes === true)",
											"\t\t\t\t{",
											"\t\t\t\t\tj = codePnt & 0xFF;",
											"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
											"\t\t\t\t}",
											"",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 2;",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a hex string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
											"\t\t\texistingByteLen, shiftModifier;",
											"",
											"\t\tif (0 !== (length % 2))",
											"\t\t{",
											"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 2)",
											"\t\t{",
											"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
											"\t\t\tif (!isNaN(num))",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a string of raw bytes to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
											"\t\t\tbyteOffset, shiftModifier;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 1)",
											"\t\t{",
											"\t\t\tcodePnt = str.charCodeAt(i);",
											"",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert a base-64 string to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {string} str String to be converted to binary representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
											"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
											"",
											"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
											"\t\t}",
											"",
											"\t\tfirstEqual = str.indexOf(\"=\");",
											"\t\tstr = str.replace(/\\=/g, \"\");",
											"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
											"\t\t}",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < str.length; i += 4)",
											"\t\t{",
											"\t\t\tstrPart = str.substr(i, 4);",
											"\t\t\ttmpInt = 0;",
											"",
											"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
											"\t\t\t{",
											"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
											"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
											"\t\t\t}",
											"",
											"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
											"\t\t\t{",
											"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
											"\t\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\t\twhile (packed.length <= intOffset)",
											"\t\t\t\t{",
											"\t\t\t\t\tpacked.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
											"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t\t\tbyteCnt += 1;",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an ArrayBuffer to an array of big-endian words",
											"\t *",
											"\t * @private",
											"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t *   representation",
											"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
											"\t *   append the results to",
											"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
											"\t *   array",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t *   length of \"value\"",
											"\t */",
											"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
											"\t{",
											"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
											"",
											"\t\tpacked = existingPacked || [0];",
											"\t\texistingPackedLen = existingPackedLen || 0;",
											"\t\texistingByteLen = existingPackedLen >>> 3;",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"\t\tarrView = new Uint8Array(arr);",
											"",
											"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
											"\t\t{",
											"\t\t\tbyteOffset = i + existingByteLen;",
											"\t\t\tintOffset = byteOffset >>> 2;",
											"\t\t\tif (packed.length <= intOffset)",
											"\t\t\t{",
											"\t\t\t\tpacked.push(0);",
											"\t\t\t}",
											"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
											"\t\t}",
											"",
											"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a hex string.",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   hexidecimal representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Hexidecimal representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
											"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\t/* The below is more than a byte but it gets taken care of later */",
											"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
											"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
											"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
											"\t\t}",
											"",
											"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to a base-64 string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   base-64 representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
											"\t *   containing validated output formatting options",
											"\t * @return {string} Base-64 encoded representation of the parameter in",
											"\t *   string form",
											"\t */",
											"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
											"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 3)",
											"\t\t{",
											"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
											"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
											"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
											"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
											"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
											"\t\t\tfor (j = 0; j < 4; j += 1)",
											"\t\t\t{",
											"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
											"\t\t\t\t}",
											"\t\t\t\telse",
											"\t\t\t\t{",
											"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t}",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to raw bytes string",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   a raw bytes string representation",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {string} Raw bytes representation of the parameter in string",
											"\t *   form",
											"\t */",
											"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t\tstr += String.fromCharCode(srcByte);",
											"\t\t}",
											"",
											"\t\treturn str;",
											"\t}",
											"",
											"\t/**",
											"\t * Convert an array of big-endian words to an ArrayBuffer",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} packed Array of integers to be converted to",
											"\t *   an ArrayBuffer",
											"\t * @param {number} outputLength Length of output in bits",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
											"\t *   ArrayBuffer",
											"\t */",
											"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
											"\t{",
											"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
											"\t\tarrView = new Uint8Array(retVal);",
											"",
											"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
											"",
											"\t\tfor (i = 0; i < length; i += 1)",
											"\t\t{",
											"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Validate hash list containing output formatting options, ensuring",
											"\t * presence of every option or adding the default value",
											"\t *",
											"\t * @private",
											"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
											"\t *   hash list containing output formatting options",
											"\t */",
											"\tfunction getOutputOpts(options)",
											"\t{",
											"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
											"\t\t\toutputOptions;",
											"\t\toutputOptions = options || {};",
											"",
											"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
											"",
											"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
											"\t\t{",
											"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
											"\t\t}",
											"",
											"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
											"\t\t\t}",
											"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
											"\t\t}",
											"",
											"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
											"\t\t}",
											"",
											"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
											"\t\t{",
											"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Function that takes an input format and UTF encoding and returns the",
											"\t * appropriate function used to convert the input.",
											"\t *",
											"\t * @private",
											"\t * @param {string} format The format of the string to be converted",
											"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
											"\t *\tUTF16LE)",
											"\t * @param {number} bigEndianMod Modifier for whether hash function is",
											"\t *   big or small endian",
											"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
											"\t *   Array<number>, binLen : number}} Function that will convert an input",
											"\t *   string to a packed int array",
											"\t */",
											"\tfunction getStrConverter(format, utfType, bigEndianMod)",
											"\t{",
											"\t\tvar retVal;",
											"",
											"\t\t/* Validate encoding */",
											"\t\tswitch (utfType)",
											"\t\t{",
											"\t\tcase \"UTF8\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16BE\":",
											"\t\t\t/* Fallthrough */",
											"\t\tcase \"UTF16LE\":",
											"\t\t\t/* Fallthrough */",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
											"\t\t}",
											"",
											"\t\t/* Map inputFormat to the appropriate converter */",
											"\t\tswitch (format)",
											"\t\t{",
											"\t\tcase \"HEX\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"TEXT\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"B64\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"BYTES\":",
											"\t\t\t/**",
											"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(str, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tcase \"ARRAYBUFFER\":",
											"\t\t\ttry {",
											"\t\t\t\tretVal = new ArrayBuffer(0);",
											"\t\t\t} catch(ignore) {",
											"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t}",
											"\t\t\t/**",
											"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
											"\t\t\t *   representation",
											"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
											"\t\t\t *   append the results to",
											"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
											"\t\t\t *   array",
											"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
											"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
											"\t\t\t *   length of \"value\"",
											"\t\t\t */",
											"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
											"\t\t\t\t};",
											"\t\t\tbreak;",
											"\t\tdefault:",
											"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_32(x, n)",
											"\t{",
											"\t\treturn (x << n) | (x >>> (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate left",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotl_64(x, n)",
											"\t{",
											"\t\tif (n > 32)",
											"\t\t{",
											"\t\t\tn = n - 32;",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse if (0 !== n)",
											"\t\t{",
											"\t\t\treturn new Int_64(",
											"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
											"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
											"\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\treturn x;",
											"\t\t}",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_32(x, n)",
											"\t{",
											"\t\treturn (x >>> n) | (x << (32 - n));",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of circular rotate right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted circularly by n bits",
											"\t */",
											"\tfunction rotr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
											"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {number} The x shifted by n bits",
											"\t */",
											"\tfunction shr_32(x, n)",
											"\t{",
											"\t\treturn x >>> n;",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of shift right",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @param {number} n The number of bits to shift",
											"\t * @return {Int_64} The x shifted by n bits",
											"\t */",
											"\tfunction shr_64(x, n)",
											"\t{",
											"\t\tvar retVal = null;",
											"",
											"\t\tif (32 >= n)",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\tx.highOrder >>> n,",
											"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
											"\t\t\t\t);",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tretVal = new Int_64(",
											"\t\t\t\t\t0,",
											"\t\t\t\t\tx.highOrder >>> (n - 32)",
											"\t\t\t\t);",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Parity function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction parity_32(x, y, z)",
											"\t{",
											"\t\treturn x ^ y ^ z;",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (~x & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Ch function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction ch_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The first 32-bit integer argument",
											"\t * @param {number} y The second 32-bit integer argument",
											"\t * @param {number} z The third 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_32(x, y, z)",
											"\t{",
											"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Maj function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument",
											"\t * @param {Int_64} y The second 64-bit integer argument",
											"\t * @param {Int_64} z The third 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction maj_64(x, y, z)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\t\t(x.highOrder & y.highOrder) ^",
											"\t\t\t\t(x.highOrder & z.highOrder) ^",
											"\t\t\t\t(y.highOrder & z.highOrder),",
											"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
											"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
											"\t\t\t\t(y.lowOrder & z.lowOrder)",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma0_64(x)",
											"\t{",
											"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
											"\t\t\trotr39 = rotr_64(x, 39);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
											"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Sigma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction sigma1_64(x)",
											"\t{",
											"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
											"\t\t\trotr41 = rotr_64(x, 41);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
											"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma0 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma0_64(x)",
											"\t{",
											"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
											"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * The 32-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {number} x The 32-bit integer argument",
											"\t * @return {number} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_32(x)",
											"\t{",
											"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
											"\t}",
											"",
											"\t/**",
											"\t * The 64-bit implementation of the NIST specified Gamma1 function",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The 64-bit integer argument",
											"\t * @return {Int_64} The NIST specified output of the function",
											"\t */",
											"\tfunction gamma1_64(x)",
											"\t{",
											"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
											"\t\t\tshr6 = shr_64(x, 6);",
											"",
											"\t\treturn new Int_64(",
											"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
											"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
											"\t\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b",
											"\t */",
											"\tfunction safeAdd_32_2(a, b)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_32_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {number} a The first 32-bit integer argument to be added",
											"\t * @param {number} b The second 32-bit integer argument to be added",
											"\t * @param {number} c The third 32-bit integer argument to be added",
											"\t * @param {number} d The fourth 32-bit integer argument to be added",
											"\t * @param {number} e The fifth 32-bit integer argument to be added",
											"\t * @return {number} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_32_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
											"\t\t\t\t(e & 0xFFFF),",
											"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
											"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
											"",
											"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"\t}",
											"",
											"\t/**",
											"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} x The first 64-bit integer argument to be added",
											"\t * @param {Int_64} y The second 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of x + y",
											"\t */",
											"\tfunction safeAdd_64_2(x, y)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
											"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d",
											"\t */",
											"\tfunction safeAdd_64_4(a, b, c, d)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
											"\t * internally to work around bugs in some JS interpreters.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a The first 64-bit integer argument to be added",
											"\t * @param {Int_64} b The second 64-bit integer argument to be added",
											"\t * @param {Int_64} c The third 64-bit integer argument to be added",
											"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
											"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
											"\t * @return {Int_64} The sum of a + b + c + d + e",
											"\t */",
											"\tfunction safeAdd_64_5(a, b, c, d, e)",
											"\t{",
											"\t\tvar lsw, msw, lowOrder, highOrder;",
											"",
											"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
											"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
											"\t\t\t(e.lowOrder & 0xFFFF);",
											"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
											"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
											"\t\t\t(lsw >>> 16);",
											"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
											"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
											"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
											"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
											"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
											"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
											"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
											"",
											"\t\treturn new Int_64(highOrder, lowOrder);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs two given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_2(a, b)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * XORs five given arguments.",
											"\t *",
											"\t * @private",
											"\t * @param {Int_64} a First argument to be XORed",
											"\t * @param {Int_64} b Second argument to be XORed",
											"\t * @param {Int_64} c Third argument to be XORed",
											"\t * @param {Int_64} d Fourth argument to be XORed",
											"\t * @param {Int_64} e Fifth argument to be XORed",
											"\t * @return {Int_64} The XOR of the arguments",
											"\t */",
											"\tfunction xor_64_5(a, b, c, d, e)",
											"\t{",
											"\t\treturn new Int_64(",
											"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
											"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
											"\t\t);",
											"\t}",
											"",
											"\t/**",
											"\t * Returns a clone of the given SHA3 state",
											"\t *",
											"\t * @private",
											"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
											"\t * @return {Array<Array<Int_64>>} The cloned state",
											"\t */",
											"\tfunction cloneSHA3State(state) {",
											"\t\tvar clone = [], i;",
											"\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t{",
											"\t\t\tclone[i] = state[i].slice();",
											"\t\t}",
											"",
											"\t\treturn clone;",
											"\t}",
											"",
											"\t/**",
											"\t * Gets the state values for the specified SHA variant",
											"\t *",
											"\t * @param {string} variant The SHA variant",
											"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
											"\t */",
											"\tfunction getNewState(variant)",
											"\t{",
											"\t\tvar retVal = [], H_trunc, H_full, i;",
											"",
											"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tH_trunc = [",
											"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
											"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
											"\t\t\t];",
											"\t\t\tH_full = [",
											"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
											"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
											"\t\t\t];",
											"",
											"\t\t\tswitch (variant)",
											"\t\t\t{",
											"\t\t\tcase \"SHA-224\":",
											"\t\t\t\tretVal = H_trunc;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-256\":",
											"\t\t\t\tretVal = H_full;",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-384\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
											"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
											"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
											"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
											"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
											"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
											"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
											"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"SHA-512\":",
											"\t\t\t\tretVal = [",
											"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
											"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
											"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
											"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
											"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
											"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
											"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
											"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
											"\t\t\t\t];",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tfor (i = 0; i < 5; i += 1)",
											"\t\t\t{",
											"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
											"\t\t\t}",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"No SHA variants supported\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-1 hashing over a 512-byte block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @return {Array<number>} The resulting H values",
											"\t */",
											"\tfunction roundSHA1(block, H)",
											"\t{",
											"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
											"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"",
											"\t\tfor (t = 0; t < 80; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\tW[t] = block[t];",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
											"\t\t\t}",
											"",
											"\t\t\tif (t < 20)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 40)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
											"\t\t\t}",
											"\t\t\telse if (t < 60)",
											"\t\t\t{",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
											"\t\t\t} else {",
											"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
											"\t\t\t}",
											"",
											"\t\t\te = d;",
											"\t\t\td = c;",
											"\t\t\tc = rotl(b, 30);",
											"\t\t\tb = a;",
											"\t\t\ta = T;",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-1 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-1",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, totalLen;",
											"",
											"\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t   \"shorting\" the addition is OK. */",
											"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
											"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
											"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
											"\t\t * a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
											"\t\t{",
											"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
											"\t\t}",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/* Put this here so the K arrays aren't put on the stack for every block */",
											"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
											"\tif ((6 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\tK_sha2 = [",
											"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
											"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
											"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
											"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
											"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
											"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
											"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
											"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
											"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
											"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
											"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
											"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
											"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
											"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
											"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
											"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
											"\t\t];",
											"",
											"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
											"\t\t{",
											"\t\t\t K_sha512 = [",
											"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
											"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
											"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
											"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
											"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
											"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
											"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
											"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
											"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
											"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
											"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
											"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
											"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
											"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
											"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
											"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
											"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
											"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
											"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
											"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
											"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
											"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
											"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
											"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
											"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
											"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
											"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
											"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
											"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
											"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
											"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
											"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
											"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
											"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
											"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
											"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
											"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
											"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
											"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
											"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
											"\t\t\t];",
											"\t\t}",
											"\t}",
											"\tif ((8 & SUPPORTED_ALGS) !== 0)",
											"\t{",
											"\t\trc_sha3 = [",
											"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
											"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
											"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
											"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
											"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
											"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
											"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
											"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
											"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
											"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
											"\t\t];",
											"",
											"\t\tr_sha3 = [",
											"\t\t\t[ 0, 36,  3, 41, 18],",
											"\t\t\t[ 1, 44, 10, 45,  2],",
											"\t\t\t[62,  6, 43, 15, 61],",
											"\t\t\t[28, 55, 25, 21, 56],",
											"\t\t\t[27, 20, 39,  8, 14]",
											"\t\t];",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-2 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @return {Array<number|Int_64>} The resulting H values",
											"\t */",
											"\tfunction roundSHA2(block, H, variant)",
											"\t{",
											"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
											"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
											"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
											"",
											"\t\t/* Set up the various function handles and variable for the specific",
											"\t\t * variant */",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\tnumRounds = 64;",
											"\t\t\tbinaryStringMult = 1;",
											"\t\t\tInt = Number;",
											"\t\t\tsafeAdd_2 = safeAdd_32_2;",
											"\t\t\tsafeAdd_4 = safeAdd_32_4;",
											"\t\t\tsafeAdd_5 = safeAdd_32_5;",
											"\t\t\tgamma0 = gamma0_32;",
											"\t\t\tgamma1 = gamma1_32;",
											"\t\t\tsigma0 = sigma0_32;",
											"\t\t\tsigma1 = sigma1_32;",
											"\t\t\tmaj = maj_32;",
											"\t\t\tch = ch_32;",
											"\t\t\tK = K_sha2;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\tnumRounds = 80;",
											"\t\t\tbinaryStringMult = 2;",
											"\t\t\tInt = Int_64;",
											"\t\t\tsafeAdd_2 = safeAdd_64_2;",
											"\t\t\tsafeAdd_4 = safeAdd_64_4;",
											"\t\t\tsafeAdd_5 = safeAdd_64_5;",
											"\t\t\tgamma0 = gamma0_64;",
											"\t\t\tgamma1 = gamma1_64;",
											"\t\t\tsigma0 = sigma0_64;",
											"\t\t\tsigma1 = sigma1_64;",
											"\t\t\tmaj = maj_64;",
											"\t\t\tch = ch_64;",
											"\t\t\tK = K_sha512;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\ta = H[0];",
											"\t\tb = H[1];",
											"\t\tc = H[2];",
											"\t\td = H[3];",
											"\t\te = H[4];",
											"\t\tf = H[5];",
											"\t\tg = H[6];",
											"\t\th = H[7];",
											"",
											"\t\tfor (t = 0; t < numRounds; t += 1)",
											"\t\t{",
											"\t\t\tif (t < 16)",
											"\t\t\t{",
											"\t\t\t\toffset = t * binaryStringMult;",
											"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
											"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
											"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
											"\t\t\t\tW[t] = new Int(int1, int2);",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tW[t] = safeAdd_4(",
											"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
											"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
											"\t\t\t\t\t);",
											"\t\t\t}",
											"",
											"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
											"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
											"\t\t\th = g;",
											"\t\t\tg = f;",
											"\t\t\tf = e;",
											"\t\t\te = safeAdd_2(d, T1);",
											"\t\t\td = c;",
											"\t\t\tc = b;",
											"\t\t\tb = a;",
											"\t\t\ta = safeAdd_2(T1, T2);",
											"\t\t}",
											"",
											"\t\tH[0] = safeAdd_2(a, H[0]);",
											"\t\tH[1] = safeAdd_2(b, H[1]);",
											"\t\tH[2] = safeAdd_2(c, H[2]);",
											"\t\tH[3] = safeAdd_2(d, H[3]);",
											"\t\tH[4] = safeAdd_2(e, H[4]);",
											"\t\tH[5] = safeAdd_2(f, H[5]);",
											"\t\tH[6] = safeAdd_2(g, H[6]);",
											"\t\tH[7] = safeAdd_2(h, H[7]);",
											"",
											"\t\treturn H;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-2 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
											"\t *   round",
											"\t * @param {string} variant The desired SHA-2 variant",
											"\t * @param {number} outputLen Unused for this variant",
											"\t * @return {Array<number>} The array of integers representing the SHA-2",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
											"\t{",
											"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
											"",
											"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
											"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 32-bit variant */",
											"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 72 (64 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
											"\t\t\tbinaryStringInc = 16;",
											"\t\t}",
											"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
											"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\t/* 64-bit variant */",
											"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
											"\t\t\t   actually 136 (128 + 8) but the below math fails if",
											"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
											"\t\t\t   \"shorting\" the addition is OK. */",
											"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
											"\t\t\tbinaryStringInc = 32;",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\twhile (remainder.length <= offset)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"\t\t/* Append '1' at the end of the binary string */",
											"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
											"\t\t/* Append length of binary string in the position such that the new",
											"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
											"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
											"\t\ttotalLen = remainderBinLen + processedBinLen;",
											"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
											"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
											"\t\t * use hacky division and round to get access to upper 32-ish bits */",
											"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
											"",
											"\t\tappendedMessageLength = remainder.length;",
											"",
											"\t\t/* This will always be at least 1 full chunk */",
											"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0], H[1], H[2], H[3],",
											"\t\t\t\tH[4], H[5], H[6]",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = H;",
											"\t\t}",
											"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tretVal = [",
											"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
											"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
											"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
											"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
											"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
											"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
											"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
											"\t\t\t\tH[7].highOrder, H[7].lowOrder",
											"\t\t\t];",
											"\t\t}",
											"\t\telse /* This should never be reached */",
											"\t\t{",
											"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * Performs a round of SHA-3 hashing over a block",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>|null} block The binary array representation of the",
											"\t *   block to hash",
											"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
											"\t *   block to hash",
											"\t * @return {Array<Array<Int_64>>} The resulting state value",
											"\t */",
											"\tfunction roundSHA3(block, state)",
											"\t{",
											"\t\tvar round, x, y, B, C = [], D = [];",
											"",
											"\t\tif (null !== block)",
											"\t\t{",
											"\t\t\tfor (x = 0; x < block.length; x+=2)",
											"\t\t\t{",
											"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
											"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
											"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
											"\t\t\t\t);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\tfor (round = 0; round < 24; round += 1)",
											"\t\t{",
											"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
											"\t\t\t   value that triggers the getNewState \"if\" statement",
											"\t\t\t*/",
											"\t\t\tB = getNewState(\"SHA3-\");",
											"",
											"\t\t\t/* Perform theta step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
											"\t\t\t\t\tstate[x][3], state[x][4]);",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
											"\t\t\t}",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform combined ro and pi steps */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
											"\t\t\t\t\t\tstate[x][y],",
											"\t\t\t\t\t\tr_sha3[x][y]",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform chi step */",
											"\t\t\tfor (x = 0; x < 5; x += 1)",
											"\t\t\t{",
											"\t\t\t\tfor (y = 0; y < 5; y += 1)",
											"\t\t\t\t{",
											"\t\t\t\t\tstate[x][y] = xor_64_2(",
											"\t\t\t\t\t\tB[x][y],",
											"\t\t\t\t\t\tnew Int_64(",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
											"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
											"\t\t\t\t\t\t)",
											"\t\t\t\t\t);",
											"\t\t\t\t}",
											"\t\t\t}",
											"",
											"\t\t\t/* Perform iota step */",
											"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
											"\t\t}",
											"",
											"\t\treturn state;",
											"\t}",
											"",
											"\t/**",
											"\t * Finalizes the SHA-3 hash",
											"\t *",
											"\t * @private",
											"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
											"\t *   that still need to be processed",
											"\t * @param {number} remainderBinLen The number of bits in remainder",
											"\t * @param {number} processedBinLen The number of bits already",
											"\t *   processed",
											"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
											"\t * @param {number} blockSize The block size/rate of the variant in bits",
											"\t * @param {number} delimiter The delimiter value for the variant",
											"\t * @param {number} outputLen The output length for the variant in bits",
											"\t * @return {Array<number>} The array of integers representing the SHA-3",
											"\t *   hash of message",
											"\t */",
											"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
											"\t{",
											"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
											"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
											"",
											"",
											"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
											"\t\t   with SHAKE",
											"\t\t*/",
											"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
											"\t\t{",
											"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
											"\t\t\tremainderBinLen -= blockSize;",
											"\t\t}",
											"",
											"\t\tremainder = remainder.slice(i);",
											"\t\tremainderBinLen = remainderBinLen % blockSize;",
											"",
											"\t\t/* Pad out the remainder to a full block */",
											"\t\twhile (remainder.length < binaryStringInc)",
											"\t\t{",
											"\t\t\tremainder.push(0);",
											"\t\t}",
											"",
											"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
											"\t\ti = remainderBinLen >>> 3;",
											"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
											"",
											"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
											"\t\tstate = roundSHA3(remainder, state);",
											"",
											"\t\twhile (retVal.length * 32 < outputLen)",
											"\t\t{",
											"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
											"\t\t\tretVal.push(temp.lowOrder);",
											"\t\t\tif (retVal.length * 32 >= outputLen)",
											"\t\t\t{",
											"\t\t\t\tbreak;",
											"\t\t\t}",
											"\t\t\tretVal.push(temp.highOrder);",
											"\t\t\tstate_offset += 1;",
											"",
											"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
											"\t\t\t{",
											"\t\t\t\troundSHA3(null, state);",
											"\t\t\t}",
											"\t\t}",
											"",
											"\t\treturn retVal;",
											"\t}",
											"",
											"\t/**",
											"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
											"\t * be hashed as the parameter",
											"\t *",
											"\t * @constructor",
											"\t * @this {jsSHA}",
											"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
											"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
											"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
											"\t *   BYTES, or ARRAYBUFFER",
											"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
											"\t *   options Optional values",
											"\t */",
											"\tvar jsSHA = function(variant, inputFormat, options)",
											"\t{",
											"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
											"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
											"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
											"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
											"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
											"",
											"\t\tinputOptions = options || {};",
											"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
											"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
											"",
											"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
											"\t\t{",
											"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
											"\t\t}",
											"",
											"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvariantBlockSize = 512;",
											"\t\t\troundFunc = roundSHA1;",
											"\t\t\tfinalizeFunc = finalizeSHA1;",
											"\t\t\toutputBinLen = 160;",
											"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
											"\t\t}",
											"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\troundFunc = function (block, H) {",
											"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
											"\t\t\t};",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
											"\t\t\t};",
											"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
											"",
											"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 224;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 512;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1024;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t}",
											"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
											"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t{",
											"\t\t\tvar delimiter = 0x06;",
											"",
											"\t\t\troundFunc = roundSHA3;",
											"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
											"\t\t\tbigEndianMod = 1;",
											"",
											"\t\t\tif (\"SHA3-224\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1152;",
											"\t\t\t\toutputBinLen = 224;",
											"",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = 256;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-384\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 832;",
											"\t\t\t\toutputBinLen = 384;",
											"\t\t\t}",
											"\t\t\telse if (\"SHA3-512\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 576;",
											"\t\t\t\toutputBinLen = 512;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE128\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1344;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse if (\"SHAKE256\" === shaVariant)",
											"\t\t\t{",
											"\t\t\t\tvariantBlockSize = 1088;",
											"\t\t\t\toutputBinLen = -1;",
											"\t\t\t\tdelimiter = 0x1F;",
											"\t\t\t\tisSHAKE = true;",
											"\t\t\t}",
											"\t\t\telse",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
											"\t\t\t}",
											"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
											"\t\t\t{",
											"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
											"\t\t\t};",
											"\t\t}",
											"\t\telse",
											"\t\t{",
											"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
											"\t\t}",
											"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"\t\tintermediateState = getNewState(shaVariant);",
											"",
											"\t\t/**",
											"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
											"\t\t * immediately after jsSHA object instantiation",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
											"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
											"\t\t *   or ARRAYBUFFER",
											"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
											"\t\t *   of input format options",
											"\t\t */",
											"\t\tthis.setHMACKey = function(key, inputFormat, options)",
											"\t\t{",
											"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
											"\t\t\t\ti, lastArrayIndex, keyOptions;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"HMAC key already set\");",
											"\t\t\t}",
											"",
											"\t\t\tif (true === updatedCalled)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
											"\t\t\t}",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
											"\t\t\t}",
											"",
											"\t\t\tkeyOptions = options || {};",
											"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
											"",
											"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
											"",
											"\t\t\tconvertRet = keyConverterFunc(key);",
											"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
											"\t\t\tkeyToUse = convertRet[\"value\"];",
											"",
											"\t\t\tblockByteSize = variantBlockSize >>> 3;",
											"",
											"\t\t\t/* These are used multiple times, calculate and store them */",
											"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
											"",
											"\t\t\t/* Figure out what to do with the key based on its size relative to",
											"\t\t\t * the hash's block size */",
											"\t\t\tif (blockByteSize < (keyBinLen / 8))",
											"\t\t\t{",
											"",
											"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
											"\t\t\t\t/* For all variants, the block size is bigger than the output",
											"\t\t\t\t * size so there will never be a useful byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
											"\t\t\t{",
											"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
											"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
											"\t\t\t\t * string */",
											"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
											"\t\t\t\t{",
											"\t\t\t\t\tkeyToUse.push(0);",
											"\t\t\t\t}",
											"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
											"\t\t\t}",
											"",
											"\t\t\t/* Create ipad and opad */",
											"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
											"\t\t\t{",
											"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
											"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
											"\t\t\t}",
											"",
											"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
											"\t\t\tprocessedLen = variantBlockSize;",
											"",
											"\t\t\thmacKeySet = true;",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
											"\t\t * rest for either a future update or getHash call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
											"\t\t */",
											"\t\tthis.update = function(srcString)",
											"\t\t{",
											"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
											"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
											"",
											"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
											"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
											"\t\t\tchunk = convertRet[\"value\"];",
											"",
											"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
											"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
											"\t\t\t{",
											"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
											"\t\t\t\t{",
											"\t\t\t\t\tintermediateState = roundFunc(",
											"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
											"\t\t\t\t\t\tintermediateState",
											"\t\t\t\t\t);",
											"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
											"\t\t\t\t}",
											"\t\t\t}",
											"\t\t\tprocessedLen += updateProcessedLen;",
											"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
											"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
											"\t\t\tupdatedCalled = true;",
											"",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the desired SHA hash of the string specified at instantiation",
											"\t\t * using the specified parameters",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting (B64, HEX,",
											"\t\t *   BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
											"\t\t *   in the format specified.",
											"\t\t */",
											"\t\tthis.getHash = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
											"",
											"\t\t\tif (true === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
											"\t\t\t{",
											"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
											"\t\t\t\t{",
											"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
											"\t\t\t\t}",
											"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
											"\t\t\t}",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\ti = new ArrayBuffer(0);",
											"\t\t\t\t} catch (ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfor (i = 1; i < numRounds; i += 1)",
											"\t\t\t{",
											"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
											"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
											"\t\t\t\t * very last block of finalizedState has data that needs to be",
											"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
											"\t\t\t\t * unneeded bits set to 0.",
											"\t\t\t\t */",
											"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
											"\t\t\t\t{",
											"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
											"\t\t\t\t}",
											"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
											"\t\t\t}",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"",
											"\t\t/**",
											"\t\t * Returns the the HMAC in the specified format using the key given by",
											"\t\t * a previous setHMACKey call.",
											"\t\t *",
											"\t\t * @expose",
											"\t\t * @param {string} format The desired output formatting",
											"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
											"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
											"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
											"\t\t *   formatting options",
											"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
											"\t\t *   format specified.",
											"\t\t */",
											"\t\tthis.getHMAC = function(format, options)",
											"\t\t{",
											"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
											"",
											"\t\t\tif (false === hmacKeySet)",
											"\t\t\t{",
											"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
											"\t\t\t}",
											"",
											"\t\t\toutputOptions = getOutputOpts(options);",
											"",
											"\t\t\t/* Validate the output format selection */",
											"\t\t\tswitch (format)",
											"\t\t\t{",
											"\t\t\tcase \"HEX\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"B64\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"BYTES\":",
											"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tcase \"ARRAYBUFFER\":",
											"\t\t\t\ttry {",
											"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
											"\t\t\t\t} catch(ignore) {",
											"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
											"\t\t\t\t}",
											"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
											"\t\t\t\tbreak;",
											"\t\t\tdefault:",
											"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
											"\t\t\t}",
											"",
											"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
											"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
											"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
											"",
											"\t\t\treturn formatFunc(finalizedState);",
											"\t\t};",
											"\t};",
											"",
											"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
											"\t{",
											"\t\tdefine(function()",
											"\t\t{",
											"\t\t\treturn jsSHA;",
											"\t\t});",
											"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
											"\t{",
											"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
											"\t\t{",
											"\t\t  module[\"exports\"] = jsSHA;",
											"\t\t  exports = jsSHA;",
											"\t\t}",
											"\t\telse {",
											"\t\t\texports = jsSHA;",
											"\t\t}",
											"\t} else { /* Browsers and Web Workers*/",
											"\t\tglobal[\"jsSHA\"] = jsSHA;",
											"\t}",
											"}(X));",
											"",
											"TOTP = function() {",
											"",
											"    var dec2hex = function(s) {",
											"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
											"    };",
											"",
											"    var hex2dec = function(s) {",
											"        return parseInt(s, 16);",
											"    };",
											"",
											"    var leftpad = function(s, l, p) {",
											"        if(l + 1 >= s.length) {",
											"            s = Array(l + 1 - s.length).join(p) + s;",
											"        }",
											"        return s;",
											"    };",
											"",
											"    var base32tohex = function(base32) {",
											"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
											"        var bits = \"\";",
											"        var hex = \"\";",
											"        for(var i = 0; i < base32.length; i++) {",
											"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
											"            bits += leftpad(val.toString(2), 5, '0');",
											"        }",
											"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
											"            var chunk = bits.substr(i, 4);",
											"            hex = hex + parseInt(chunk, 2).toString(16) ;",
											"        }",
											"        return hex;",
											"    };",
											"",
											"    this.getOTP = function(secret) {",
											"        try {",
											"            var key = base32tohex(secret);",
											"            var epoch = Math.round(new Date().getTime() / 1000.0);",
											"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
											"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
											"            shaObj.setHMACKey(key, \"HEX\");",
											"            shaObj.update(time);",
											"            var hmac = shaObj.getHMAC(\"HEX\");",
											"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
											"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
											"            otp = (otp).substr(otp.length - 6, 6);",
											"        } catch (error) {",
											"            throw error;",
											"        }",
											"        return otp;",
											"    };",
											"",
											"}",
											"",
											"var totpObj = new TOTP();",
											"var otp = totpObj.getOTP(\"K6KA6PRLRFWQLSD6\");",
											"",
											"pm.environment.set(\"OTP\", otp);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
								},
								"url": {
									"raw": "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal/lease",
									"protocol": "http",
									"host": [
										"rpe-service-auth-provider-aat",
										"service",
										"core-compute-aat",
										"internal"
									],
									"path": [
										"lease"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bbc80a-def0-470c-bac1-f26032f9653c",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_1\", \"Basic \" +variable);",
											"",
											"pm.test(\"Successful POST request to get BASE64_1\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "praveen.thottempudi@hmcts.net:hmcts2Aldgate",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "https://www.base64encode.org_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "819a0139-a5ce-456b-81a1-968b5ce6d429",
										"exec": [
											"",
											"var responseHTML = cheerio(pm.response.text());",
											"var variable = responseHTML.find('[placeholder=\"Result goes here...\"]').val();",
											"console.log(variable);",
											"pm.globals.set(\"BASE64_2\", \"Basic \" +variable);",
											"",
											"//let response = pm.response.text();",
											"//pm.globals.set(\"BASE64_1\",response.name);",
											"",
											"pm.test(\"Successful POST request to get BASE64_2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//<textarea name=\"output\" placeholder=\"Result goes here...\" data-simple-state=\"result\">cHJhdmVlbi50aG90dGVtcHVkaTpzYW1iYTEyMzRA</textarea>"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "input",
											"value": "xuiaowebapp:63JMI7ELWXPLKTQW",
											"type": "text"
										},
										{
											"key": "charset",
											"value": "UTF-8",
											"type": "text"
										},
										{
											"key": "separator",
											"value": "LF",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://www.base64encode.org/",
									"protocol": "https",
									"host": [
										"www",
										"base64encode",
										"org"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d160f3-a11b-46a3-9d9a-73fb47e6b7bb",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
											"console.log(response.code)",
											"",
											"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{BASE64_1}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile roles manage-user create-user",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.ithc.platform.hmcts.net/oauth2/authorize",
									"protocol": "https",
									"host": [
										"idam-api",
										"ithc",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						},
						{
							"name": "Get SIDAM Authorisation token PartB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "150f27d2-c52a-4742-8843-934729ab6ea0",
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"XUI_IDAM_KEY\",response.access_token);",
											"",
											"",
											"",
											"",
											"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{BASE64_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "xuiaowebapp",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "63JMI7ELWXPLKTQW",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{IDAM_CODE_PARTA}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://xui-ao-webapp-ithc.service.core-compute-ithc.internal/oauth2/callback",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idam-api.ithc.platform.hmcts.net/oauth2/token",
									"protocol": "https",
									"host": [
										"idam-api",
										"ithc",
										"platform",
										"hmcts",
										"net"
									],
									"path": [
										"oauth2",
										"token"
									]
								},
								"description": "Get SIDAM bearer token"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete me I am Duplicate",
			"item": [
				{
					"name": "1_TOKEN",
					"item": [
						{
							"name": "DEMO External Tokens",
							"item": [
								{
									"name": "Super user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b47d21d-0859-4a15-a698-e8572cb2e506",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5zdXBlckBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b668c7b-6c55-4f5e-8909-cd5862911395",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"Super_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Multi user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7de17d53-e45f-4ebe-9480-9349a255a255",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5tdWx0aUBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dce48ede-a4da-4b34-8956-309382398ff6",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"Multi_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0b75f-a4c0-4d80-978b-ac5323019b35",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wdW1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1c72b7d-15b4-456c-b25f-bdb82754bdd4",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PUM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PFM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f98ddca8-7a16-44dc-9e41-8ba172b0bcd2",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wZm1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f4ace01-0826-41f8-ae3f-d9054f44b585",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PFM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PCM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fc519d28-0c4f-486a-9be7-c52f2257e32d",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wY21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b29b43b6-d0ab-47a8-a96b-4780f13ad243",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POM user_XUI",
									"item": [
										{
											"name": "Demo Super Get SIDAM Authorisation token PartA",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1bd63307-bc07-45b1-8037-f8240d900307",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
															"console.log(response.code)",
															"",
															"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														},
														{
															"key": "response_type",
															"value": "code",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid profile roles openid roles profile create-user manage-user",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"authorize"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										},
										{
											"name": "Demo Super Get SIDAM Authorisation token PartB",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9ea31a1-b329-4edc-bf06-a2285e4120fb",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
															"",
															"",
															"",
															"",
															"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic eHVpbW93ZWJhcHA6eUI3MW1uUGV5cFAzSGxjTg==",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "xuimowebapp",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "yB71mnPeypP3HlcN",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{IDAM_CODE_PARTA}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://xui-mo-webapp-demo.service.core-compute-demo.internal/oauth2/callback",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
													"protocol": "https",
													"host": [
														"idam-api",
														"demo",
														"platform",
														"hmcts",
														"net"
													],
													"path": [
														"oauth2",
														"token"
													]
												},
												"description": "Get SIDAM bearer token"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Demo Service Authorization token Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25933bc5-b926-4f80-9bf6-5086d561bdad",
												"exec": [
													"let response = pm.response.text();",
													"pm.globals.set(\"S2S_AUTH_TOKEN\",response);",
													"",
													"pm.test(\"Successful POST request to get S2S_AUTH_TOKEN\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b221df5-063b-4b10-aee2-ac89539e6ebf",
												"exec": [
													"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
													"",
													"/**",
													" * @preserve A JavaScript implementation of the SHA family of hashes, as",
													" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
													" * HMAC implementation as defined in FIPS PUB 198a",
													" *",
													" * Copyright Brian Turek 2008-2017",
													" * Distributed under the BSD License",
													" * See http://caligatio.github.com/jsSHA/ for more information",
													" *",
													" * Several functions taken from Paul Johnston",
													" */",
													"",
													"/*jslint",
													"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
													"*/",
													"",
													" /**",
													"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
													"  * functions that are not needed when a limited number of SHA families are",
													"  * selected",
													"  *",
													"  * @define {number} ORed value of SHA variants to be supported",
													"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
													"  */",
													"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
													"var X={};",
													"",
													"(function (global)",
													"{",
													"\t\"use strict\";",
													"",
													"\t/* Globals */",
													"\tvar TWO_PWR_32 = 4294967296;",
													"",
													"\t/**",
													"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
													"\t *",
													"\t * @private",
													"\t * @constructor",
													"\t * @this {Int_64}",
													"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
													"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
													"\t */",
													"\tfunction Int_64(msint_32, lsint_32)",
													"\t{",
													"\t\tthis.highOrder = msint_32;",
													"\t\tthis.lowOrder = lsint_32;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string to an array of big-endian words",
													"\t *",
													"\t * There is a known bug with an odd number of existing bytes and using a",
													"\t * UTF-16 encoding.  However, this function is used such that the existing",
													"\t * bytes are always a result of a previous UTF-16 str2packed call and",
													"\t * therefore there should never be an odd number of existing bytes",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
													"\t *   use to encode the source string",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
													"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"",
													"\t\tif (\"UTF8\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tcodePntArr = [];",
													"",
													"\t\t\t\tif (0x80 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(codePnt);",
													"\t\t\t\t}",
													"\t\t\t\telse if (0x800 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
													"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
													"\t\t\t\t}",
													"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\ti += 1;",
													"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t\t{",
													"\t\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t\t}",
													"\t\t\t\t\t/* Known bug kicks in here */",
													"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\t\tbyteCnt += 1;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
													"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
													"\t\t\t\t* need LE and not switching endianness due to SHA-3",
													"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
													"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tif (transposeBytes === true)",
													"\t\t\t\t{",
													"\t\t\t\t\tj = codePnt & 0xFF;",
													"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 2;",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a hex string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
													"\t\t\texistingByteLen, shiftModifier;",
													"",
													"\t\tif (0 !== (length % 2))",
													"\t\t{",
													"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 2)",
													"\t\t{",
													"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
													"\t\t\tif (!isNaN(num))",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string of raw bytes to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
													"\t\t\tbyteOffset, shiftModifier;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t{",
													"\t\t\tcodePnt = str.charCodeAt(i);",
													"",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a base-64 string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
													"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
													"",
													"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
													"\t\t}",
													"",
													"\t\tfirstEqual = str.indexOf(\"=\");",
													"\t\tstr = str.replace(/\\=/g, \"\");",
													"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 4)",
													"\t\t{",
													"\t\t\tstrPart = str.substr(i, 4);",
													"\t\t\ttmpInt = 0;",
													"",
													"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
													"\t\t\t{",
													"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
													"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
													"\t\t\t}",
													"",
													"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
													"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 1;",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an ArrayBuffer to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t *   representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\tarrView = new Uint8Array(arr);",
													"",
													"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
													"\t\t{",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a hex string.",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   hexidecimal representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Hexidecimal representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
													"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\t/* The below is more than a byte but it gets taken care of later */",
													"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
													"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
													"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
													"\t\t}",
													"",
													"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a base-64 string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   base-64 representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Base-64 encoded representation of the parameter in",
													"\t *   string form",
													"\t */",
													"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 3)",
													"\t\t{",
													"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
													"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
													"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
													"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
													"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
													"\t\t\tfor (j = 0; j < 4; j += 1)",
													"\t\t\t{",
													"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to raw bytes string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   a raw bytes string representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {string} Raw bytes representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t\tstr += String.fromCharCode(srcByte);",
													"\t\t}",
													"",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to an ArrayBuffer",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   an ArrayBuffer",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
													"\t *   ArrayBuffer",
													"\t */",
													"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
													"\t\tarrView = new Uint8Array(retVal);",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Validate hash list containing output formatting options, ensuring",
													"\t * presence of every option or adding the default value",
													"\t *",
													"\t * @private",
													"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
													"\t *   hash list containing output formatting options",
													"\t */",
													"\tfunction getOutputOpts(options)",
													"\t{",
													"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
													"\t\t\toutputOptions;",
													"\t\toutputOptions = options || {};",
													"",
													"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
													"",
													"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
													"\t\t{",
													"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
													"\t\t}",
													"",
													"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
													"\t\t\t}",
													"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
													"\t\t}",
													"",
													"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
													"\t\t}",
													"",
													"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Function that takes an input format and UTF encoding and returns the",
													"\t * appropriate function used to convert the input.",
													"\t *",
													"\t * @private",
													"\t * @param {string} format The format of the string to be converted",
													"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
													"\t *\tUTF16LE)",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
													"\t *   Array<number>, binLen : number}} Function that will convert an input",
													"\t *   string to a packed int array",
													"\t */",
													"\tfunction getStrConverter(format, utfType, bigEndianMod)",
													"\t{",
													"\t\tvar retVal;",
													"",
													"\t\t/* Validate encoding */",
													"\t\tswitch (utfType)",
													"\t\t{",
													"\t\tcase \"UTF8\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16BE\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16LE\":",
													"\t\t\t/* Fallthrough */",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
													"\t\t}",
													"",
													"\t\t/* Map inputFormat to the appropriate converter */",
													"\t\tswitch (format)",
													"\t\t{",
													"\t\tcase \"HEX\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"TEXT\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"B64\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"BYTES\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"ARRAYBUFFER\":",
													"\t\t\ttry {",
													"\t\t\t\tretVal = new ArrayBuffer(0);",
													"\t\t\t} catch(ignore) {",
													"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t}",
													"\t\t\t/**",
													"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t\t\t *   representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_32(x, n)",
													"\t{",
													"\t\treturn (x << n) | (x >>> (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_64(x, n)",
													"\t{",
													"\t\tif (n > 32)",
													"\t\t{",
													"\t\t\tn = n - 32;",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse if (0 !== n)",
													"\t\t{",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\treturn x;",
													"\t\t}",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_32(x, n)",
													"\t{",
													"\t\treturn (x >>> n) | (x << (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted by n bits",
													"\t */",
													"\tfunction shr_32(x, n)",
													"\t{",
													"\t\treturn x >>> n;",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted by n bits",
													"\t */",
													"\tfunction shr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null;",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\tx.highOrder >>> n,",
													"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t0,",
													"\t\t\t\t\tx.highOrder >>> (n - 32)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Parity function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction parity_32(x, y, z)",
													"\t{",
													"\t\treturn x ^ y ^ z;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (~x & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^",
													"\t\t\t\t(x.highOrder & z.highOrder) ^",
													"\t\t\t\t(y.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
													"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
													"\t\t\t\t(y.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_64(x)",
													"\t{",
													"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
													"\t\t\trotr39 = rotr_64(x, 39);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
													"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_64(x)",
													"\t{",
													"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
													"\t\t\trotr41 = rotr_64(x, 41);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
													"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_64(x)",
													"\t{",
													"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
													"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_64(x)",
													"\t{",
													"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
													"\t\t\tshr6 = shr_64(x, 6);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
													"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b",
													"\t */",
													"\tfunction safeAdd_32_2(a, b)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_32_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @param {number} e The fifth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_32_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
													"\t\t\t\t(e & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument to be added",
													"\t * @param {Int_64} y The second 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of x + y",
													"\t */",
													"\tfunction safeAdd_64_2(x, y)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
													"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_64_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_64_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
													"\t\t\t(e.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
													"\t\t\t(lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
													"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
													"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs two given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_2(a, b)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs five given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @param {Int_64} c Third argument to be XORed",
													"\t * @param {Int_64} d Fourth argument to be XORed",
													"\t * @param {Int_64} e Fifth argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_5(a, b, c, d, e)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Returns a clone of the given SHA3 state",
													"\t *",
													"\t * @private",
													"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
													"\t * @return {Array<Array<Int_64>>} The cloned state",
													"\t */",
													"\tfunction cloneSHA3State(state) {",
													"\t\tvar clone = [], i;",
													"\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t{",
													"\t\t\tclone[i] = state[i].slice();",
													"\t\t}",
													"",
													"\t\treturn clone;",
													"\t}",
													"",
													"\t/**",
													"\t * Gets the state values for the specified SHA variant",
													"\t *",
													"\t * @param {string} variant The SHA variant",
													"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
													"\t */",
													"\tfunction getNewState(variant)",
													"\t{",
													"\t\tvar retVal = [], H_trunc, H_full, i;",
													"",
													"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tH_trunc = [",
													"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
													"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
													"\t\t\t];",
													"\t\t\tH_full = [",
													"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
													"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
													"\t\t\t];",
													"",
													"\t\t\tswitch (variant)",
													"\t\t\t{",
													"\t\t\tcase \"SHA-224\":",
													"\t\t\t\tretVal = H_trunc;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-256\":",
													"\t\t\t\tretVal = H_full;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-384\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
													"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
													"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
													"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
													"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
													"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
													"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
													"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-512\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
													"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
													"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
													"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
													"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
													"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
													"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
													"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t\t{",
													"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
													"\t\t\t}",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"No SHA variants supported\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-1 hashing over a 512-byte block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @return {Array<number>} The resulting H values",
													"\t */",
													"\tfunction roundSHA1(block, H)",
													"\t{",
													"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
													"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"",
													"\t\tfor (t = 0; t < 80; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\tW[t] = block[t];",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
													"\t\t\t}",
													"",
													"\t\t\tif (t < 20)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 40)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 60)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
													"\t\t\t} else {",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
													"\t\t\t}",
													"",
													"\t\t\te = d;",
													"\t\t\td = c;",
													"\t\t\tc = rotl(b, 30);",
													"\t\t\tb = a;",
													"\t\t\ta = T;",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-1 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-1",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, totalLen;",
													"",
													"\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t   \"shorting\" the addition is OK. */",
													"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
													"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
													"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
													"\t\t * a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
													"\t\t{",
													"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
													"\t\t}",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/* Put this here so the K arrays aren't put on the stack for every block */",
													"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
													"\tif ((6 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\tK_sha2 = [",
													"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
													"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
													"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
													"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
													"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
													"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
													"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
													"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
													"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
													"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
													"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
													"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
													"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
													"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
													"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
													"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
													"\t\t];",
													"",
													"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
													"\t\t{",
													"\t\t\t K_sha512 = [",
													"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
													"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
													"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
													"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
													"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
													"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
													"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
													"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
													"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
													"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
													"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
													"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
													"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
													"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
													"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
													"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
													"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
													"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
													"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
													"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
													"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
													"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
													"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
													"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
													"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
													"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
													"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
													"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
													"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
													"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
													"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
													"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
													"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
													"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
													"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
													"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
													"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
													"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
													"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
													"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
													"\t\t\t];",
													"\t\t}",
													"\t}",
													"\tif ((8 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\trc_sha3 = [",
													"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
													"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
													"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
													"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
													"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
													"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
													"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
													"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
													"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
													"\t\t];",
													"",
													"\t\tr_sha3 = [",
													"\t\t\t[ 0, 36,  3, 41, 18],",
													"\t\t\t[ 1, 44, 10, 45,  2],",
													"\t\t\t[62,  6, 43, 15, 61],",
													"\t\t\t[28, 55, 25, 21, 56],",
													"\t\t\t[27, 20, 39,  8, 14]",
													"\t\t];",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-2 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @return {Array<number|Int_64>} The resulting H values",
													"\t */",
													"\tfunction roundSHA2(block, H, variant)",
													"\t{",
													"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
													"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
													"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
													"",
													"\t\t/* Set up the various function handles and variable for the specific",
													"\t\t * variant */",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\tnumRounds = 64;",
													"\t\t\tbinaryStringMult = 1;",
													"\t\t\tInt = Number;",
													"\t\t\tsafeAdd_2 = safeAdd_32_2;",
													"\t\t\tsafeAdd_4 = safeAdd_32_4;",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"\t\t\tgamma0 = gamma0_32;",
													"\t\t\tgamma1 = gamma1_32;",
													"\t\t\tsigma0 = sigma0_32;",
													"\t\t\tsigma1 = sigma1_32;",
													"\t\t\tmaj = maj_32;",
													"\t\t\tch = ch_32;",
													"\t\t\tK = K_sha2;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\tnumRounds = 80;",
													"\t\t\tbinaryStringMult = 2;",
													"\t\t\tInt = Int_64;",
													"\t\t\tsafeAdd_2 = safeAdd_64_2;",
													"\t\t\tsafeAdd_4 = safeAdd_64_4;",
													"\t\t\tsafeAdd_5 = safeAdd_64_5;",
													"\t\t\tgamma0 = gamma0_64;",
													"\t\t\tgamma1 = gamma1_64;",
													"\t\t\tsigma0 = sigma0_64;",
													"\t\t\tsigma1 = sigma1_64;",
													"\t\t\tmaj = maj_64;",
													"\t\t\tch = ch_64;",
													"\t\t\tK = K_sha512;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"\t\tf = H[5];",
													"\t\tg = H[6];",
													"\t\th = H[7];",
													"",
													"\t\tfor (t = 0; t < numRounds; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\toffset = t * binaryStringMult;",
													"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
													"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
													"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
													"\t\t\t\tW[t] = new Int(int1, int2);",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = safeAdd_4(",
													"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
													"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
													"\t\t\t\t\t);",
													"\t\t\t}",
													"",
													"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
													"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
													"\t\t\th = g;",
													"\t\t\tg = f;",
													"\t\t\tf = e;",
													"\t\t\te = safeAdd_2(d, T1);",
													"\t\t\td = c;",
													"\t\t\tc = b;",
													"\t\t\tb = a;",
													"\t\t\ta = safeAdd_2(T1, T2);",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"\t\tH[5] = safeAdd_2(f, H[5]);",
													"\t\tH[6] = safeAdd_2(g, H[6]);",
													"\t\tH[7] = safeAdd_2(h, H[7]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-2 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-2",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
													"",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\t\tbinaryStringInc = 16;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 136 (128 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
													"\t\t\tbinaryStringInc = 32;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
													"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0], H[1], H[2], H[3],",
													"\t\t\t\tH[4], H[5], H[6]",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = H;",
													"\t\t}",
													"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
													"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
													"\t\t\t\tH[7].highOrder, H[7].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse /* This should never be reached */",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-3 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>|null} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
													"\t *   block to hash",
													"\t * @return {Array<Array<Int_64>>} The resulting state value",
													"\t */",
													"\tfunction roundSHA3(block, state)",
													"\t{",
													"\t\tvar round, x, y, B, C = [], D = [];",
													"",
													"\t\tif (null !== block)",
													"\t\t{",
													"\t\t\tfor (x = 0; x < block.length; x+=2)",
													"\t\t\t{",
													"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
													"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
													"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
													"\t\t\t\t);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\tfor (round = 0; round < 24; round += 1)",
													"\t\t{",
													"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
													"\t\t\t   value that triggers the getNewState \"if\" statement",
													"\t\t\t*/",
													"\t\t\tB = getNewState(\"SHA3-\");",
													"",
													"\t\t\t/* Perform theta step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
													"\t\t\t\t\tstate[x][3], state[x][4]);",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform combined ro and pi steps */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
													"\t\t\t\t\t\tstate[x][y],",
													"\t\t\t\t\t\tr_sha3[x][y]",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform chi step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(",
													"\t\t\t\t\t\tB[x][y],",
													"\t\t\t\t\t\tnew Int_64(",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
													"\t\t\t\t\t\t)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform iota step */",
													"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
													"\t\t}",
													"",
													"\t\treturn state;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-3 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
													"\t * @param {number} blockSize The block size/rate of the variant in bits",
													"\t * @param {number} delimiter The delimiter value for the variant",
													"\t * @param {number} outputLen The output length for the variant in bits",
													"\t * @return {Array<number>} The array of integers representing the SHA-3",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
													"\t{",
													"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
													"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
													"",
													"",
													"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
													"\t\t   with SHAKE",
													"\t\t*/",
													"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
													"\t\t\tremainderBinLen -= blockSize;",
													"\t\t}",
													"",
													"\t\tremainder = remainder.slice(i);",
													"\t\tremainderBinLen = remainderBinLen % blockSize;",
													"",
													"\t\t/* Pad out the remainder to a full block */",
													"\t\twhile (remainder.length < binaryStringInc)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"",
													"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
													"\t\ti = remainderBinLen >>> 3;",
													"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
													"",
													"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
													"\t\tstate = roundSHA3(remainder, state);",
													"",
													"\t\twhile (retVal.length * 32 < outputLen)",
													"\t\t{",
													"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
													"\t\t\tretVal.push(temp.lowOrder);",
													"\t\t\tif (retVal.length * 32 >= outputLen)",
													"\t\t\t{",
													"\t\t\t\tbreak;",
													"\t\t\t}",
													"\t\t\tretVal.push(temp.highOrder);",
													"\t\t\tstate_offset += 1;",
													"",
													"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
													"\t\t\t{",
													"\t\t\t\troundSHA3(null, state);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
													"\t * be hashed as the parameter",
													"\t *",
													"\t * @constructor",
													"\t * @this {jsSHA}",
													"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
													"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
													"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
													"\t *   BYTES, or ARRAYBUFFER",
													"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
													"\t *   options Optional values",
													"\t */",
													"\tvar jsSHA = function(variant, inputFormat, options)",
													"\t{",
													"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
													"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
													"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
													"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
													"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
													"",
													"\t\tinputOptions = options || {};",
													"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
													"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
													"",
													"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
													"\t\t{",
													"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvariantBlockSize = 512;",
													"\t\t\troundFunc = roundSHA1;",
													"\t\t\tfinalizeFunc = finalizeSHA1;",
													"\t\t\toutputBinLen = 160;",
													"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
													"\t\t}",
													"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\troundFunc = function (block, H) {",
													"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
													"\t\t\t};",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
													"\t\t\t};",
													"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
													"",
													"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 224;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvar delimiter = 0x06;",
													"",
													"\t\t\troundFunc = roundSHA3;",
													"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
													"\t\t\tbigEndianMod = 1;",
													"",
													"\t\t\tif (\"SHA3-224\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1152;",
													"\t\t\t\toutputBinLen = 224;",
													"",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-384\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 832;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-512\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 576;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE128\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1344;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
													"\t\t\t};",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
													"\t\t}",
													"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"\t\tintermediateState = getNewState(shaVariant);",
													"",
													"\t\t/**",
													"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
													"\t\t * immediately after jsSHA object instantiation",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
													"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
													"\t\t *   or ARRAYBUFFER",
													"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
													"\t\t *   of input format options",
													"\t\t */",
													"\t\tthis.setHMACKey = function(key, inputFormat, options)",
													"\t\t{",
													"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
													"\t\t\t\ti, lastArrayIndex, keyOptions;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"HMAC key already set\");",
													"\t\t\t}",
													"",
													"\t\t\tif (true === updatedCalled)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
													"\t\t\t}",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
													"\t\t\t}",
													"",
													"\t\t\tkeyOptions = options || {};",
													"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
													"",
													"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"",
													"\t\t\tconvertRet = keyConverterFunc(key);",
													"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
													"\t\t\tkeyToUse = convertRet[\"value\"];",
													"",
													"\t\t\tblockByteSize = variantBlockSize >>> 3;",
													"",
													"\t\t\t/* These are used multiple times, calculate and store them */",
													"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
													"",
													"\t\t\t/* Figure out what to do with the key based on its size relative to",
													"\t\t\t * the hash's block size */",
													"\t\t\tif (blockByteSize < (keyBinLen / 8))",
													"\t\t\t{",
													"",
													"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
													"\t\t\t\t/* For all variants, the block size is bigger than the output",
													"\t\t\t\t * size so there will never be a useful byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
													"\t\t\t{",
													"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
													"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"",
													"\t\t\t/* Create ipad and opad */",
													"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
													"\t\t\t{",
													"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
													"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
													"\t\t\t}",
													"",
													"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
													"\t\t\tprocessedLen = variantBlockSize;",
													"",
													"\t\t\thmacKeySet = true;",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
													"\t\t * rest for either a future update or getHash call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
													"\t\t */",
													"\t\tthis.update = function(srcString)",
													"\t\t{",
													"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
													"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
													"",
													"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
													"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
													"\t\t\tchunk = convertRet[\"value\"];",
													"",
													"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
													"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
													"\t\t\t{",
													"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\tintermediateState = roundFunc(",
													"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
													"\t\t\t\t\t\tintermediateState",
													"\t\t\t\t\t);",
													"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t\tprocessedLen += updateProcessedLen;",
													"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
													"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
													"\t\t\tupdatedCalled = true;",
													"",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the desired SHA hash of the string specified at instantiation",
													"\t\t * using the specified parameters",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting (B64, HEX,",
													"\t\t *   BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
													"\t\t *   in the format specified.",
													"\t\t */",
													"\t\tthis.getHash = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
													"\t\t\t\t{",
													"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
													"\t\t\t\t}",
													"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
													"\t\t\t}",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\ti = new ArrayBuffer(0);",
													"\t\t\t\t} catch (ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfor (i = 1; i < numRounds; i += 1)",
													"\t\t\t{",
													"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
													"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
													"\t\t\t\t * very last block of finalizedState has data that needs to be",
													"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
													"\t\t\t\t * unneeded bits set to 0.",
													"\t\t\t\t */",
													"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
													"\t\t\t\t{",
													"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
													"\t\t\t\t}",
													"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
													"\t\t\t}",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the the HMAC in the specified format using the key given by",
													"\t\t * a previous setHMACKey call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting",
													"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
													"\t\t *   formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
													"\t\t *   format specified.",
													"\t\t */",
													"\t\tthis.getHMAC = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
													"",
													"\t\t\tif (false === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
													"\t\t\t\t} catch(ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
													"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"\t};",
													"",
													"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
													"\t{",
													"\t\tdefine(function()",
													"\t\t{",
													"\t\t\treturn jsSHA;",
													"\t\t});",
													"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
													"\t{",
													"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
													"\t\t{",
													"\t\t  module[\"exports\"] = jsSHA;",
													"\t\t  exports = jsSHA;",
													"\t\t}",
													"\t\telse {",
													"\t\t\texports = jsSHA;",
													"\t\t}",
													"\t} else { /* Browsers and Web Workers*/",
													"\t\tglobal[\"jsSHA\"] = jsSHA;",
													"\t}",
													"}(X));",
													"",
													"TOTP = function() {",
													"",
													"    var dec2hex = function(s) {",
													"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
													"    };",
													"",
													"    var hex2dec = function(s) {",
													"        return parseInt(s, 16);",
													"    };",
													"",
													"    var leftpad = function(s, l, p) {",
													"        if(l + 1 >= s.length) {",
													"            s = Array(l + 1 - s.length).join(p) + s;",
													"        }",
													"        return s;",
													"    };",
													"",
													"    var base32tohex = function(base32) {",
													"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
													"        var bits = \"\";",
													"        var hex = \"\";",
													"        for(var i = 0; i < base32.length; i++) {",
													"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
													"            bits += leftpad(val.toString(2), 5, '0');",
													"        }",
													"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
													"            var chunk = bits.substr(i, 4);",
													"            hex = hex + parseInt(chunk, 2).toString(16) ;",
													"        }",
													"        return hex;",
													"    };",
													"",
													"    this.getOTP = function(secret) {",
													"        try {",
													"            var key = base32tohex(secret);",
													"            var epoch = Math.round(new Date().getTime() / 1000.0);",
													"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
													"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
													"            shaObj.setHMACKey(key, \"HEX\");",
													"            shaObj.update(time);",
													"            var hmac = shaObj.getHMAC(\"HEX\");",
													"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
													"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
													"            otp = (otp).substr(otp.length - 6, 6);",
													"        } catch (error) {",
													"            throw error;",
													"        }",
													"        return otp;",
													"    };",
													"",
													"}",
													"",
													"var totpObj = new TOTP();",
													"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
													"",
													"pm.environment.set(\"OTP\", otp);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
										},
										"url": {
											"raw": "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal/lease",
											"protocol": "http",
											"host": [
												"rpe-service-auth-provider-demo",
												"service",
												"core-compute-demo",
												"internal"
											],
											"path": [
												"lease"
											]
										}
									},
									"response": []
								},
								{
									"name": "AuthorizationToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e0ac615-a34c-4819-97e0-b10c7360585a",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_HTTPS_PROTO}}://{{IDAM_DOMAIN}}/o/token?grant_type=password&username=mallikarjun.puttana@hmcts.net&password=Testing1234&client_id=rd-professional-api&client_secret=cc5f2a6-9690-11e9-bc42-526af7764f64&redirect_uri=https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect&scope=openid profile roles manage-user create-user search-user",
											"protocol": "{{API_HTTPS_PROTO}}",
											"host": [
												"{{IDAM_DOMAIN}}"
											],
											"path": [
												"o",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "mallikarjun.puttana@hmcts.net"
												},
												{
													"key": "password",
													"value": "Testing1234"
												},
												{
													"key": "client_id",
													"value": "rd-professional-api"
												},
												{
													"key": "client_secret",
													"value": "cc5f2a6-9690-11e9-bc42-526af7764f64"
												},
												{
													"key": "redirect_uri",
													"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect"
												},
												{
													"key": "scope",
													"value": "openid profile roles manage-user create-user search-user"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Internal",
					"item": [
						{
							"name": "Tokens",
							"item": [
								{
									"name": "Get Demo Service Authorization token Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0eeca103-e7a4-4321-860b-ede21a26beba",
												"exec": [
													"let response = pm.response.text();",
													"pm.globals.set(\"S2S_AUTH_TOKEN\",response);",
													"",
													"pm.test(\"Successful POST request to get S2S_AUTH_TOKEN\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97e72c87-1a29-4263-bf08-543b5e33a7d5",
												"exec": [
													"//Article about TOTP on my blog https://stapp.space/generate-totp-in-postman/",
													"",
													"/**",
													" * @preserve A JavaScript implementation of the SHA family of hashes, as",
													" * defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding",
													" * HMAC implementation as defined in FIPS PUB 198a",
													" *",
													" * Copyright Brian Turek 2008-2017",
													" * Distributed under the BSD License",
													" * See http://caligatio.github.com/jsSHA/ for more information",
													" *",
													" * Several functions taken from Paul Johnston",
													" */",
													"",
													"/*jslint",
													"\tbitwise: true, multivar: true, for: true, this: true, sub: true, esversion: 3",
													"*/",
													"",
													" /**",
													"  * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of",
													"  * functions that are not needed when a limited number of SHA families are",
													"  * selected",
													"  *",
													"  * @define {number} ORed value of SHA variants to be supported",
													"  *   1 = SHA-1, 2 = SHA-224/SHA-256, 4 = SHA-384/SHA-512, 8 = SHA3",
													"  */",
													"var SUPPORTED_ALGS = 8 | 4 | 2 | 1;",
													"var X={};",
													"",
													"(function (global)",
													"{",
													"\t\"use strict\";",
													"",
													"\t/* Globals */",
													"\tvar TWO_PWR_32 = 4294967296;",
													"",
													"\t/**",
													"\t * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number",
													"\t *",
													"\t * @private",
													"\t * @constructor",
													"\t * @this {Int_64}",
													"\t * @param {number} msint_32 The most significant 32-bits of a 64-bit number",
													"\t * @param {number} lsint_32 The least significant 32-bits of a 64-bit number",
													"\t */",
													"\tfunction Int_64(msint_32, lsint_32)",
													"\t{",
													"\t\tthis.highOrder = msint_32;",
													"\t\tthis.lowOrder = lsint_32;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string to an array of big-endian words",
													"\t *",
													"\t * There is a known bug with an odd number of existing bytes and using a",
													"\t * UTF-16 encoding.  However, this function is used such that the existing",
													"\t * bytes are always a result of a previous UTF-16 str2packed call and",
													"\t * therefore there should never be an odd number of existing bytes",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to",
													"\t *   use to encode the source string",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, codePntArr, byteCnt = 0, i, j, existingByteLen,",
													"\t\t\tintOffset, byteOffset, shiftModifier, transposeBytes;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"",
													"\t\tif (\"UTF8\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tcodePntArr = [];",
													"",
													"\t\t\t\tif (0x80 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(codePnt);",
													"\t\t\t\t}",
													"\t\t\t\telse if (0x800 > codePnt)",
													"\t\t\t\t{",
													"\t\t\t\t\tcodePntArr.push(0xC0 | (codePnt >>> 6));",
													"\t\t\t\t\tcodePntArr.push(0x80 | (codePnt & 0x3F));",
													"\t\t\t\t}",
													"\t\t\t\telse if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xe0 | (codePnt >>> 12),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\ti += 1;",
													"\t\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));",
													"\t\t\t\t\tcodePntArr.push(",
													"\t\t\t\t\t\t0xf0 | (codePnt >>> 18),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),",
													"\t\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),",
													"\t\t\t\t\t\t0x80 | (codePnt & 0x3f)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tfor (j = 0; j < codePntArr.length; j += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t\t{",
													"\t\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t\t}",
													"\t\t\t\t\t/* Known bug kicks in here */",
													"\t\t\t\t\tpacked[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\t\tbyteCnt += 1;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if ((\"UTF16BE\" === utfType) || \"UTF16LE\" === utfType)",
													"\t\t{",
													"\t\t\tshiftModifier = (bigEndianMod === -1) ? 2 : 0;",
													"\t\t\t/* Internally strings are UTF-16BE so transpose bytes under two conditions:",
													"\t\t\t\t* need LE and not switching endianness due to SHA-3",
													"\t\t\t\t* need BE and switching endianness due to SHA-3 */",
													"\t\t\ttransposeBytes = ((\"UTF16LE\" === utfType) && (bigEndianMod !== 1)) || ((\"UTF16LE\" !== utfType) && (bigEndianMod === 1));",
													"\t\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t\t{",
													"\t\t\t\tcodePnt = str.charCodeAt(i);",
													"\t\t\t\tif (transposeBytes === true)",
													"\t\t\t\t{",
													"\t\t\t\t\tj = codePnt & 0xFF;",
													"\t\t\t\t\tcodePnt = (j << 8) | (codePnt >>> 8);",
													"\t\t\t\t}",
													"",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 2;",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a hex string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction hex2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, length = str.length, i, num, intOffset, byteOffset,",
													"\t\t\texistingByteLen, shiftModifier;",
													"",
													"\t\tif (0 !== (length % 2))",
													"\t\t{",
													"\t\t\tthrow new Error(\"String of HEX type must be in byte increments\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 2)",
													"\t\t{",
													"\t\t\tnum = parseInt(str.substr(i, 2), 16);",
													"\t\t\tif (!isNaN(num))",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = (i >>> 1) + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= num  << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"String of HEX type contains invalid characters\");",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : length * 4 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a string of raw bytes to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, codePnt, i, existingByteLen, intOffset,",
													"\t\t\tbyteOffset, shiftModifier;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 1)",
													"\t\t{",
													"\t\t\tcodePnt = str.charCodeAt(i);",
													"",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : str.length * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert a base-64 string to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {string} str String to be converted to binary representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction b642packed(str, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, byteCnt = 0, index, i, j, tmpInt, strPart, firstEqual,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",",
													"\t\t\texistingByteLen, intOffset, byteOffset, shiftModifier;",
													"",
													"\t\tif (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid character in base-64 string\");",
													"\t\t}",
													"",
													"\t\tfirstEqual = str.indexOf(\"=\");",
													"\t\tstr = str.replace(/\\=/g, \"\");",
													"\t\tif ((-1 !== firstEqual) && (firstEqual < str.length))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid '=' found in base-64 string\");",
													"\t\t}",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < str.length; i += 4)",
													"\t\t{",
													"\t\t\tstrPart = str.substr(i, 4);",
													"\t\t\ttmpInt = 0;",
													"",
													"\t\t\tfor (j = 0; j < strPart.length; j += 1)",
													"\t\t\t{",
													"\t\t\t\tindex = b64Tab.indexOf(strPart[j]);",
													"\t\t\t\ttmpInt |= index << (18 - (6 * j));",
													"\t\t\t}",
													"",
													"\t\t\tfor (j = 0; j < strPart.length - 1; j += 1)",
													"\t\t\t{",
													"\t\t\t\tbyteOffset = byteCnt + existingByteLen;",
													"\t\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\t\twhile (packed.length <= intOffset)",
													"\t\t\t\t{",
													"\t\t\t\t\tpacked.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tpacked[intOffset] |= ((tmpInt >>> (16 - (j * 8))) & 0xFF) <<",
													"\t\t\t\t\t(8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t\t\tbyteCnt += 1;",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : byteCnt * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an ArrayBuffer to an array of big-endian words",
													"\t *",
													"\t * @private",
													"\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t *   representation",
													"\t * @param {Array<number>} existingPacked A packed int array of bytes to",
													"\t *   append the results to",
													"\t * @param {number} existingPackedLen The number of bits in the existingPacked",
													"\t *   array",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t *   length of \"value\"",
													"\t */",
													"\tfunction arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod)",
													"\t{",
													"\t\tvar packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;",
													"",
													"\t\tpacked = existingPacked || [0];",
													"\t\texistingPackedLen = existingPackedLen || 0;",
													"\t\texistingByteLen = existingPackedLen >>> 3;",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"\t\tarrView = new Uint8Array(arr);",
													"",
													"\t\tfor (i = 0; i < arr.byteLength; i += 1)",
													"\t\t{",
													"\t\t\tbyteOffset = i + existingByteLen;",
													"\t\t\tintOffset = byteOffset >>> 2;",
													"\t\t\tif (packed.length <= intOffset)",
													"\t\t\t{",
													"\t\t\t\tpacked.push(0);",
													"\t\t\t}",
													"\t\t\tpacked[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));",
													"\t\t}",
													"",
													"\t\treturn {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen};",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a hex string.",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   hexidecimal representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Hexidecimal representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2hex(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar hex_tab = \"0123456789abcdef\", str = \"\",",
													"\t\t\tlength = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\t/* The below is more than a byte but it gets taken care of later */",
													"\t\t\tsrcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));",
													"\t\t\tstr += hex_tab.charAt((srcByte >>> 4) & 0xF) +",
													"\t\t\t\thex_tab.charAt(srcByte & 0xF);",
													"\t\t}",
													"",
													"\t\treturn (formatOpts[\"outputUpper\"]) ? str.toUpperCase() : str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to a base-64 string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   base-64 representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list",
													"\t *   containing validated output formatting options",
													"\t * @return {string} Base-64 encoded representation of the parameter in",
													"\t *   string form",
													"\t */",
													"\tfunction packed2b64(packed, outputLength, bigEndianMod, formatOpts)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, j, triplet, int1, int2, shiftModifier,",
													"\t\t\tb64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 3)",
													"\t\t{",
													"\t\t\tint1 = ((i + 1) < length) ? packed[(i + 1) >>> 2] : 0;",
													"\t\t\tint2 = ((i + 2) < length) ? packed[(i + 2) >>> 2] : 0;",
													"\t\t\ttriplet = (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF) << 16) |",
													"\t\t\t\t(((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xFF) << 8) |",
													"\t\t\t\t((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xFF);",
													"\t\t\tfor (j = 0; j < 4; j += 1)",
													"\t\t\t{",
													"\t\t\t\tif (i * 8 + j * 6 <= outputLength)",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);",
													"\t\t\t\t}",
													"\t\t\t\telse",
													"\t\t\t\t{",
													"\t\t\t\t\tstr += formatOpts[\"b64Pad\"];",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t}",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to raw bytes string",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   a raw bytes string representation",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {string} Raw bytes representation of the parameter in string",
													"\t *   form",
													"\t */",
													"\tfunction packed2bytes(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar str = \"\", length = outputLength / 8, i, srcByte, shiftModifier;",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tsrcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t\tstr += String.fromCharCode(srcByte);",
													"\t\t}",
													"",
													"\t\treturn str;",
													"\t}",
													"",
													"\t/**",
													"\t * Convert an array of big-endian words to an ArrayBuffer",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} packed Array of integers to be converted to",
													"\t *   an ArrayBuffer",
													"\t * @param {number} outputLength Length of output in bits",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {ArrayBuffer} Raw bytes representation of the parameter in an",
													"\t *   ArrayBuffer",
													"\t */",
													"\tfunction packed2arraybuffer(packed, outputLength, bigEndianMod)",
													"\t{",
													"\t\tvar length = outputLength / 8, i, retVal = new ArrayBuffer(length), shiftModifier, arrView;",
													"\t\tarrView = new Uint8Array(retVal);",
													"",
													"\t\tshiftModifier = (bigEndianMod === -1) ? 3 : 0;",
													"",
													"\t\tfor (i = 0; i < length; i += 1)",
													"\t\t{",
													"\t\t\tarrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xFF;",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Validate hash list containing output formatting options, ensuring",
													"\t * presence of every option or adding the default value",
													"\t *",
													"\t * @private",
													"\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t * @return {{outputUpper : boolean, b64Pad : string, shakeLen : number}} Validated",
													"\t *   hash list containing output formatting options",
													"\t */",
													"\tfunction getOutputOpts(options)",
													"\t{",
													"\t\tvar retVal = {\"outputUpper\" : false, \"b64Pad\" : \"=\", \"shakeLen\" : -1},",
													"\t\t\toutputOptions;",
													"\t\toutputOptions = options || {};",
													"",
													"\t\tretVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;",
													"",
													"\t\tif (true === outputOptions.hasOwnProperty(\"b64Pad\"))",
													"\t\t{",
													"\t\t\tretVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];",
													"\t\t}",
													"",
													"\t\tif ((true === outputOptions.hasOwnProperty(\"shakeLen\")) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tif (outputOptions[\"shakeLen\"] % 8 !== 0)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"shakeLen must be a multiple of 8\");",
													"\t\t\t}",
													"\t\t\tretVal[\"shakeLen\"] = outputOptions[\"shakeLen\"];",
													"\t\t}",
													"",
													"\t\tif (\"boolean\" !== typeof(retVal[\"outputUpper\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid outputUpper formatting option\");",
													"\t\t}",
													"",
													"\t\tif (\"string\" !== typeof(retVal[\"b64Pad\"]))",
													"\t\t{",
													"\t\t\tthrow new Error(\"Invalid b64Pad formatting option\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Function that takes an input format and UTF encoding and returns the",
													"\t * appropriate function used to convert the input.",
													"\t *",
													"\t * @private",
													"\t * @param {string} format The format of the string to be converted",
													"\t * @param {string} utfType The string encoding to use (UTF8, UTF16BE,",
													"\t *\tUTF16LE)",
													"\t * @param {number} bigEndianMod Modifier for whether hash function is",
													"\t *   big or small endian",
													"\t * @return {function((string|ArrayBuffer), Array<number>=, number=): {value :",
													"\t *   Array<number>, binLen : number}} Function that will convert an input",
													"\t *   string to a packed int array",
													"\t */",
													"\tfunction getStrConverter(format, utfType, bigEndianMod)",
													"\t{",
													"\t\tvar retVal;",
													"",
													"\t\t/* Validate encoding */",
													"\t\tswitch (utfType)",
													"\t\t{",
													"\t\tcase \"UTF8\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16BE\":",
													"\t\t\t/* Fallthrough */",
													"\t\tcase \"UTF16LE\":",
													"\t\t\t/* Fallthrough */",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");",
													"\t\t}",
													"",
													"\t\t/* Map inputFormat to the appropriate converter */",
													"\t\tswitch (format)",
													"\t\t{",
													"\t\tcase \"HEX\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return hex2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"TEXT\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\treturn str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"B64\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return b642packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"BYTES\":",
													"\t\t\t/**",
													"\t\t\t * @param {string} str String of raw bytes to be converted to binary representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(str, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tcase \"ARRAYBUFFER\":",
													"\t\t\ttry {",
													"\t\t\t\tretVal = new ArrayBuffer(0);",
													"\t\t\t} catch(ignore) {",
													"\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t}",
													"\t\t\t/**",
													"\t\t\t * @param {ArrayBuffer} arr ArrayBuffer to be converted to binary",
													"\t\t\t *   representation",
													"\t\t\t * @param {Array<number>} existingBin A packed int array of bytes to",
													"\t\t\t *   append the results to",
													"\t\t\t * @param {number} existingBinLen The number of bits in the existingBin",
													"\t\t\t *   array",
													"\t\t\t * @return {{value : Array<number>, binLen : number}} Hash list where",
													"\t\t\t *   \"value\" contains the output number array and \"binLen\" is the binary",
													"\t\t\t *   length of \"value\"",
													"\t\t\t */",
													"\t\t\tretVal = function(arr, existingBin, existingBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t   return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);",
													"\t\t\t\t};",
													"\t\t\tbreak;",
													"\t\tdefault:",
													"\t\t\tthrow new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_32(x, n)",
													"\t{",
													"\t\treturn (x << n) | (x >>> (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate left",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotl_64(x, n)",
													"\t{",
													"\t\tif (n > 32)",
													"\t\t{",
													"\t\t\tn = n - 32;",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n),",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse if (0 !== n)",
													"\t\t{",
													"\t\t\treturn new Int_64(",
													"\t\t\t\tx.highOrder << n | x.lowOrder >>> (32 - n),",
													"\t\t\t\tx.lowOrder << n | x.highOrder >>> (32 - n)",
													"\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\treturn x;",
													"\t\t}",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_32(x, n)",
													"\t{",
													"\t\treturn (x >>> n) | (x << (32 - n));",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of circular rotate right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted circularly by n bits",
													"\t */",
													"\tfunction rotr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null, tmp = new Int_64(x.highOrder, x.lowOrder);",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.highOrder >>> n) | ((tmp.lowOrder << (32 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.lowOrder >>> n) | ((tmp.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t(tmp.lowOrder >>> (n - 32)) | ((tmp.highOrder << (64 - n)) & 0xFFFFFFFF),",
													"\t\t\t\t\t(tmp.highOrder >>> (n - 32)) | ((tmp.lowOrder << (64 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {number} The x shifted by n bits",
													"\t */",
													"\tfunction shr_32(x, n)",
													"\t{",
													"\t\treturn x >>> n;",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of shift right",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @param {number} n The number of bits to shift",
													"\t * @return {Int_64} The x shifted by n bits",
													"\t */",
													"\tfunction shr_64(x, n)",
													"\t{",
													"\t\tvar retVal = null;",
													"",
													"\t\tif (32 >= n)",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\tx.highOrder >>> n,",
													"\t\t\t\t\tx.lowOrder >>> n | ((x.highOrder << (32 - n)) & 0xFFFFFFFF)",
													"\t\t\t\t);",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tretVal = new Int_64(",
													"\t\t\t\t\t0,",
													"\t\t\t\t\tx.highOrder >>> (n - 32)",
													"\t\t\t\t);",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Parity function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction parity_32(x, y, z)",
													"\t{",
													"\t\treturn x ^ y ^ z;",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (~x & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Ch function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction ch_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The first 32-bit integer argument",
													"\t * @param {number} y The second 32-bit integer argument",
													"\t * @param {number} z The third 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_32(x, y, z)",
													"\t{",
													"\t\treturn (x & y) ^ (x & z) ^ (y & z);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Maj function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument",
													"\t * @param {Int_64} y The second 64-bit integer argument",
													"\t * @param {Int_64} z The third 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction maj_64(x, y, z)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\t\t(x.highOrder & y.highOrder) ^",
													"\t\t\t\t(x.highOrder & z.highOrder) ^",
													"\t\t\t\t(y.highOrder & z.highOrder),",
													"\t\t\t\t(x.lowOrder & y.lowOrder) ^",
													"\t\t\t\t(x.lowOrder & z.lowOrder) ^",
													"\t\t\t\t(y.lowOrder & z.lowOrder)",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma0_64(x)",
													"\t{",
													"\t\tvar rotr28 = rotr_64(x, 28), rotr34 = rotr_64(x, 34),",
													"\t\t\trotr39 = rotr_64(x, 39);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
													"\t\t\t\trotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Sigma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction sigma1_64(x)",
													"\t{",
													"\t\tvar rotr14 = rotr_64(x, 14), rotr18 = rotr_64(x, 18),",
													"\t\t\trotr41 = rotr_64(x, 41);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
													"\t\t\t\trotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma0 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma0_64(x)",
													"\t{",
													"\t\tvar rotr1 = rotr_64(x, 1), rotr8 = rotr_64(x, 8), shr7 = shr_64(x, 7);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
													"\t\t\t\trotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * The 32-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {number} x The 32-bit integer argument",
													"\t * @return {number} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_32(x)",
													"\t{",
													"\t\treturn rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);",
													"\t}",
													"",
													"\t/**",
													"\t * The 64-bit implementation of the NIST specified Gamma1 function",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The 64-bit integer argument",
													"\t * @return {Int_64} The NIST specified output of the function",
													"\t */",
													"\tfunction gamma1_64(x)",
													"\t{",
													"\t\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),",
													"\t\t\tshr6 = shr_64(x, 6);",
													"",
													"\t\treturn new Int_64(",
													"\t\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
													"\t\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
													"\t\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b",
													"\t */",
													"\tfunction safeAdd_32_2(a, b)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_32_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 32-bit integers, wrapping at 2^32. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {number} a The first 32-bit integer argument to be added",
													"\t * @param {number} b The second 32-bit integer argument to be added",
													"\t * @param {number} c The third 32-bit integer argument to be added",
													"\t * @param {number} d The fourth 32-bit integer argument to be added",
													"\t * @param {number} e The fifth 32-bit integer argument to be added",
													"\t * @return {number} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_32_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw = (a & 0xFFFF) + (b & 0xFFFF) + (c & 0xFFFF) + (d & 0xFFFF) +",
													"\t\t\t\t(e & 0xFFFF),",
													"\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) +",
													"\t\t\t\t(e >>> 16) + (lsw >>> 16);",
													"",
													"\t\treturn ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"\t}",
													"",
													"\t/**",
													"\t * Add two 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} x The first 64-bit integer argument to be added",
													"\t * @param {Int_64} y The second 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of x + y",
													"\t */",
													"\tfunction safeAdd_64_2(x, y)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
													"\t\tmsw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add four 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d",
													"\t */",
													"\tfunction safeAdd_64_4(a, b, c, d)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * Add five 64-bit integers, wrapping at 2^64. This uses 16-bit operations",
													"\t * internally to work around bugs in some JS interpreters.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a The first 64-bit integer argument to be added",
													"\t * @param {Int_64} b The second 64-bit integer argument to be added",
													"\t * @param {Int_64} c The third 64-bit integer argument to be added",
													"\t * @param {Int_64} d The fouth 64-bit integer argument to be added",
													"\t * @param {Int_64} e The fouth 64-bit integer argument to be added",
													"\t * @return {Int_64} The sum of a + b + c + d + e",
													"\t */",
													"\tfunction safeAdd_64_5(a, b, c, d, e)",
													"\t{",
													"\t\tvar lsw, msw, lowOrder, highOrder;",
													"",
													"\t\tlsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) +",
													"\t\t\t(c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) +",
													"\t\t\t(e.lowOrder & 0xFFFF);",
													"\t\tmsw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) +",
													"\t\t\t(c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) +",
													"\t\t\t(lsw >>> 16);",
													"\t\tlowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\tlsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) +",
													"\t\t\t(c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) +",
													"\t\t\t(e.highOrder & 0xFFFF) + (msw >>> 16);",
													"\t\tmsw = (a.highOrder >>> 16) + (b.highOrder >>> 16) +",
													"\t\t\t(c.highOrder >>> 16) + (d.highOrder >>> 16) +",
													"\t\t\t(e.highOrder >>> 16) + (lsw >>> 16);",
													"\t\thighOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													"\t\treturn new Int_64(highOrder, lowOrder);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs two given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_2(a, b)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * XORs five given arguments.",
													"\t *",
													"\t * @private",
													"\t * @param {Int_64} a First argument to be XORed",
													"\t * @param {Int_64} b Second argument to be XORed",
													"\t * @param {Int_64} c Third argument to be XORed",
													"\t * @param {Int_64} d Fourth argument to be XORed",
													"\t * @param {Int_64} e Fifth argument to be XORed",
													"\t * @return {Int_64} The XOR of the arguments",
													"\t */",
													"\tfunction xor_64_5(a, b, c, d, e)",
													"\t{",
													"\t\treturn new Int_64(",
													"\t\t\ta.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,",
													"\t\t\ta.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder",
													"\t\t);",
													"\t}",
													"",
													"\t/**",
													"\t * Returns a clone of the given SHA3 state",
													"\t *",
													"\t * @private",
													"\t * @param {Array<Array<Int_64>>} state The state to be cloned",
													"\t * @return {Array<Array<Int_64>>} The cloned state",
													"\t */",
													"\tfunction cloneSHA3State(state) {",
													"\t\tvar clone = [], i;",
													"\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t{",
													"\t\t\tclone[i] = state[i].slice();",
													"\t\t}",
													"",
													"\t\treturn clone;",
													"\t}",
													"",
													"\t/**",
													"\t * Gets the state values for the specified SHA variant",
													"\t *",
													"\t * @param {string} variant The SHA variant",
													"\t * @return {Array<number|Int_64|Array<null>>} The initial state values",
													"\t */",
													"\tfunction getNewState(variant)",
													"\t{",
													"\t\tvar retVal = [], H_trunc, H_full, i;",
													"",
													"\t\tif ((\"SHA-1\" === variant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\t0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((variant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tH_trunc = [",
													"\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,",
													"\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4",
													"\t\t\t];",
													"\t\t\tH_full = [",
													"\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,",
													"\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19",
													"\t\t\t];",
													"",
													"\t\t\tswitch (variant)",
													"\t\t\t{",
													"\t\t\tcase \"SHA-224\":",
													"\t\t\t\tretVal = H_trunc;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-256\":",
													"\t\t\t\tretVal = H_full;",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-384\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(0xcbbb9d5d, H_trunc[0]),",
													"\t\t\t\t\tnew Int_64(0x0629a292a, H_trunc[1]),",
													"\t\t\t\t\tnew Int_64(0x9159015a, H_trunc[2]),",
													"\t\t\t\t\tnew Int_64(0x0152fecd8, H_trunc[3]),",
													"\t\t\t\t\tnew Int_64(0x67332667, H_trunc[4]),",
													"\t\t\t\t\tnew Int_64(0x98eb44a87, H_trunc[5]),",
													"\t\t\t\t\tnew Int_64(0xdb0c2e0d, H_trunc[6]),",
													"\t\t\t\t\tnew Int_64(0x047b5481d, H_trunc[7])",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"SHA-512\":",
													"\t\t\t\tretVal = [",
													"\t\t\t\t\tnew Int_64(H_full[0], 0xf3bcc908),",
													"\t\t\t\t\tnew Int_64(H_full[1], 0x84caa73b),",
													"\t\t\t\t\tnew Int_64(H_full[2], 0xfe94f82b),",
													"\t\t\t\t\tnew Int_64(H_full[3], 0x5f1d36f1),",
													"\t\t\t\t\tnew Int_64(H_full[4], 0xade682d1),",
													"\t\t\t\t\tnew Int_64(H_full[5], 0x2b3e6c1f),",
													"\t\t\t\t\tnew Int_64(H_full[6], 0xfb41bd6b),",
													"\t\t\t\t\tnew Int_64(H_full[7], 0x137e2179)",
													"\t\t\t\t];",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"Unknown SHA variant\");",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((variant.lastIndexOf(\"SHA3-\", 0) === 0) || (variant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tfor (i = 0; i < 5; i += 1)",
													"\t\t\t{",
													"\t\t\t\tretVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];",
													"\t\t\t}",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"No SHA variants supported\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-1 hashing over a 512-byte block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @return {Array<number>} The resulting H values",
													"\t */",
													"\tfunction roundSHA1(block, H)",
													"\t{",
													"\t\tvar W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,",
													"\t\t\tmaj = maj_32, rotl = rotl_32, safeAdd_2 = safeAdd_32_2, t,",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"",
													"\t\tfor (t = 0; t < 80; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\tW[t] = block[t];",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);",
													"\t\t\t}",
													"",
													"\t\t\tif (t < 20)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 40)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);",
													"\t\t\t}",
													"\t\t\telse if (t < 60)",
													"\t\t\t{",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);",
													"\t\t\t} else {",
													"\t\t\t\tT = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);",
													"\t\t\t}",
													"",
													"\t\t\te = d;",
													"\t\t\td = c;",
													"\t\t\tc = rotl(b, 30);",
													"\t\t\tb = a;",
													"\t\t\ta = T;",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-1 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-1",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, totalLen;",
													"",
													"\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t   \"shorting\" the addition is OK. */",
													"\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is a multiple of 512.  Logic does not work for even multiples",
													"\t\t * of 512 but there can never be even multiples of 512. JavaScript",
													"\t\t * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as",
													"\t\t * a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += 16)",
													"\t\t{",
													"\t\t\tH = roundSHA1(remainder.slice(i, i + 16), H);",
													"\t\t}",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/* Put this here so the K arrays aren't put on the stack for every block */",
													"\tvar K_sha2, K_sha512, r_sha3, rc_sha3;",
													"\tif ((6 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\tK_sha2 = [",
													"\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,",
													"\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,",
													"\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,",
													"\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,",
													"\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,",
													"\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,",
													"\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,",
													"\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,",
													"\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,",
													"\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,",
													"\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,",
													"\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,",
													"\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,",
													"\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,",
													"\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,",
													"\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2",
													"\t\t];",
													"",
													"\t\tif ((4 & SUPPORTED_ALGS) !== 0)",
													"\t\t{",
													"\t\t\t K_sha512 = [",
													"\t\t\t\tnew Int_64(K_sha2[ 0], 0xd728ae22), new Int_64(K_sha2[ 1], 0x23ef65cd),",
													"\t\t\t\tnew Int_64(K_sha2[ 2], 0xec4d3b2f), new Int_64(K_sha2[ 3], 0x8189dbbc),",
													"\t\t\t\tnew Int_64(K_sha2[ 4], 0xf348b538), new Int_64(K_sha2[ 5], 0xb605d019),",
													"\t\t\t\tnew Int_64(K_sha2[ 6], 0xaf194f9b), new Int_64(K_sha2[ 7], 0xda6d8118),",
													"\t\t\t\tnew Int_64(K_sha2[ 8], 0xa3030242), new Int_64(K_sha2[ 9], 0x45706fbe),",
													"\t\t\t\tnew Int_64(K_sha2[10], 0x4ee4b28c), new Int_64(K_sha2[11], 0xd5ffb4e2),",
													"\t\t\t\tnew Int_64(K_sha2[12], 0xf27b896f), new Int_64(K_sha2[13], 0x3b1696b1),",
													"\t\t\t\tnew Int_64(K_sha2[14], 0x25c71235), new Int_64(K_sha2[15], 0xcf692694),",
													"\t\t\t\tnew Int_64(K_sha2[16], 0x9ef14ad2), new Int_64(K_sha2[17], 0x384f25e3),",
													"\t\t\t\tnew Int_64(K_sha2[18], 0x8b8cd5b5), new Int_64(K_sha2[19], 0x77ac9c65),",
													"\t\t\t\tnew Int_64(K_sha2[20], 0x592b0275), new Int_64(K_sha2[21], 0x6ea6e483),",
													"\t\t\t\tnew Int_64(K_sha2[22], 0xbd41fbd4), new Int_64(K_sha2[23], 0x831153b5),",
													"\t\t\t\tnew Int_64(K_sha2[24], 0xee66dfab), new Int_64(K_sha2[25], 0x2db43210),",
													"\t\t\t\tnew Int_64(K_sha2[26], 0x98fb213f), new Int_64(K_sha2[27], 0xbeef0ee4),",
													"\t\t\t\tnew Int_64(K_sha2[28], 0x3da88fc2), new Int_64(K_sha2[29], 0x930aa725),",
													"\t\t\t\tnew Int_64(K_sha2[30], 0xe003826f), new Int_64(K_sha2[31], 0x0a0e6e70),",
													"\t\t\t\tnew Int_64(K_sha2[32], 0x46d22ffc), new Int_64(K_sha2[33], 0x5c26c926),",
													"\t\t\t\tnew Int_64(K_sha2[34], 0x5ac42aed), new Int_64(K_sha2[35], 0x9d95b3df),",
													"\t\t\t\tnew Int_64(K_sha2[36], 0x8baf63de), new Int_64(K_sha2[37], 0x3c77b2a8),",
													"\t\t\t\tnew Int_64(K_sha2[38], 0x47edaee6), new Int_64(K_sha2[39], 0x1482353b),",
													"\t\t\t\tnew Int_64(K_sha2[40], 0x4cf10364), new Int_64(K_sha2[41], 0xbc423001),",
													"\t\t\t\tnew Int_64(K_sha2[42], 0xd0f89791), new Int_64(K_sha2[43], 0x0654be30),",
													"\t\t\t\tnew Int_64(K_sha2[44], 0xd6ef5218), new Int_64(K_sha2[45], 0x5565a910),",
													"\t\t\t\tnew Int_64(K_sha2[46], 0x5771202a), new Int_64(K_sha2[47], 0x32bbd1b8),",
													"\t\t\t\tnew Int_64(K_sha2[48], 0xb8d2d0c8), new Int_64(K_sha2[49], 0x5141ab53),",
													"\t\t\t\tnew Int_64(K_sha2[50], 0xdf8eeb99), new Int_64(K_sha2[51], 0xe19b48a8),",
													"\t\t\t\tnew Int_64(K_sha2[52], 0xc5c95a63), new Int_64(K_sha2[53], 0xe3418acb),",
													"\t\t\t\tnew Int_64(K_sha2[54], 0x7763e373), new Int_64(K_sha2[55], 0xd6b2b8a3),",
													"\t\t\t\tnew Int_64(K_sha2[56], 0x5defb2fc), new Int_64(K_sha2[57], 0x43172f60),",
													"\t\t\t\tnew Int_64(K_sha2[58], 0xa1f0ab72), new Int_64(K_sha2[59], 0x1a6439ec),",
													"\t\t\t\tnew Int_64(K_sha2[60], 0x23631e28), new Int_64(K_sha2[61], 0xde82bde9),",
													"\t\t\t\tnew Int_64(K_sha2[62], 0xb2c67915), new Int_64(K_sha2[63], 0xe372532b),",
													"\t\t\t\tnew Int_64(0xca273ece, 0xea26619c), new Int_64(0xd186b8c7, 0x21c0c207),",
													"\t\t\t\tnew Int_64(0xeada7dd6, 0xcde0eb1e), new Int_64(0xf57d4f7f, 0xee6ed178),",
													"\t\t\t\tnew Int_64(0x06f067aa, 0x72176fba), new Int_64(0x0a637dc5, 0xa2c898a6),",
													"\t\t\t\tnew Int_64(0x113f9804, 0xbef90dae), new Int_64(0x1b710b35, 0x131c471b),",
													"\t\t\t\tnew Int_64(0x28db77f5, 0x23047d84), new Int_64(0x32caab7b, 0x40c72493),",
													"\t\t\t\tnew Int_64(0x3c9ebe0a, 0x15c9bebc), new Int_64(0x431d67c4, 0x9c100d4c),",
													"\t\t\t\tnew Int_64(0x4cc5d4be, 0xcb3e42b6), new Int_64(0x597f299c, 0xfc657e2a),",
													"\t\t\t\tnew Int_64(0x5fcb6fab, 0x3ad6faec), new Int_64(0x6c44198c, 0x4a475817)",
													"\t\t\t];",
													"\t\t}",
													"\t}",
													"\tif ((8 & SUPPORTED_ALGS) !== 0)",
													"\t{",
													"\t\trc_sha3 = [",
													"\t\t\tnew Int_64(0x00000000, 0x00000001), new Int_64(0x00000000, 0x00008082),",
													"\t\t\tnew Int_64(0x80000000, 0x0000808A), new Int_64(0x80000000, 0x80008000),",
													"\t\t\tnew Int_64(0x00000000, 0x0000808B), new Int_64(0x00000000, 0x80000001),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008009),",
													"\t\t\tnew Int_64(0x00000000, 0x0000008A), new Int_64(0x00000000, 0x00000088),",
													"\t\t\tnew Int_64(0x00000000, 0x80008009), new Int_64(0x00000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x00000000, 0x8000808B), new Int_64(0x80000000, 0x0000008B),",
													"\t\t\tnew Int_64(0x80000000, 0x00008089), new Int_64(0x80000000, 0x00008003),",
													"\t\t\tnew Int_64(0x80000000, 0x00008002), new Int_64(0x80000000, 0x00000080),",
													"\t\t\tnew Int_64(0x00000000, 0x0000800A), new Int_64(0x80000000, 0x8000000A),",
													"\t\t\tnew Int_64(0x80000000, 0x80008081), new Int_64(0x80000000, 0x00008080),",
													"\t\t\tnew Int_64(0x00000000, 0x80000001), new Int_64(0x80000000, 0x80008008)",
													"\t\t];",
													"",
													"\t\tr_sha3 = [",
													"\t\t\t[ 0, 36,  3, 41, 18],",
													"\t\t\t[ 1, 44, 10, 45,  2],",
													"\t\t\t[62,  6, 43, 15, 61],",
													"\t\t\t[28, 55, 25, 21, 56],",
													"\t\t\t[27, 20, 39,  8, 14]",
													"\t\t];",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-2 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @return {Array<number|Int_64>} The resulting H values",
													"\t */",
													"\tfunction roundSHA2(block, H, variant)",
													"\t{",
													"\t\tvar a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult,",
													"\t\t\tsafeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1,",
													"\t\t\tch, maj, Int, W = [], int1, int2, offset, K;",
													"",
													"\t\t/* Set up the various function handles and variable for the specific",
													"\t\t * variant */",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\tnumRounds = 64;",
													"\t\t\tbinaryStringMult = 1;",
													"\t\t\tInt = Number;",
													"\t\t\tsafeAdd_2 = safeAdd_32_2;",
													"\t\t\tsafeAdd_4 = safeAdd_32_4;",
													"\t\t\tsafeAdd_5 = safeAdd_32_5;",
													"\t\t\tgamma0 = gamma0_32;",
													"\t\t\tgamma1 = gamma1_32;",
													"\t\t\tsigma0 = sigma0_32;",
													"\t\t\tsigma1 = sigma1_32;",
													"\t\t\tmaj = maj_32;",
													"\t\t\tch = ch_32;",
													"\t\t\tK = K_sha2;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\tnumRounds = 80;",
													"\t\t\tbinaryStringMult = 2;",
													"\t\t\tInt = Int_64;",
													"\t\t\tsafeAdd_2 = safeAdd_64_2;",
													"\t\t\tsafeAdd_4 = safeAdd_64_4;",
													"\t\t\tsafeAdd_5 = safeAdd_64_5;",
													"\t\t\tgamma0 = gamma0_64;",
													"\t\t\tgamma1 = gamma1_64;",
													"\t\t\tsigma0 = sigma0_64;",
													"\t\t\tsigma1 = sigma1_64;",
													"\t\t\tmaj = maj_64;",
													"\t\t\tch = ch_64;",
													"\t\t\tK = K_sha512;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\ta = H[0];",
													"\t\tb = H[1];",
													"\t\tc = H[2];",
													"\t\td = H[3];",
													"\t\te = H[4];",
													"\t\tf = H[5];",
													"\t\tg = H[6];",
													"\t\th = H[7];",
													"",
													"\t\tfor (t = 0; t < numRounds; t += 1)",
													"\t\t{",
													"\t\t\tif (t < 16)",
													"\t\t\t{",
													"\t\t\t\toffset = t * binaryStringMult;",
													"\t\t\t\tint1 = (block.length <= offset) ? 0 : block[offset];",
													"\t\t\t\tint2 = (block.length <= offset + 1) ? 0 : block[offset + 1];",
													"\t\t\t\t/* Bit of a hack - for 32-bit, the second term is ignored */",
													"\t\t\t\tW[t] = new Int(int1, int2);",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tW[t] = safeAdd_4(",
													"\t\t\t\t\t\tgamma1(W[t - 2]), W[t - 7],",
													"\t\t\t\t\t\tgamma0(W[t - 15]), W[t - 16]",
													"\t\t\t\t\t);",
													"\t\t\t}",
													"",
													"\t\t\tT1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);",
													"\t\t\tT2 = safeAdd_2(sigma0(a), maj(a, b, c));",
													"\t\t\th = g;",
													"\t\t\tg = f;",
													"\t\t\tf = e;",
													"\t\t\te = safeAdd_2(d, T1);",
													"\t\t\td = c;",
													"\t\t\tc = b;",
													"\t\t\tb = a;",
													"\t\t\ta = safeAdd_2(T1, T2);",
													"\t\t}",
													"",
													"\t\tH[0] = safeAdd_2(a, H[0]);",
													"\t\tH[1] = safeAdd_2(b, H[1]);",
													"\t\tH[2] = safeAdd_2(c, H[2]);",
													"\t\tH[3] = safeAdd_2(d, H[3]);",
													"\t\tH[4] = safeAdd_2(e, H[4]);",
													"\t\tH[5] = safeAdd_2(f, H[5]);",
													"\t\tH[6] = safeAdd_2(g, H[6]);",
													"\t\tH[7] = safeAdd_2(h, H[7]);",
													"",
													"\t\treturn H;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-2 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<number|Int_64>} H The intermediate H values from a previous",
													"\t *   round",
													"\t * @param {string} variant The desired SHA-2 variant",
													"\t * @param {number} outputLen Unused for this variant",
													"\t * @return {Array<number>} The array of integers representing the SHA-2",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen)",
													"\t{",
													"\t\tvar i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;",
													"",
													"\t\tif ((variant === \"SHA-224\" || variant === \"SHA-256\") &&",
													"\t\t\t((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 32-bit variant */",
													"\t\t\t/* The 65 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 72 (64 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 65) >>> 9) << 4) + 15;",
													"\t\t\tbinaryStringInc = 16;",
													"\t\t}",
													"\t\telse if ((variant === \"SHA-384\" || variant === \"SHA-512\") &&",
													"\t\t\t((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\t/* 64-bit variant */",
													"\t\t\t/* The 129 addition is a hack but it works.  The correct number is",
													"\t\t\t   actually 136 (128 + 8) but the below math fails if",
													"\t\t\t   remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,",
													"\t\t\t   \"shorting\" the addition is OK. */",
													"\t\t\toffset = (((remainderBinLen + 129) >>> 10) << 5) + 31;",
													"\t\t\tbinaryStringInc = 32;",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\twhile (remainder.length <= offset)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"\t\t/* Append '1' at the end of the binary string */",
													"\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);",
													"\t\t/* Append length of binary string in the position such that the new",
													"\t\t * length is correct. JavaScript numbers are limited to 2^53 so it's",
													"\t\t * \"safe\" to treat the totalLen as a 64-bit integer. */",
													"\t\ttotalLen = remainderBinLen + processedBinLen;",
													"\t\tremainder[offset] = totalLen & 0xFFFFFFFF;",
													"\t\t/* Bitwise operators treat the operand as a 32-bit number so need to",
													"\t\t * use hacky division and round to get access to upper 32-ish bits */",
													"\t\tremainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;",
													"",
													"\t\tappendedMessageLength = remainder.length;",
													"",
													"\t\t/* This will always be at least 1 full chunk */",
													"\t\tfor (i = 0; i < appendedMessageLength; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-224\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0], H[1], H[2], H[3],",
													"\t\t\t\tH[4], H[5], H[6]",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-256\" === variant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = H;",
													"\t\t}",
													"\t\telse if ((\"SHA-384\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse if ((\"SHA-512\" === variant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tretVal = [",
													"\t\t\t\tH[0].highOrder, H[0].lowOrder,",
													"\t\t\t\tH[1].highOrder, H[1].lowOrder,",
													"\t\t\t\tH[2].highOrder, H[2].lowOrder,",
													"\t\t\t\tH[3].highOrder, H[3].lowOrder,",
													"\t\t\t\tH[4].highOrder, H[4].lowOrder,",
													"\t\t\t\tH[5].highOrder, H[5].lowOrder,",
													"\t\t\t\tH[6].highOrder, H[6].lowOrder,",
													"\t\t\t\tH[7].highOrder, H[7].lowOrder",
													"\t\t\t];",
													"\t\t}",
													"\t\telse /* This should never be reached */",
													"\t\t{",
													"\t\t\tthrow new Error(\"Unexpected error in SHA-2 implementation\");",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * Performs a round of SHA-3 hashing over a block",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>|null} block The binary array representation of the",
													"\t *   block to hash",
													"\t * @param {Array<Array<Int_64>>} state The binary array representation of the",
													"\t *   block to hash",
													"\t * @return {Array<Array<Int_64>>} The resulting state value",
													"\t */",
													"\tfunction roundSHA3(block, state)",
													"\t{",
													"\t\tvar round, x, y, B, C = [], D = [];",
													"",
													"\t\tif (null !== block)",
													"\t\t{",
													"\t\t\tfor (x = 0; x < block.length; x+=2)",
													"\t\t\t{",
													"\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(",
													"\t\t\t\t\tstate[(x >>> 1) % 5][((x >>> 1) / 5) | 0],",
													"\t\t\t\t\tnew Int_64(block[x + 1], block[x])",
													"\t\t\t\t);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\tfor (round = 0; round < 24; round += 1)",
													"\t\t{",
													"\t\t\t/* getNewState doesn't care about variant beyond SHA3 so feed it a",
													"\t\t\t   value that triggers the getNewState \"if\" statement",
													"\t\t\t*/",
													"\t\t\tB = getNewState(\"SHA3-\");",
													"",
													"\t\t\t/* Perform theta step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tC[x] = xor_64_5(state[x][0], state[x][1], state[x][2],",
													"\t\t\t\t\tstate[x][3], state[x][4]);",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tD[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));",
													"\t\t\t}",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(state[x][y], D[x]);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform combined ro and pi steps */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tB[y][(2 * x + 3 * y) % 5] = rotl_64(",
													"\t\t\t\t\t\tstate[x][y],",
													"\t\t\t\t\t\tr_sha3[x][y]",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform chi step */",
													"\t\t\tfor (x = 0; x < 5; x += 1)",
													"\t\t\t{",
													"\t\t\t\tfor (y = 0; y < 5; y += 1)",
													"\t\t\t\t{",
													"\t\t\t\t\tstate[x][y] = xor_64_2(",
													"\t\t\t\t\t\tB[x][y],",
													"\t\t\t\t\t\tnew Int_64(",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].highOrder) & B[(x + 2) % 5][y].highOrder,",
													"\t\t\t\t\t\t\t~(B[(x + 1) % 5][y].lowOrder)  & B[(x + 2) % 5][y].lowOrder",
													"\t\t\t\t\t\t)",
													"\t\t\t\t\t);",
													"\t\t\t\t}",
													"\t\t\t}",
													"",
													"\t\t\t/* Perform iota step */",
													"\t\t\tstate[0][0] = xor_64_2(state[0][0], rc_sha3[round]);",
													"\t\t}",
													"",
													"\t\treturn state;",
													"\t}",
													"",
													"\t/**",
													"\t * Finalizes the SHA-3 hash",
													"\t *",
													"\t * @private",
													"\t * @param {Array<number>} remainder Any leftover unprocessed packed ints",
													"\t *   that still need to be processed",
													"\t * @param {number} remainderBinLen The number of bits in remainder",
													"\t * @param {number} processedBinLen The number of bits already",
													"\t *   processed",
													"\t * @param {Array<Array<Int_64>>} state The state from a previous round",
													"\t * @param {number} blockSize The block size/rate of the variant in bits",
													"\t * @param {number} delimiter The delimiter value for the variant",
													"\t * @param {number} outputLen The output length for the variant in bits",
													"\t * @return {Array<number>} The array of integers representing the SHA-3",
													"\t *   hash of message",
													"\t */",
													"\tfunction finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen)",
													"\t{",
													"\t\tvar i, retVal = [], binaryStringInc = blockSize >>> 5, state_offset = 0,",
													"\t\t\tremainderIntLen = remainderBinLen >>> 5, temp;",
													"",
													"",
													"\t\t/* Process as many blocks as possible, some may be here for multiple rounds",
													"\t\t   with SHAKE",
													"\t\t*/",
													"\t\tfor (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc)",
													"\t\t{",
													"\t\t\tstate = roundSHA3(remainder.slice(i, i + binaryStringInc), state);",
													"\t\t\tremainderBinLen -= blockSize;",
													"\t\t}",
													"",
													"\t\tremainder = remainder.slice(i);",
													"\t\tremainderBinLen = remainderBinLen % blockSize;",
													"",
													"\t\t/* Pad out the remainder to a full block */",
													"\t\twhile (remainder.length < binaryStringInc)",
													"\t\t{",
													"\t\t\tremainder.push(0);",
													"\t\t}",
													"",
													"\t\t/* Find the next \"empty\" byte for the 0x80 and append it via an xor */",
													"\t\ti = remainderBinLen >>> 3;",
													"\t\tremainder[i >> 2] ^= delimiter << (8 * (i % 4));",
													"",
													"\t\tremainder[binaryStringInc - 1] ^= 0x80000000;",
													"\t\tstate = roundSHA3(remainder, state);",
													"",
													"\t\twhile (retVal.length * 32 < outputLen)",
													"\t\t{",
													"\t\t\ttemp = state[state_offset % 5][(state_offset / 5) | 0];",
													"\t\t\tretVal.push(temp.lowOrder);",
													"\t\t\tif (retVal.length * 32 >= outputLen)",
													"\t\t\t{",
													"\t\t\t\tbreak;",
													"\t\t\t}",
													"\t\t\tretVal.push(temp.highOrder);",
													"\t\t\tstate_offset += 1;",
													"",
													"\t\t\tif (0 === ((state_offset * 64) % blockSize))",
													"\t\t\t{",
													"\t\t\t\troundSHA3(null, state);",
													"\t\t\t}",
													"\t\t}",
													"",
													"\t\treturn retVal;",
													"\t}",
													"",
													"\t/**",
													"\t * jsSHA is the workhorse of the library.  Instantiate it with the string to",
													"\t * be hashed as the parameter",
													"\t *",
													"\t * @constructor",
													"\t * @this {jsSHA}",
													"\t * @param {string} variant The desired SHA variant (SHA-1, SHA-224, SHA-256,",
													"\t *   SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384, or SHA3-512)",
													"\t * @param {string} inputFormat The format of srcString: HEX, TEXT, B64,",
													"\t *   BYTES, or ARRAYBUFFER",
													"\t * @param {{encoding: (string|undefined), numRounds: (number|undefined)}=}",
													"\t *   options Optional values",
													"\t */",
													"\tvar jsSHA = function(variant, inputFormat, options)",
													"\t{",
													"\t\tvar processedLen = 0, remainder = [], remainderLen = 0, utfType,",
													"\t\t\tintermediateState, converterFunc, shaVariant = variant, outputBinLen,",
													"\t\t\tvariantBlockSize, roundFunc, finalizeFunc, stateCloneFunc,",
													"\t\t\thmacKeySet = false, keyWithIPad = [], keyWithOPad = [], numRounds,",
													"\t\t\tupdatedCalled = false, inputOptions, isSHAKE = false, bigEndianMod = -1;",
													"",
													"\t\tinputOptions = options || {};",
													"\t\tutfType = inputOptions[\"encoding\"] || \"UTF8\";",
													"\t\tnumRounds = inputOptions[\"numRounds\"] || 1;",
													"",
													"\t\tif ((numRounds !== parseInt(numRounds, 10)) || (1 > numRounds))",
													"\t\t{",
													"\t\t\tthrow new Error(\"numRounds must a integer >= 1\");",
													"\t\t}",
													"",
													"\t\tif ((\"SHA-1\" === shaVariant) && ((1 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvariantBlockSize = 512;",
													"\t\t\troundFunc = roundSHA1;",
													"\t\t\tfinalizeFunc = finalizeSHA1;",
													"\t\t\toutputBinLen = 160;",
													"\t\t\tstateCloneFunc = function(state) { return state.slice();};",
													"\t\t}",
													"\t\telse if ((shaVariant.lastIndexOf(\"SHA-\", 0) === 0) && ((6 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\troundFunc = function (block, H) {",
													"\t\t\t\treturn roundSHA2(block, H, shaVariant);",
													"\t\t\t};",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, H, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen);",
													"\t\t\t};",
													"\t\t\tstateCloneFunc = function(state) { return state.slice(); };",
													"",
													"\t\t\tif ((\"SHA-224\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 224;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-256\" === shaVariant) && ((2 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 512;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-384\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if ((\"SHA-512\" === shaVariant) && ((4 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1024;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t}",
													"\t\telse if (((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0) || (shaVariant.lastIndexOf(\"SHAKE\", 0) === 0)) &&",
													"\t\t\t((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t{",
													"\t\t\tvar delimiter = 0x06;",
													"",
													"\t\t\troundFunc = roundSHA3;",
													"\t\t\tstateCloneFunc = function(state) { return cloneSHA3State(state);};",
													"\t\t\tbigEndianMod = 1;",
													"",
													"\t\t\tif (\"SHA3-224\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1152;",
													"\t\t\t\toutputBinLen = 224;",
													"",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = 256;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-384\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 832;",
													"\t\t\t\toutputBinLen = 384;",
													"\t\t\t}",
													"\t\t\telse if (\"SHA3-512\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 576;",
													"\t\t\t\toutputBinLen = 512;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE128\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1344;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse if (\"SHAKE256\" === shaVariant)",
													"\t\t\t{",
													"\t\t\t\tvariantBlockSize = 1088;",
													"\t\t\t\toutputBinLen = -1;",
													"\t\t\t\tdelimiter = 0x1F;",
													"\t\t\t\tisSHAKE = true;",
													"\t\t\t}",
													"\t\t\telse",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Chosen SHA variant is not supported \"+shaVariant);",
													"\t\t\t}",
													"\t\t\tfinalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputLen)",
													"\t\t\t{",
													"\t\t\t\treturn finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen);",
													"\t\t\t};",
													"\t\t}",
													"\t\telse",
													"\t\t{",
													"\t\t\tthrow new Error(\"Chosen SHA varwwwiant is not supported \"+shaVariant);",
													"\t\t}",
													"\t\tconverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"\t\tintermediateState = getNewState(shaVariant);",
													"",
													"\t\t/**",
													"\t\t * Sets the HMAC key for an eventual getHMAC call.  Must be called",
													"\t\t * immediately after jsSHA object instantiation",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} key The key used to calculate the HMAC",
													"\t\t * @param {string} inputFormat The format of key, HEX, TEXT, B64, BYTES,",
													"\t\t *   or ARRAYBUFFER",
													"\t\t * @param {{encoding : (string|undefined)}=} options Associative array",
													"\t\t *   of input format options",
													"\t\t */",
													"\t\tthis.setHMACKey = function(key, inputFormat, options)",
													"\t\t{",
													"\t\t\tvar keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize,",
													"\t\t\t\ti, lastArrayIndex, keyOptions;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"HMAC key already set\");",
													"\t\t\t}",
													"",
													"\t\t\tif (true === updatedCalled)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot set HMAC key after calling update\");",
													"\t\t\t}",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"SHAKE is not supported for HMAC\");",
													"\t\t\t}",
													"",
													"\t\t\tkeyOptions = options || {};",
													"\t\t\tutfType = keyOptions[\"encoding\"] || \"UTF8\";",
													"",
													"\t\t\tkeyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);",
													"",
													"\t\t\tconvertRet = keyConverterFunc(key);",
													"\t\t\tkeyBinLen = convertRet[\"binLen\"];",
													"\t\t\tkeyToUse = convertRet[\"value\"];",
													"",
													"\t\t\tblockByteSize = variantBlockSize >>> 3;",
													"",
													"\t\t\t/* These are used multiple times, calculate and store them */",
													"\t\t\tlastArrayIndex = (blockByteSize / 4) - 1;",
													"",
													"\t\t\t/* Figure out what to do with the key based on its size relative to",
													"\t\t\t * the hash's block size */",
													"\t\t\tif (blockByteSize < (keyBinLen / 8))",
													"\t\t\t{",
													"",
													"\t\t\t\tkeyToUse = finalizeFunc(keyToUse, keyBinLen, 0,getNewState(shaVariant), outputBinLen);",
													"\t\t\t\t/* For all variants, the block size is bigger than the output",
													"\t\t\t\t * size so there will never be a useful byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"\t\t\telse if (blockByteSize > (keyBinLen / 8))",
													"\t\t\t{",
													"\t\t\t\t/* If the blockByteSize is greater than the key length, there",
													"\t\t\t\t * will always be at LEAST one \"useless\" byte at the end of the",
													"\t\t\t\t * string */",
													"\t\t\t\twhile (keyToUse.length <= lastArrayIndex)",
													"\t\t\t\t{",
													"\t\t\t\t\tkeyToUse.push(0);",
													"\t\t\t\t}",
													"\t\t\t\tkeyToUse[lastArrayIndex] &= 0xFFFFFF00;",
													"\t\t\t}",
													"",
													"\t\t\t/* Create ipad and opad */",
													"\t\t\tfor (i = 0; i <= lastArrayIndex; i += 1)",
													"\t\t\t{",
													"\t\t\t\tkeyWithIPad[i] = keyToUse[i] ^ 0x36363636;",
													"\t\t\t\tkeyWithOPad[i] = keyToUse[i] ^ 0x5C5C5C5C;",
													"\t\t\t}",
													"",
													"\t\t\tintermediateState = roundFunc(keyWithIPad, intermediateState);",
													"\t\t\tprocessedLen = variantBlockSize;",
													"",
													"\t\t\thmacKeySet = true;",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Takes strString and hashes as many blocks as possible.  Stores the",
													"\t\t * rest for either a future update or getHash call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string|ArrayBuffer} srcString The string to be hashed",
													"\t\t */",
													"\t\tthis.update = function(srcString)",
													"\t\t{",
													"\t\t\tvar convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,",
													"\t\t\t\tvariantBlockIntInc = variantBlockSize >>> 5;",
													"",
													"\t\t\tconvertRet = converterFunc(srcString, remainder, remainderLen);",
													"\t\t\tchunkBinLen = convertRet[\"binLen\"];",
													"\t\t\tchunk = convertRet[\"value\"];",
													"",
													"\t\t\tchunkIntLen = chunkBinLen >>> 5;",
													"\t\t\tfor (i = 0; i < chunkIntLen; i += variantBlockIntInc)",
													"\t\t\t{",
													"\t\t\t\tif (updateProcessedLen + variantBlockSize <= chunkBinLen)",
													"\t\t\t\t{",
													"\t\t\t\t\tintermediateState = roundFunc(",
													"\t\t\t\t\t\tchunk.slice(i, i + variantBlockIntInc),",
													"\t\t\t\t\t\tintermediateState",
													"\t\t\t\t\t);",
													"\t\t\t\t\tupdateProcessedLen += variantBlockSize;",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t\tprocessedLen += updateProcessedLen;",
													"\t\t\tremainder = chunk.slice(updateProcessedLen >>> 5);",
													"\t\t\tremainderLen = chunkBinLen % variantBlockSize;",
													"\t\t\tupdatedCalled = true;",
													"",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the desired SHA hash of the string specified at instantiation",
													"\t\t * using the specified parameters",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting (B64, HEX,",
													"\t\t *   BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options Hash list of output formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash",
													"\t\t *   in the format specified.",
													"\t\t */",
													"\t\tthis.getHash = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc, i, outputOptions, finalizedState;",
													"",
													"\t\t\tif (true === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHash after setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\tif ((isSHAKE === true) && ((8 & SUPPORTED_ALGS) !== 0))",
													"\t\t\t{",
													"\t\t\t\tif (outputOptions[\"shakeLen\"] === -1)",
													"\t\t\t\t{",
													"\t\t\t\t\tthrow new Error(\"shakeLen must be specified in options\");",
													"\t\t\t\t}",
													"\t\t\t\toutputBinLen = outputOptions[\"shakeLen\"];",
													"\t\t\t}",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\ti = new ArrayBuffer(0);",
													"\t\t\t\t} catch (ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfinalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfor (i = 1; i < numRounds; i += 1)",
													"\t\t\t{",
													"\t\t\t\t/* This weird fix-up is only for the case of SHAKE algorithms",
													"\t\t\t\t * and outputBinLen is not a multiple of 32.  In this case, the",
													"\t\t\t\t * very last block of finalizedState has data that needs to be",
													"\t\t\t\t * ignored because all the finalizeFunc calls need to have",
													"\t\t\t\t * unneeded bits set to 0.",
													"\t\t\t\t */",
													"\t\t\t\tif (((8 & SUPPORTED_ALGS) !== 0) && (isSHAKE === true) && (outputBinLen % 32 !== 0))",
													"\t\t\t\t{",
													"\t\t\t\t\tfinalizedState[finalizedState.length - 1] &= 0x00FFFFFF >>> 24 - (outputBinLen % 32);",
													"\t\t\t\t}",
													"\t\t\t\tfinalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen);",
													"\t\t\t}",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"",
													"\t\t/**",
													"\t\t * Returns the the HMAC in the specified format using the key given by",
													"\t\t * a previous setHMACKey call.",
													"\t\t *",
													"\t\t * @expose",
													"\t\t * @param {string} format The desired output formatting",
													"\t\t *   (B64, HEX, BYTES, or ARRAYBUFFER)",
													"\t\t * @param {{outputUpper : (boolean|undefined), b64Pad : (string|undefined),",
													"\t\t *   shakeLen : (number|undefined)}=} options associative array of output",
													"\t\t *   formatting options",
													"\t\t * @return {string|ArrayBuffer} The string representation of the hash in the",
													"\t\t *   format specified.",
													"\t\t */",
													"\t\tthis.getHMAC = function(format, options)",
													"\t\t{",
													"\t\t\tvar formatFunc,\tfirstHash, outputOptions, finalizedState;",
													"",
													"\t\t\tif (false === hmacKeySet)",
													"\t\t\t{",
													"\t\t\t\tthrow new Error(\"Cannot call getHMAC without first setting HMAC key\");",
													"\t\t\t}",
													"",
													"\t\t\toutputOptions = getOutputOpts(options);",
													"",
													"\t\t\t/* Validate the output format selection */",
													"\t\t\tswitch (format)",
													"\t\t\t{",
													"\t\t\tcase \"HEX\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"B64\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"BYTES\":",
													"\t\t\t\tformatFunc = function(binarray) {return packed2bytes(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tcase \"ARRAYBUFFER\":",
													"\t\t\t\ttry {",
													"\t\t\t\t\tformatFunc = new ArrayBuffer(0);",
													"\t\t\t\t} catch(ignore) {",
													"\t\t\t\t\tthrow new Error(\"ARRAYBUFFER not supported by this environment\");",
													"\t\t\t\t}",
													"\t\t\t\tformatFunc = function(binarray) {return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);};",
													"\t\t\t\tbreak;",
													"\t\t\tdefault:",
													"\t\t\t\tthrow new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");",
													"\t\t\t}",
													"",
													"\t\t\tfirstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);",
													"\t\t\tfinalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));",
													"\t\t\tfinalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);",
													"",
													"\t\t\treturn formatFunc(finalizedState);",
													"\t\t};",
													"\t};",
													"",
													"\tif ((\"function\" === typeof define) && (define[\"amd\"])) /* AMD Support */",
													"\t{",
													"\t\tdefine(function()",
													"\t\t{",
													"\t\t\treturn jsSHA;",
													"\t\t});",
													"\t} else if (\"undefined\" !== typeof exports) /* Node Support */",
													"\t{",
													"\t\tif ((\"undefined\" !== typeof module) && module[\"exports\"])",
													"\t\t{",
													"\t\t  module[\"exports\"] = jsSHA;",
													"\t\t  exports = jsSHA;",
													"\t\t}",
													"\t\telse {",
													"\t\t\texports = jsSHA;",
													"\t\t}",
													"\t} else { /* Browsers and Web Workers*/",
													"\t\tglobal[\"jsSHA\"] = jsSHA;",
													"\t}",
													"}(X));",
													"",
													"TOTP = function() {",
													"",
													"    var dec2hex = function(s) {",
													"        return (s < 15.5 ? \"0\" : \"\") + Math.round(s).toString(16);",
													"    };",
													"",
													"    var hex2dec = function(s) {",
													"        return parseInt(s, 16);",
													"    };",
													"",
													"    var leftpad = function(s, l, p) {",
													"        if(l + 1 >= s.length) {",
													"            s = Array(l + 1 - s.length).join(p) + s;",
													"        }",
													"        return s;",
													"    };",
													"",
													"    var base32tohex = function(base32) {",
													"        var base32chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";",
													"        var bits = \"\";",
													"        var hex = \"\";",
													"        for(var i = 0; i < base32.length; i++) {",
													"            var val = base32chars.indexOf(base32.charAt(i).toUpperCase());",
													"            bits += leftpad(val.toString(2), 5, '0');",
													"        }",
													"        for(var i = 0; i + 4 <= bits.length; i+=4) {",
													"            var chunk = bits.substr(i, 4);",
													"            hex = hex + parseInt(chunk, 2).toString(16) ;",
													"        }",
													"        return hex;",
													"    };",
													"",
													"    this.getOTP = function(secret) {",
													"        try {",
													"            var key = base32tohex(secret);",
													"            var epoch = Math.round(new Date().getTime() / 1000.0);",
													"            var time = leftpad(dec2hex(Math.floor(epoch / 30)), 16, \"0\");",
													"            var shaObj = new X.jsSHA(\"SHA-1\", \"HEX\");",
													"            shaObj.setHMACKey(key, \"HEX\");",
													"            shaObj.update(time);",
													"            var hmac = shaObj.getHMAC(\"HEX\");",
													"            var offset = hex2dec(hmac.substring(hmac.length - 1));",
													"            var otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec(\"7fffffff\")) + \"\";",
													"            otp = (otp).substr(otp.length - 6, 6);",
													"        } catch (error) {",
													"            throw error;",
													"        }",
													"        return otp;",
													"    };",
													"",
													"}",
													"",
													"var totpObj = new TOTP();",
													"var otp = totpObj.getOTP(\"4QKOKOOTZN7KOHYG\");",
													"",
													"pm.environment.set(\"OTP\", otp);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"microservice\":\"rd_professional_api\",\"oneTimePassword\":\"{{OTP}}\"}"
										},
										"url": {
											"raw": "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal/lease",
											"protocol": "http",
											"host": [
												"rpe-service-auth-provider-demo",
												"service",
												"core-compute-demo",
												"internal"
											],
											"path": [
												"lease"
											]
										}
									},
									"response": []
								},
								{
									"name": "AuthorizationToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42779cad-4174-45cd-83bf-f6556e68077f",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_HTTPS_PROTO}}://{{IDAM_DOMAIN}}/o/token?grant_type=password&username=mallikarjun.puttana@hmcts.net&password=Testing1234&client_id=rd-professional-api&client_secret=cc5f2a6-9690-11e9-bc42-526af7764f64&redirect_uri=https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect&scope=openid profile roles manage-user create-user search-user",
											"protocol": "{{API_HTTPS_PROTO}}",
											"host": [
												"{{IDAM_DOMAIN}}"
											],
											"path": [
												"o",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "password"
												},
												{
													"key": "username",
													"value": "mallikarjun.puttana@hmcts.net"
												},
												{
													"key": "password",
													"value": "Testing1234"
												},
												{
													"key": "client_id",
													"value": "rd-professional-api"
												},
												{
													"key": "client_secret",
													"value": "cc5f2a6-9690-11e9-bc42-526af7764f64"
												},
												{
													"key": "redirect_uri",
													"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect"
												},
												{
													"key": "scope",
													"value": "openid profile roles manage-user create-user search-user"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Organisation",
							"item": [
								{
									"name": "CreateOrganisation_1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2aa4d4ce-a379-45f7-8a4a-dd674cd38faa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bab5a3c7-99d7-4147-8931-58ceabc100e3",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid1\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Solicitors\",\n    \"sraId\": \"Kirkcsraid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantk1\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"praveenext.super@gmail.com\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBATKC1011\",\"PBATKC1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"MK4 4DH\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d3bfe03f-55fb-4fab-ac41-afd36c299ea1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "74fd5093-2f43-4905-93d2-6a739c8abcef",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid2\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org2\",\n    \"sraId\": \"Kiransraid2\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp2\",\n    \"companyUrl\": \"www.Kiran2.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg2@email.co.uk\", \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc2011\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 2 organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111112990\",\n                    \"dxExchange\": \"911111292099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "04bc0027-875c-4c63-9d79-1f01eee58d25",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e00baba1-786a-4cfc-a214-aa771c4bd5ba",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid3\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org3\",\n    \"sraId\": \"Kiransraid3\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp3\",\n    \"companyUrl\": \"www.Kiran3.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg3@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 3 Organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111113990\",\n                    \"dxExchange\": \"911111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8cfd7878-64b6-4c80-917e-e50a1cda250a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83b4fdb0-71a0-495b-a871-0179d16034ac",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid4\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org4\",\n    \"sraId\": \"Kiransraid4\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp4\",\n    \"companyUrl\": \"www.Kiran4.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg4@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc4011\",\"PBAtpc4021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "520e4920-8c0d-450d-97cc-bd099cc8ca21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0b4ff27c-b790-4284-bc65-f61aa608d4ee",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid5\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													" pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org5\",\n    \"sraId\": \"Kiransraid5\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp5\",\n    \"companyUrl\": \"www.Kiran5.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg5@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc5011\",\"PBAtpc5021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 5111111990\",\n                    \"dxExchange\": \"511111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f1e08a73-9889-4431-b209-6bff7f749370",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2a605f2c-4d11-42a8-87af-b1bf8f664cfa",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid6\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org6\",\n    \"sraId\": \"Kiransraid6\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp6\",\n    \"companyUrl\": \"www.Kiran6.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg6@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc6011\",\"PBAtpc6021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 6111111990\",\n                    \"dxExchange\": \"611111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "CreateOrganisation_7",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ba7c396-f807-4d4d-885f-b6afb964f615",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3768bda-79ab-4e9f-8e02-6e049cece958",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid7\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org7\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg7@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\"\n            \n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Create Organisation_8",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5f5c987-a0ac-4960-ae13-f74fd18c28b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f09b02ab-a19b-408e-9311-cb7547068b4f",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intOrgid8\",response.organisationIdentifier);",
													"",
													"pm.test(\"Successful POST request to create Organisation\", function () {",
													"     pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org8\",\n    \"sraId\": \"Kiransraid8\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp8\",\n    \"companyUrl\": \"www.Kiran8.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg8@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc8011\",\"PBAtpc8021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"123 MAIN HOUSE\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Company number must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74407de5-17ba-4f29-8920-6795df5b2d10",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dee6b678-f732-427e-b614-b0d583a3d3e1",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of Company number must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"company_number_uq1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t    \"name\": \"Demo orgtes078\",\n\t\t\"status\":\"Active\",\n\t    \"sraId\": \"Demoorgtes078\",\n\t    \"sraRegulated\": true,\n\t    \"companyNumber\": \"DemoT078\",\n\t    \"companyUrl\": \"www.Demoorgtes078.com\",\n\t    \"superUser\": {\n\t        \"firstName\": \"FNameDemoOrg078\",\n\t        \"lastName\": \"LNameDemoOrg078\",\n\t        \"email\": \"Demoorgtes078@mailinator.com\",\n\t\t\t\"userIdentifier\":\"DemoOrg078\",\n\t         \"jurisdictions\": [\n\t     {\n\t       \"id\": \"SSCS\"\n\t     },\n\t     {\n\t       \"id\": \"Probate\"\n\t     },\n\t     {\n\t       \"id\": \"Public Law\"\n\t     },\n\t     {\n\t       \"id\": \"Bulk Scanning\"\n\t     },\n\t     {\n\t       \"id\": \"Immigration & Asylum\"\n\t     },\n\t     {\n\t       \"id\": \"Civil Money Claims\"\n\t     },\n\t     {\n\t       \"id\": \"Employment\"\n\t     },\n\t     {\n\t       \"id\": \"Family public law and adoption\"\n\t     },\n\t     {\n\t       \"id\": \"Civil enforcement and possession\"\n\t     }\n\t   ]\n\t    },\n\t    \"paymentAccount\": [\n       \n\t           \"PBA1420078\"\n       \n\t    ],\n\t    \"contactInformation\": [\n\t        {\n\t            \"addressLine1\": \"Demoorgtes078\",\n\t            \"addressLine2\": \"Demoorgtes078\",\n\t            \"addressLine3\": \"Demoorgtes078\",\n\t            \"townCity\": \"West Kirby\",\n\t            \"county\": \"London\",\n\t            \"country\": \"UK\",\n\t            \"postCode\": \"TES078\",\n\t            \"dxAddress\": [\n\t                {\n\t                    \"dxNumber\": \"DX 9000000078\",\n\t                    \"dxExchange\": \"90000000000000000078\"\n\t                }\n\t            ]\n\t        }\n\t    ]\n\t}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of SRA_ID must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cf68438-5a1f-43b8-b5c7-0346ab6a28e4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1793b0f4-37a2-4739-8481-356014f1194b",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of SRA_ID must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"sra_id_uq1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t    \"name\": \"Demo orgtes078\",\n\t\t\"status\":\"Active\",\n\t    \"sraId\": \"Demoorgtes078\",\n\t    \"sraRegulated\": true,\n\t    \"companyNumber\": \"{{$randomBankAccount}}\",\n\t    \"companyUrl\": \"www.Demoorgtes078.com\",\n\t    \"superUser\": {\n\t        \"firstName\": \"FNameDemoOrg078\",\n\t        \"lastName\": \"LNameDemoOrg078\",\n\t        \"email\": \"Demoorgtes078@mailinator.com\",\n\t\t\t\"userIdentifier\":\"DemoOrg078\",\n\t         \"jurisdictions\": [\n\t     {\n\t       \"id\": \"SSCS\"\n\t     },\n\t     {\n\t       \"id\": \"Probate\"\n\t     },\n\t     {\n\t       \"id\": \"Public Law\"\n\t     },\n\t     {\n\t       \"id\": \"Bulk Scanning\"\n\t     },\n\t     {\n\t       \"id\": \"Immigration & Asylum\"\n\t     },\n\t     {\n\t       \"id\": \"Civil Money Claims\"\n\t     },\n\t     {\n\t       \"id\": \"Employment\"\n\t     },\n\t     {\n\t       \"id\": \"Family public law and adoption\"\n\t     },\n\t     {\n\t       \"id\": \"Civil enforcement and possession\"\n\t     }\n\t   ]\n\t    },\n\t    \"paymentAccount\": [\n       \n\t           \"PBA1420078\"\n       \n\t    ],\n\t    \"contactInformation\": [\n\t        {\n\t            \"addressLine1\": \"Demoorgtes078\",\n\t            \"addressLine2\": \"Demoorgtes078\",\n\t            \"addressLine3\": \"Demoorgtes078\",\n\t            \"townCity\": \"West Kirby\",\n\t            \"county\": \"London\",\n\t            \"country\": \"UK\",\n\t            \"postCode\": \"TES078\",\n\t            \"dxAddress\": [\n\t                {\n\t                    \"dxNumber\": \"DX 9000000078\",\n\t                    \"dxExchange\": \"90000000000000000078\"\n\t                }\n\t            ]\n\t        }\n\t    ]\n\t}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of PBA Number  must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cffd3567-933e-4dce-90d6-7896796b8898",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7147bf32-07b8-4b98-bd75-8c0fdb3b2312",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Validation of PBA Number must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"pba_number_uq\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg9@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc1011\",\"PBAPOrg1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}&sraId=${{$randomInt}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												},
												{
													"key": "sraId",
													"value": "${{$randomInt}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Emai id must be unique",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "23e5cb55-6cf3-4b27-bcf5-efd789e27063",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1b75ae8e-6f05-4854-89fb-405291babb32",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"deleted_null_idx\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg1@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n      \"PBA1000{{$randomInt}}\"\n      ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{API_PROTO}}://{{API_DOMAIN}}/refdata/internal/v1/organisations?companyNumber=${{$randomBankAccount}}&sraId=${{$randomInt}}&paymentAccount=$PBA${{$randomInt}}",
											"protocol": "{{API_PROTO}}",
											"host": [
												"{{API_DOMAIN}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "companyNumber",
													"value": "${{$randomBankAccount}}"
												},
												{
													"key": "sraId",
													"value": "${{$randomInt}}"
												},
												{
													"key": "paymentAccount",
													"value": "$PBA${{$randomInt}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Payment Account field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8e31452-40f0-4b3c-b2e4-a26032c08d9c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eafee1a9-a669-4d40-8624-aa01078cd418",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Payment_Account field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"PBA number must start with PBA/pba and be followed by 7 alphanumeric characters\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2211113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA22113\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \" \" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Company number field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e3b1bd2d-bf76-42a0-8c76-7382ac74195b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0cfe36dd-27af-4d6c-9816-6147379085e2",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"",
													"pm.test(\"Successful Company number field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"    pm.expect(response).to.include(\"size must be between 0 and 8\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2211113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA2211334\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1234555\" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Email_id field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "63855f0f-7133-45ef-95d4-5700e1ed289b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0c055499-7f9f-46b5-ad41-af7058520a97",
												"exec": [
													"",
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful email_id field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													" //   pm.expect(response).to.include(\"deleted_null_idx\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{S2S_AUTH_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA2218113\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA82713\",\n    \"companyUrl\": \"www.trA2211113.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA2111113@email.co.uk@\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1234512\" \n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"1-2-3 high road\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST6\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 2111113990\",\n                    \"dxExchange\": \"211111392099908492\"\n                }\n            ]\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "DX_Number field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d16f8dd5-8691-49f0-8eb2-9ab5f43fc2c1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32295511-05fb-478d-9ec4-42730325ccbd",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful DX_Number field validation\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"  //  pm.expect(response).to.include(\"deleted_null_idx\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA9888112\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA98882\",\n    \"companyUrl\": \"www.trA9888112.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA9888112@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA9888113\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 2 organisation\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"aX 9ss1112390\",\n                    \"dxExchange\": \"911111292099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "AddressLine1 field validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e6bd288-8ddb-4997-a0d2-ad97125f02e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b0b4dbe9-2b9f-4926-8ae8-f6261464a220",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of AddressLine1 being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"address_line1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Org1\",\n    \"sraId\": \"Kiransraid9\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantp9\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"Kiranorg9@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBAtpc9011\",\"PBAtpc9021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"\",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of AddressLine1 is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d10dfaa-ded8-4999-9f20-43eb62f6afb8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1c5d0daa-ffa7-4e2e-8379-ff7bf1020145",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of AddressLine1 being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"address_line1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Kiran Thottempudi\",\n    \"sraId\": \"TPA1834111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA18341\",\n    \"companyUrl\": \"www.trA1834111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA11834111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA1149131\",\"PBA1491312\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 1111111990\",\n                    \"dxExchange\": \"111111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Firstname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b462c33-073f-4564-95b0-501d6531dbd6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f69a8f7-2ddc-473b-b890-6105be2fb2ff",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"first_name\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n       \n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA5511111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5511111\",\"PBA5511112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Lastname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5eb6d008-31e2-47f3-aa63-8dc21fbf2a88",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "19edc008-e7a3-4383-a95d-e350e0b82db7",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"last_name\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n       \n        \"email\": \"tpA5111111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5211111\",\"PBA5211112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Companyname is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aab5aa37-5455-4693-980d-adf37e008834",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7930d4db-63f0-4801-82ec-47b6894daf58",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of firstname being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"name\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"sraId\": \"TPA5511111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55111\",\n    \"companyUrl\": \"www.trA5511111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"tpA5111111@email.co.uk\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5211111\",\"PBA5211112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Validation of Emailid is mandatory",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5f1387ef-42c3-40d9-8fa8-3d85462dafd1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "74f038a5-1757-432d-a40f-752c2c57e0c1",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of Emailid being mandatory\", function () {",
													"   pm.expect(pm.response.code).to.be.eql(400);",
													"   pm.expect(response).to.include(\"Email cannot be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"One Kiran Thottempudi Limited\",\n    \"sraId\": \"TPA5516111\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"TPA55611\",\n    \"companyUrl\": \"www.trA5516111.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBA5261111\",\"PBA5261112\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Change Organisation status",
							"item": [
								{
									"name": "Pending",
									"item": [
										{
											"name": "PUT Update status of Orgid2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "72684ce1-9a5f-40bc-bf4b-19df8bf37b3a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fe82098b-482f-4c03-b405-31af03fecd72",
														"exec": [
															"pm.test(\"Successful PUT request to update Organisation Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org2\",\n            \"status\": \"PENDING\",\n            \"sraId\": \"Kiransraid2\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp2\",\n            \"companyUrl\": \"www.Kiran2.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg2@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc2011\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 2 organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111112990\",\n                            \"dxExchange\": \"911111292099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid2}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8f24c41-9507-407c-9498-1d599a66ff14",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.organisationIdentifier);",
															"pm.environment.set(\"intEmailidP\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status remained as Pending\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.organisationIdentifier).to.eql(environment.Orgid2);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid2}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Active",
									"item": [
										{
											"name": "PUT Update status of Orgid1 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f479b051-3bc5-495d-9c71-b3085e3be3a9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0e37e41f-c193-493c-81d3-092aef944bcd",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid1 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{DEMO_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Kiran Solicitors\",\n    \"status\":\"Active\",\n    \"sraId\": \"Kirkcsraid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Kirantk1\",\n    \"companyUrl\": \"www.Kiran1.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"praveenext.super@gmail.com\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \n           \"PBATKC1011\",\"PBATKC1021\"\n        \n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"MK4 4DH\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid1}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid1 to Active Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d92a9a16-1f81-42a0-a999-76d5e2032673",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "288f29f0-7ad8-4df6-9571-576368184022",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid1 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran 1 Org1\",\n    \"status\": \"ACTIVE\",\n    \"sraId\": \"Kirans 1raid1\",\n    \"sraRegulated\": true,\n    \"companyNumber\": \"Pravee11\",\n    \"companyUrl\": \"www.Kiran11.com\",\n    \"superUser\": {\n        \"firstName\": \"Kiran\",\n        \"lastName\": \"Thottempudi\",\n        \"email\": \"prashanth.kotla@hmcts.net\",\n         \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n    },\n    \"paymentAccount\": [\n        \"PBAOr11011\",\n        \"PBAOr11121\"\n    ],\n    \"contactInformation\": [\n        {\n            \"addressLine1\": \"No 1 Organisation \",\n            \"addressLine2\": \"Kiran Complex\",\n            \"addressLine3\": \"Maharaj road\",\n            \"townCity\": \"West Kirby\",\n            \"county\": \"Wirral\",\n            \"country\": \"UK\",\n            \"postCode\": \"TEST1\",\n            \"dxAddress\": [\n                {\n                    \"dxNumber\": \"DX 9111111990\",\n                    \"dxExchange\": \"911111192099908492\"\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid1}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid1 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7802446b-56f0-4c79-bc90-89f8d523b3cb",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidA\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Orgid1 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid1}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid5 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "df8053b6-bc8f-484d-9897-b21159183a75",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "882faa30-d8e0-463c-9d9b-f81f9fd48b9e",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid5 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org5\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid5\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp5\",\n            \"companyUrl\": \"www.Kiran5.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg5@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc5011\",\n                \"PBAtpc5021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 5111111990\",\n                            \"dxExchange\": \"511111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid5}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid5 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ba6c8c4-2bbb-4521-b316-dcbaa540199c",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid5 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid5}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid5 Active to Pending",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9c607d70-0725-473f-b2a8-b5bff27a8b3b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f168f10f-8019-4826-a82e-5bdd049335c4",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful -Organisation status cannot be changed from Active to Pending\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status to PENDING since existing organisation status is ACTIVE\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org5\",\n            \"status\": \"PENDING\",\n            \"sraId\": \"Kiransraid5\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp5\",\n            \"companyUrl\": \"www.Kiran5.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg5@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc5011\",\n                \"PBAtpc5021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 5111111990\",\n                            \"dxExchange\": \"511111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid5}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid5 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2df270c-1a32-4dfc-838e-c057e9652e2e",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid5 status remained Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid5}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid7 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aacd141e-74d5-4890-8ff3-2557b80b9aa8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bd850e82-f58a-431c-9b91-72d71aa908a1",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid7 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org7\",\n            \"status\": \"ACTIVE\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg7@email.co.uk\",\n                \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n           \n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\"\n                   \n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid7}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid7 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4f4a8ebc-e402-4420-8629-b90f74c096f6",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid7 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid7}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid7}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid8 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4b0c6e5e-35f3-4fb5-b99b-8e8815ac45a1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1a3ec191-720d-41df-94a6-fa26f76f8392",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid8 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org8\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid8\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp8\",\n            \"companyUrl\": \"www.Kiran8.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg8@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc8011\",\n                \"PBAtpc8021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"PRAV HOME\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid8}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid8 Exp:Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da06dc8f-9fc0-4b04-9382-39c0fea9c373",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"pm.test(\"Successful - Orgid8 status is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid8}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid8}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Blocked",
									"item": [
										{
											"name": "PUT Update status of Orgid3 to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "adaabe95-a720-4f9e-8900-756a7574741f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca8f4876-8b80-42b0-aa40-be1e54ada661",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid3 Status to Active\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp: Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7feb1d91-b16c-4944-b4bc-e6189d1e3577",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid3 is Active\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid3 Active to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2885c76b-a7c9-474a-b516-5843905c435d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4a7e4077-994d-4ae6-bb9a-9f4179628414",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid3 Status from Active to BLOCKED\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp:Blocked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f90f6167-77ab-4c5d-8eb8-9247e64cfcb5",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid3 is Blocked\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"BLOCKED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid3 Blocked to Deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "624735a6-c251-42fc-ae77-939ded40fbbd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a7f876d1-6f67-4d3a-8926-7fcd2fd6e9b3",
														"exec": [
															"pm.test(\"Successful - Organisation status cannot be changed from BLOCKED to Deleted\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org3\",\n            \"status\": \"DELETED\",\n            \"sraId\": \"Kiransraid3\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp3\",\n            \"companyUrl\": \"www.Kiran3.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg3@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"No 3 Organisation\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 9111113990\",\n                            \"dxExchange\": \"911111392099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid3}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using OrgID3 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "116e57a2-0225-4e6c-943a-893ca1a371a9",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid 3 remained BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "ServiceAuthorization",
														"value": "Bearer {{AAT_AUTH_KEY}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{XUI_IDAM_KEY}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid3}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4 to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "65432477-d5e2-4312-99ea-45a3310ba6d9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1c6aa69a-23f9-429f-bb34-e55604ec6027",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid4 to Blocked Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid4 Exp: Blocked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "694e2c58-9d05-4700-ad25-284bc5d347dd",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid4 is BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"BLOCKED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid4}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4  Blocked to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e8344c8-37d4-458d-af51-860d1f1b1cc3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "63e92ba4-ab31-432e-a656-e1ae284e6a00",
														"exec": [
															"",
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Organisation status can be changed from BLOCKED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid4 Exp: Active",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35164d3c-678e-4719-afac-9ef5ba53e74b",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidB\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid4 remained as BLOCKED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"ACTIVE\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid4}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid4 to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "05d10cc4-1a22-4c41-a050-82f863f0a591",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "792cbbd6-bff3-43dc-bffe-b3557e771a20",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid4 to Blocked Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"name\": \"Kiran Org4\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid4\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp4\",\n            \"companyUrl\": \"www.Kiran4.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg4@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc4011\",\n                \"PBAtpc4021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 1111111990\",\n                            \"dxExchange\": \"111111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid4}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Deleted",
									"item": [
										{
											"name": "PUT Update status of Orgid6 to Deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "74229621-58d1-48ec-a8c6-800576511861",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e0f6e8d9-4d3c-46ce-8744-236798f52ba9",
														"exec": [
															"pm.test(\"Successful PUT request to update Orgid6 to Deleted Status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"DELETED\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid6 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b039e25a-5f2e-4712-8f90-6bfe414fa7b5",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status is Deleted\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid6}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid6}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid6 Deleted to Active",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c2a1294c-ae3a-410e-80b5-2b83514abc00",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "444c8eb5-256d-4337-a9a7-687611fb6db6",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status cannot be changed from DELETED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status since existing organisation status is DELETED\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"ACTIVE\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "PUT Update status of Orgid6 Deleted to Blocked",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "46631c2f-834a-48ef-92a5-7aa79fef72f9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d3052a25-ed3e-459b-8baa-99a79f436c0c",
														"exec": [
															"let response = pm.response.text();",
															"console.log(response)",
															"",
															"",
															"pm.test(\"Successful - Orgid6 status cannot be changed from DELETED to ACTIVE\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(400);",
															"    pm.expect(response).to.include(\"Cannot amend status since existing organisation status is DELETED\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\": \"Kiran Org6\",\n            \"status\": \"BLOCKED\",\n            \"sraId\": \"Kiransraid6\",\n            \"sraRegulated\": true,\n            \"companyNumber\": \"Kirantp6\",\n            \"companyUrl\": \"www.Kiran6.com\",\n            \"superUser\": {\n                \"firstName\": \"Kiran\",\n                \"lastName\": \"Thottempudi\",\n                \"email\": \"Kiranorg6@email.co.uk\",\n                 \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n            },\n            \"paymentAccount\": [\n                \"PBAtpc6011\",\n                \"PBAtpc6021\"\n            ],\n            \"contactInformation\": [\n                {\n                    \"addressLine1\": \"1-2-3 high road\",\n                    \"addressLine2\": \"Kiran Complex\",\n                    \"addressLine3\": \"Maharaj road\",\n                    \"townCity\": \"West Kirby\",\n                    \"county\": \"Wirral\",\n                    \"country\": \"UK\",\n                    \"postCode\": \"TEST1\",\n                    \"dxAddress\": [\n                        {\n                            \"dxNumber\": \"DX 6111111990\",\n                            \"dxExchange\": \"611111192099908492\"\n                        }\n                    ]\n                }\n            ]\n        }"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations",
														":orgId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "{{intOrgid6}}"
														}
													]
												},
												"description": "Get an organisation which is in pending status and update it with ACTIVE status"
											},
											"response": []
										},
										{
											"name": "Get Organisation using Orgid6 Exp: Deleted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f4f79b16-c402-4971-adff-e4ae40570b79",
														"exec": [
															"let response = pm.response.json();",
															"console.log(response.status);",
															"pm.environment.set(\"intEmailidD\",response.superUser.email);",
															"",
															"",
															"pm.test(\"Successful - Organisation status of Orgid6 remained as DELETED\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(200);",
															"    pm.expect(response.status).to.include(\"DELETED\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}}"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{XUI_IDAM_KEY}}"
													}
												],
												"url": {
													"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid6}}",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"internal",
														"v1",
														"organisations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{intOrgid6}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve organisations",
							"item": [
								{
									"name": "Get All Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d7c4b18-5068-4fe3-800f-2c2f7b4dec80",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aa2956df-a977-439d-b573-db66699b499f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Active Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0373b90d-6158-444d-ba87-5882f8847f97",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c2f35df-7ced-4db5-805c-300a9e4b8bdb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?status=Active",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Pending Organisations details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc693984-9baf-422f-aef2-5b5f7860c35d",
												"exec": [
													"let response = pm.response.json();",
													"let srch_org1",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid1) {",
													"    console.log(srch);",
													"    srch_org1=srch",
													"    }",
													"}",
													"console.log(srch_org1);",
													"",
													"let srch_org2",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid2) {",
													"    console.log(srch);",
													"    srch_org2=srch",
													"    }",
													"}",
													"console.log(srch_org2);",
													"",
													"let srch_org3",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid3) {",
													"    console.log(srch);",
													"    srch_org3=srch",
													"    }",
													"}",
													"console.log(srch_org3);",
													"",
													"let srch_org4",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid4) {",
													"    console.log(srch);",
													"    srch_org4=srch",
													"    }",
													"}",
													"console.log(srch_org4);",
													"",
													"let srch_org5",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid5) {",
													"    console.log(srch);",
													"    srch_org5=srch",
													"    }",
													"}",
													"console.log(srch_org5);",
													"",
													"",
													"let srch_org6",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid6) {",
													"    console.log(srch);",
													"    srch_org6=srch",
													"    }",
													"}",
													"console.log(srch_org6);",
													"",
													"let srch_org7",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid7) {",
													"    console.log(srch);",
													"    srch_org7=srch",
													"    }",
													"}",
													"console.log(srch_org7);",
													"",
													"let srch_org8",
													"for (let srch  of response.organisations) {",
													"   ",
													"if (srch.organisationIdentifier == environment.intOrgid8) {",
													"    console.log(srch);",
													"    srch_org8=srch",
													"    }",
													"}",
													"console.log(srch_org8);",
													"",
													"",
													"",
													"pm.test(\"Successful GET request to retrieve Organisations\", function () {",
													"    pm.expect(srch_org1.organisationIdentifier).to.eql(environment.intOrgid1);",
													"    pm.expect(srch_org2.organisationIdentifier).to.eql(environment.intOrgid2);",
													"    pm.expect(srch_org3.organisationIdentifier).to.eql(environment.intOrgid3);",
													"    pm.expect(srch_org4.organisationIdentifier).to.eql(environment.intOrgid4);",
													"    pm.expect(srch_org5.organisationIdentifier).to.eql(environment.intOrgid5);",
													"    pm.expect(srch_org6.organisationIdentifier).to.eql(environment.intOrgid6);",
													"    pm.expect(srch_org7.organisationIdentifier).to.eql(environment.intOrgid7);",
													"    pm.expect(srch_org8.organisationIdentifier).to.eql(environment.intOrgid8);",
													"    ",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ce6442b-f418-46ab-9fc2-ef46471f08a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?status=Pending",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "status",
													"value": "Pending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation using OrgID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99c89d1b-0450-4ca0-8547-9f2db0febcf6",
												"exec": [
													"let response = pm.response.json();",
													"console.log(response.organisationIdentifier)",
													"",
													"",
													"",
													"pm.test(\"Successful - Organisation Info retrieved using Organisation Identifier\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"    pm.expect(response.organisationIdentifier).to.eql(environment.Orgid1);",
													"  });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "ServiceAuthorization",
												"value": "Bearer {{DEMO_AUTH_KEY}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?id={{intOrgid1}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "id",
													"value": "{{intOrgid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation using non-existing Orgid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c7bbe60-bb6f-4025-a3d8-be09c753d836",
												"exec": [
													"let response = pm.response.json();",
													"console.log(response.organisationIdentifier)",
													"",
													"",
													"pm.test(\"Successful Test - Organisation Identifier:Kiran does not exist\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations?id=Kiran",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations"
											],
											"query": [
												{
													"key": "id",
													"value": "Kiran"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Users Demo",
							"item": [
								{
									"name": "Get All users from an Organisation in Pending Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fb9e43e-fcb5-42a2-ad71-66cdc9a858c7",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Pending status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "337b0c6e-fcea-4be3-858d-9d1b9f0d3749",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d72ba63-b2cf-4df5-9dd6-35af9326e744",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ff7e3a0-d36c-4a3d-8cd6-d75e22a4a907",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users of an Organisation that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7757af3b-f760-411c-ac71-f064b186211b",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a003b543-9772-4cfa-9f2e-1bb35d962066",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "Praveen"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Active Status (UP data different to PRD)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3db30fde-3eff-48d0-ba8b-c77e0ba3a2f8",
												"exec": [
													"pm.test(\"Successful: Get All users from an Organisation in Active Status.Data difference between PRD and UP\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee9ceb2f-1ba6-43fa-9de9-d306b5a1e536",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid7}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Blocked Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50967004-0242-47e6-b0ee-dd54d7706189",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f19ebf63-27fc-4b82-b41b-30fa250d35a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{XDEMO_IDAM_KEYI_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid4}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Deleted Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3127987-0e5b-46ba-be59-1a58eb78fe4c",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64790694-c8c0-44f1-9161-04cc3db9d7a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid6}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92881673-8c0a-4929-bbae-8aa7cc3ecd30",
												"exec": [
													"pm.test(\"Successful: Get User info  using email from Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78dc05b7-ae2d-4f53-971b-fb16edfe1494",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidA}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidA}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using non existing email from an Organisation in Active Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2d834cd-2ac7-4e3d-b403-492d7705bcea",
												"exec": [
													"pm.test(\"Successful: Get User info  using email from Organisation in Active Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "439f1b93-c7e7-4b5c-a71d-ebdeacb99a8a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email=praveen@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveen@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Pending Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a461f53d-c168-4b3f-9021-c497b2ab49e2",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Pending status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b02ba194-6547-47fd-bb0f-c1ee3a1e302c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidP}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidP}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Blocked Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c2a4923-47a4-45c5-9724-4ea4c040ebd7",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "539d699d-d675-4fd6-b9f3-4ac097369155",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidB}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidB}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using email from Organisation in Deleted Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15e9da4f-bfc7-4011-a97f-71e34b600b9f",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e57c769-4ca4-4aa7-8ee6-96471b46991a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email={{intEmailidD}}",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{intEmailidD}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  using non existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b388736c-aad8-4846-a361-31b1db3ba857",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the user(emailid) does not exist in UP \", function () {",
													"    pm.expect(pm.response.code).to.be.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ddea9b20-cad4-4fec-ab5f-b6cfa5d4aa39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/users?email=poraveen@gmail.co.uk",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "poraveen@gmail.co.uk"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organisation Users using Active Org ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "972cdc9a-9900-4ede-b4ae-9537e595907e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "283d92dc-ec7d-4915-ab6c-fe5c4acc3a70",
												"exec": [
													"",
													"pm.test(\"Successful GET request to retrieve User info using Organisation Identifier \", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users"
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "AC1:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd NO Request parameter is included (i.e. the Endpoint does not contain, showdeleted={True/False})\n      Then list of professional users, excluding the 'Deleted' ones', is returned\n      AND HTTP status is returned 200\n \nAC2:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd there is NO Organisation for the given Organisation ID\n      Then HTTP status is returned 404\n \nAC3: (to be tested as part of RDCC - 207 - here for reference only so that the story makes sense)\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd the Request parameter is set to 'True'\n      Then list of all the professional users, including the 'Deleted' ones', is returned\n      AND HTTP status is returned 200\n \nAC4:\nGiven a request to view all professional users for a given organisation\nWhen the request is received\nAnd the Organisation 'status' is NOT 'active'     \nThen NO users will be returned (only an empty list of Users will be shown)\n      AND HTTP status is returned 200\n "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Users-PRD",
							"item": [
								{
									"name": "Add user to an organisation in Pending status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8480f7fc-63a6-4261-9a2f-3e2b15e0813b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e0d64c6-4d31-4794-9b3f-537df464597e",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Pending Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"value": "Bearer {{XUI_IDAM_KEY}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kuserorg2@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ], \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"query": [
												{
													"key": "Status",
													"value": "Pending",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid2}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with all roles",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c5d5cdf-5dcd-4bda-b8f9-6f2338e12958",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e332fc1-3267-48d6-af2a-6d52bb4c241e",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran kakatiya Test2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-case-manager\"\n   \n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user with invalid email to an organisation in Active status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fed821f9-fd01-4079-903a-180f459066e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a140477-ef03-43ed-8aff-8d67c71be778",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg@1@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation  that does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea9e3a51-2eba-4acf-9421-13c76898fe4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2f3862c4-0128-4e26-a0e1-e74a27b45daf",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\"\n   \n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "Praveen"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_user_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c8d8b21-2307-49da-a692-c284308abf59",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8835a02a-ac9e-4d9b-8fac-450276522cae",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid2\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid2 with pui_user_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran pum\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pum@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_organisation_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64a98797-36a9-425b-8917-dfb3f84d679c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7eaae476-2d12-4228-a834-1c2c0f2d52a9",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid4\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid4 with pui_organisation_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pom@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-organisation-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid5}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status- with pui_case_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b25826-3241-47ef-861f-2727af1e50ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ac169ef0-bf89-47e5-9c7d-ae1690d95da1",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid5\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid5 with pui_case_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pcm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-case-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation in Active status-with pui_finance_manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b5c7126d-4523-4470-99f7-b43ba51b2e72",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef59de17-60ce-4a09-8ad3-68d98344970b",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid6\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid6 with pui_finance_manager role to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveen.c.thottempudi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid7}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an Organisation  in Blocked status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "734b1c39-d590-4979-9b3d-2419bf1f5133",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3b5cea82-ac6a-4be5-9a93-a8fd0a224636",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Blocked Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kusr000008@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid3}}"
												}
											]
										},
										"description": "(Email id same as another user within the same organisation"
									},
									"response": []
								},
								{
									"name": "Add user to an Organisation in Deleted status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fadf2262-c0c6-4640-91f1-610ba85aaff0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ee3453f2-2f83-4d22-a864-e849bfcea62e",
												"exec": [
													"pm.test(\"Successful: Cannot add a user to a Organisation in Deleted Status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kuser6pum@email.co.uk\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid6}}"
												}
											]
										},
										"description": "(Email id same as another user of different organsiation)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add user again to the same Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6ffe015f-b98f-4625-83e3-c236564d39df",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "89a4e38e-ff9a-4fbf-8996-4ab4d09b856f",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of User(email_id) must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg1@gmail.co.uk\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n   ],\n    \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add a orgadmin of an Organisation as a user to different Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36688962-3481-4b86-b749-3b723eebb371",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "410d8180-0544-4bff-b224-ac1b508bfa7f",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"{{Emailid1}}\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ], \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								},
								{
									"name": "Duplicate User Validation: Add a user of an Organisation to different Org",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a0051284-2d90-4b15-9bbf-82c3157fbbed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e38e220c-aea1-42c4-bee0-0a466cfd6caf",
												"exec": [
													"let response = pm.response.text();",
													"console.log(response)",
													"",
													"pm.test(\"Successful Validation of email_id must be unique\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(409);",
													"    pm.expect(response).to.include(\"User with this email already exists\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{AAT_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{XUI_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Kiran1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kuserorg1@email.co.uk\",\n  \"roles\": [\n    \"pui-user-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "(Email id same as another superuser)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Modify roles",
							"item": [
								{
									"name": "Add user to an organisation-rdcc-528-kaka",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5ee83e84-d73d-4e3c-b2a8-2d9082e26eb3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf3340dc-896e-462a-bb86-fa24b6124f7b",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"KiranTIDAMTest2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"kakatiyalimited@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Add user to an organisation -rdcc-528-tpchy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3f53e770-84af-4910-a40e-3f27c1c1023f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3355dfa8-278d-41b0-9b39-d372894ae895",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"KiranTIDAMTest2\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\"\n  ],\n   \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:OrgID/users/",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":OrgID",
												"users",
												""
											],
											"variable": [
												{
													"key": "OrgID",
													"value": "{{intOrgid1}}"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add role",
							"item": [
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9da88c2d-dcc3-4516-8b6e-ef6806f839bf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f51fade-3da3-4609-84d2-aecf40411158",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":orgId",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "K55PY9N"
												},
												{
													"key": "userId",
													"value": "e6fbf3b0-c118-491f-8598-12be1c3483aa"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD PUM role to an active user RDCC_503",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e667d78e-71b3-4d87-803c-fcbe34a3f224",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77fa5a94-8db3-4fea-9ce7-d8c1fa423814",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/:orgId/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												":orgId",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "K55PY9N"
												},
												{
													"key": "userId",
													"value": "e6fbf3b0-c118-491f-8598-12be1c3483aa"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete role",
							"item": [
								{
									"name": "Delete POM role to an active user RDCC_453",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "96a0a102-7449-4c74-83af-b0f742a1af40",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33a9da58-1040-47a1-a6d0-835c9cab2b84",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/K55PY9N/users/8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"K55PY9N",
												"users",
												"8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "202846bf-9ccd-4dac-9345-274153db99a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de19ac21-f85f-4888-a0b3-7f48c1e9c62d",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{DEMO_ADMIN_AO_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/internal/v1/organisations/K55PY9N/users/8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"internal",
												"v1",
												"organisations",
												"K55PY9N",
												"users",
												"8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "External",
					"item": [
						{
							"name": "Retrieve Users",
							"item": [
								{
									"name": "Get All users from an Active Organisation using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "339bcac4-f26a-4451-8ea3-073322dc4267",
												"exec": [
													"pm.test(\"Successful: Superuser token - All users of the organisation are retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06050583-4e81-4758-a008-17a44dc99018",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Super_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?status=Active&showdeleted= True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												},
												{
													"key": "showdeleted",
													"value": " True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using Multi  role user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43d67386-e713-478b-87cb-8925b2fb992a",
												"exec": [
													"pm.test(\"Successful: Multi role token - All users of the organisation are retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9cd329e6-17f8-4572-8c53-66122cf26d51",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Multi_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?status=Active&showdeleted= True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "Active"
												},
												{
													"key": "showdeleted",
													"value": " True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PUM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50c8a20a-fd15-4737-9cc1-be526c5a2fed",
												"exec": [
													"pm.test(\"Successful: PUM token - All users of the organisation are displayed\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c52428fa-a0cc-4182-bbf7-f436a206aee8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PCM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5004ad1-d00b-4850-a51e-3ce85aa4883a",
												"exec": [
													"pm.test(\"Successful: PCM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2acae483-0fb4-4e35-9f4c-c2bbb837ae4d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?showdeleted =True",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "pending",
													"disabled": true
												},
												{
													"key": "showdeleted ",
													"value": "True"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using PFM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ed191b8-b9f8-4687-9edb-a10266d87fef",
												"exec": [
													"pm.test(\"Successful: PFM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a9d0366-2ee4-4509-a9bf-73cc6cb010e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PFM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Active Organisation using POM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90ab71ec-af0e-4f84-99b8-aa54d5cbad31",
												"exec": [
													"pm.test(\"Successful: POM token - Not authorized to retrieve users info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e80b82e-f435-40a5-be88-ea86438f88a5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{POM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Blocked Status using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "715e59a8-a60d-4cff-b4ca-003242af9c71",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Blocked status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4411f35e-8876-425b-9320-3633d181a3d3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{BLKD_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All users from an Organisation in Deleted Status using Super user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91d1fe6a-32e8-49d2-8891-746d00fcb8d3",
												"exec": [
													"pm.test(\"Successful: Userinfo cannot be displayed as the organisation is in Deleted status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39377b41-1010-4bc7-a416-7b1237b2ff5b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{DLTD_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Super user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a06befff-a20d-44ad-92d8-b9efe3463b80",
												"exec": [
													"pm.test(\"Successful: Superuser token - Super user info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a585acf3-ef1d-4fa8-8eef-f8cc37278801",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Super_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.super@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.super@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Super user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e42dd922-8bc6-46e9-a25a-e10ebeffff82",
												"exec": [
													"pm.test(\"Successful: Superuser token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06e0578f-51b7-4302-8002-c5ce20d39301",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Super_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Multi role user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6416586f-3149-41e4-a621-105cdb3c5ffa",
												"exec": [
													"pm.test(\"Successful: Multi role token - Multirole user info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12b62734-306f-43c9-b955-a9712490eb31",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Multi_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.multi@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.multi@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using Multi role user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4292ff18-7f5d-40b8-9e90-84821b977156",
												"exec": [
													"pm.test(\"Successful: Multirole token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0d6d9c7-593c-4f6f-855a-753451ff4d90",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{Multi_IDAM_KEY}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PUM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e49837c7-5a75-440e-ad2c-8de01830f6f5",
												"exec": [
													"pm.test(\"Successful: PUM token - PUM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c849fbc9-8df1-47af-9543-31bb63224a4b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pum@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pum@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PUM user Token-others users email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eddb8549-0c17-4a1c-9687-aa3186455bec",
												"exec": [
													"pm.test(\"Successful: PUM token - PCM  info is retrieved\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f23b6fc2-c13f-47de-b273-07fe5f0a7ca4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pcm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pcm@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using POM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95d53137-6220-47e0-81f1-1e116bfd9a3d",
												"exec": [
													"pm.test(\"Successful: POM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7629ee3a-571f-45a2-857b-c2e92a6b4931",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{POM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pom@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pom@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PFM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee536c2d-eaf1-4460-8fdd-30ba825366a8",
												"exec": [
													"pm.test(\"Successful: PFM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ff472bfb-6cbd-4730-90be-d8bf1172542c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PFM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pfm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pfm@gmail.com"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User info  of an ACT Org using PCM user Token-self email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eade1f16-c4af-4a2a-a9ea-6e36a36346ca",
												"exec": [
													"pm.test(\"Successful: PCM token - Not authorised to retrieve user info\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c3258ef-9baf-454b-a69a-30c844bd7691",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users?email=praveenext.pcm@gmail.com",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "praveenext.pcm@gmail.com"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Users",
							"item": [
								{
									"name": "Add users using Super user token",
									"item": [
										{
											"name": "User does not exist in SIDAM",
											"item": [
												{
													"name": "Add user to an organisation in Active status-with multiple roles",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "850a538b-33a0-4d3b-9cd2-860b702a6b56",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f3b7c456-daf3-4fc1-aca3-9a9379caacc8",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"S_Multiuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Superuser token: Successful add user  with multiple roles to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\",\n    \"caseworker-probate\",\n\t\"caseworker-probate-solicitor\"\n    ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation validate email address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "81fab992-2c95-4403-b1af-a9c339f8af8d",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4436b824-dfb0-41f8-8fd4-cb870b2ca01b",
																"exec": [
																	"let response = pm.response.json();",
																	"",
																	"pm.test(\"Superuser token: Successful validation of email format\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail@.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with POM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "10f474fe-5da7-43c4-bd87-9c2188ef4aed",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "907bb519-643e-46b9-91a5-9b00aefbdf5c",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"POMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user  with POM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pom@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \n    \"pui-organisation-manager\"\n    ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PFM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "02cea7fc-f377-4601-ae2d-6db46b56f2d3",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b55b0ee1-be11-4056-a3ed-0908144c5464",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PFMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user  with PFM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pfm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \n    \"pui-finance-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PUM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "fc9d13ab-a979-4597-9e04-c38a463fe2a0",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f5a5ee00-ce70-4ec1-9d5f-44c99780f534",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PUMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user with PUM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pum@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n  \"caseworker-probate\",\n\"caseworker-probate-solicitor\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an organisation in Active status-with PCM role",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5a0599ae-a2f2-492b-af98-9ba7b25b4d39",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6e54f912-2620-45ea-b0c8-00e839a3e7d8",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PCMuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful add user with PCM role to an Organisation in Active status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(201);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{DEMO_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.pcm@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-case-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												},
												{
													"name": "Add user to an Organisation  in Blocked status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3702ca93-79d4-4962-b10a-b4268b1c987f",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2e00d49b-78b3-41b3-a9a0-f1c07b89133b",
																"exec": [
																	"pm.test(\"Successful: Cannot add a user to a Organisation in Blocked Status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{BLKD_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenblocked@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [\n    \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-case-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another user within the same organisation"
													},
													"response": []
												},
												{
													"name": "Add user to an Organisation in Deleted status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3bb2474f-a5b2-4a0a-8b67-42240d55d762",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "311d5542-c42a-464d-9a34-f550dad6a517",
																"exec": [
																	"pm.test(\"Successful: Cannot add a user to a Organisation in Deleted Status\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(400);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{DLTD_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein1\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveendeleted@gmail.com\",\n  \"roles\": [\n    \"pui-user-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another user of different organsiation)"
													},
													"response": []
												},
												{
													"name": "Duplicate User Validation: Add user again to the same Org",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ce3c90db-5efe-4650-99e4-1b2267aa884a",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a86f49f9-30c5-4cb8-8421-2abd16c1ac7b",
																"exec": [
																	"let response = pm.response.text();",
																	"console.log(response)",
																	"",
																	"pm.test(\"Successful Validation of User(email_id) must be unique\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(409);",
																	"    pm.expect(response).to.include(\"User with this email already exists\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.multi@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another superuser)"
													},
													"response": []
												},
												{
													"name": "Duplicate User Validation: Add a Orgadmin of an Organisation as a user to different Org",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "68abdabc-8b84-43c7-b811-5666149f6ecb",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "0fe9368f-e047-44d1-9ea5-d3209e680faa",
																"exec": [
																	"let response = pm.response.text();",
																	"console.log(response)",
																	"",
																	"pm.test(\"Successful Validation of email_id must be unique\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(409);",
																	"    pm.expect(response).to.include(\"User with this email already exists\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"praveenext.blkd@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "(Email id same as another superuser)"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User does exist in SIDAM",
											"item": [
												{
													"name": "Add user to an organisation in Active status-with multiple roles",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f8eb3ae0-3506-484f-836f-584755e48b18",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "7f3f3d25-3117-46ad-b57d-a06d1b4df421",
																"exec": [
																	"",
																	"//delete the user in PRD and UP before submiting this request.",
																	"",
																	"let response = pm.response.json();",
																	"pm.environment.set(\"Multiuserid1\",response.userIdentifier);",
																	"",
																	"pm.test(\"Successful Get Org information using Superuser token\", function () {",
																	"    pm.expect(pm.response.code).to.be.eql(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "ServiceAuthorization",
																"type": "text",
																"value": "Bearer {{AAT_AUTH_KEY}} "
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{Super_IDAM_KEY}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"tpchy1974@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\",\n    \"caseworker-divorce\",\n                \"caseworker-divorce-solicitor\",\n                \"caseworker-divorce-financialremedy\",\n                \"caseworker-divorce-financialremedy-solicitor\"\n ],\n          \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     } ]\n}"
														},
														"url": {
															"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
															"host": [
																"{{Testhost}}"
															],
															"path": [
																"refdata",
																"external",
																"v1",
																"organisations",
																"users",
																""
															]
														},
														"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using POM token",
									"item": [
										{
											"name": "POM",
											"item": [
												{
													"name": "POM_PRD",
													"item": [
														{
															"name": "Demo POM Get SIDAM Authorisation token PartA",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ac0a2a29-9550-40c8-8436-d8b9611b652c",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																			"console.log(response.code)",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"type": "text",
																		"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/x-www-form-urlencoded"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "rd-professional-api",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
																			"type": "text"
																		},
																		{
																			"key": "response_type",
																			"value": "code",
																			"type": "text"
																		},
																		{
																			"key": "scope",
																			"value": "openid profile roles openid roles profile create-user manage-user",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"authorize"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														},
														{
															"name": "Demo POM Get SIDAM Authorisation token PartB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2a5fefca-1f72-4533-a909-f846b16404d4",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
																			"",
																			"",
																			"",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"value": "application/x-www-form-urlencoded",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "{{BASE64_2}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "rd-professional-api",
																			"type": "text"
																		},
																		{
																			"key": "client_secret",
																			"value": "cc5f2a6-9690-11e9-bc42-526af7764f64",
																			"type": "text"
																		},
																		{
																			"key": "code",
																			"value": "{{IDAM_CODE_PARTA}}",
																			"type": "text"
																		},
																		{
																			"key": "grant_type",
																			"value": "authorization_code",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://rd-professional-api-demo.service.core-compute-demo.internal/oauth2redirect",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"token"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "POM_XUI",
													"item": [
														{
															"name": "Demo POM Get SIDAM Authorisation token PartA",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0335a855-59ca-4244-91cd-b17070b58d47",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																			"console.log(response.code)",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"type": "text",
																		"value": "Basic cHJhdmVlbmV4dC5wb21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/x-www-form-urlencoded"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "xuiaowebapp",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																			"type": "text"
																		},
																		{
																			"key": "response_type",
																			"value": "code",
																			"type": "text"
																		},
																		{
																			"key": "scope",
																			"value": "openid profile roles openid roles profile create-user manage-user",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"authorize"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														},
														{
															"name": "Demo POM Get SIDAM Authorisation token PartB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ee4c23bc-0f5c-400d-b352-19e23034aa95",
																		"exec": [
																			"let response = pm.response.json();",
																			"pm.environment.set(\"POM_IDAM_KEY\",response.access_token);",
																			"",
																			"",
																			"",
																			"",
																			"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"value": "application/x-www-form-urlencoded",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "{{BASE64_2}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "xuiaowebapp",
																			"type": "text"
																		},
																		{
																			"key": "client_secret",
																			"value": "yB71mnPeypP3HlcN",
																			"type": "text"
																		},
																		{
																			"key": "code",
																			"value": "{{IDAM_CODE_PARTA}}",
																			"type": "text"
																		},
																		{
																			"key": "grant_type",
																			"value": "authorization_code",
																			"type": "text"
																		},
																		{
																			"key": "redirect_uri",
																			"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
																	"protocol": "https",
																	"host": [
																		"idam-api",
																		"demo",
																		"platform",
																		"hmcts",
																		"net"
																	],
																	"path": [
																		"oauth2",
																		"token"
																	]
																},
																"description": "Get SIDAM bearer token"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f6ad8b58-7f36-49d9-a94c-aedd5f391237",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "05349c41-39e8-463d-83c1-2da22bceb358",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"POM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: POM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{POM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pomext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PFM token",
									"item": [
										{
											"name": "PFM",
											"item": [
												{
													"name": "Demo PFM Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f5b14325-7dc6-41a9-93bd-a601c4eeba8f",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5wZm1AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo PFM Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "758062a6-627b-43ac-a7d6-dc130b589f45",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PFM_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eab2a535-89e9-4168-b232-07328d31af24",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d54d727d-25ce-40e1-82b8-997e332be650",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PFM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PFM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PFM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pfmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PUM token",
									"item": [
										{
											"name": "Add user to an organisation in Active status-with PUM role",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b17193c8-76a5-4e1d-b965-d70eedab8e40",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01cd43cf-5dca-435b-bb5b-c599b89ac000",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{DEMO_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PUM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmex1t@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using PCM token",
									"item": [
										{
											"name": "PCM",
											"item": [
												{
													"name": "Demo PCM Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "eaceb466-9c34-477d-939e-45eccf9507f8",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5wY21AZ21haWwuY29tOmhtY3RzMkFsZGdhdGU="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo PCM Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "27f686de-4363-4094-9678-de027d993ef8",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"PCM_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles Copy Copy Copy Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5113bbe0-410c-47b9-b271-8c0a4006a2bb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "20bce9a1-d187-49d8-abb1-4ff682d56efe",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{PCM_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add users using Multi token",
									"item": [
										{
											"name": "Multi user",
											"item": [
												{
													"name": "Demo Multi Get SIDAM Authorisation token PartA",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "722aa36e-e34c-4b62-bfc0-cb0d6eb84da7",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"IDAM_CODE_PARTA\",response.code);",
																	"console.log(response.code)",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_CODE_PARTA\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Basic cHJhdmVlbmV4dC5tdWx0aUBnbWFpbC5jb206aG1jdHMyQWxkZ2F0ZQ=="
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																},
																{
																	"key": "response_type",
																	"value": "code",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "openid profile roles openid roles profile create-user manage-user",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/authorize",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"authorize"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												},
												{
													"name": "Demo Multi Get SIDAM Authorisation token PartB",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "957203c7-9fe7-47a1-a646-eed22b1beedd",
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"Multi_IDAM_KEY\",response.access_token);",
																	"",
																	"",
																	"",
																	"",
																	"pm.test(\"Successful POST request to get IDAM_KEY\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{BASE64_2}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "client_id",
																	"value": "xuiaowebapp",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "yB71mnPeypP3HlcN",
																	"type": "text"
																},
																{
																	"key": "code",
																	"value": "{{IDAM_CODE_PARTA}}",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "authorization_code",
																	"type": "text"
																},
																{
																	"key": "redirect_uri",
																	"value": "https://xui-ao-webapp-demo-service.core-compute-demo.internal/oauth2/callback",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://idam-api.demo.platform.hmcts.net/oauth2/token",
															"protocol": "https",
															"host": [
																"idam-api",
																"demo",
																"platform",
																"hmcts",
																"net"
															],
															"path": [
																"oauth2",
																"token"
															]
														},
														"description": "Get SIDAM bearer token"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add user to an organisation in Active status-with multiple roles Copy Copy Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bc1c839c-ba60-4dc7-8ca9-af914c895c1c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "79042dec-7ab9-40a8-a238-3e711df02b8a",
														"exec": [
															"let response = pm.response.json();",
															"pm.environment.set(\"PCM_Multiuserid1\",response.userIdentifier);",
															"",
															"pm.test(\"Successful Test: PCM token - Cannot add user to an Organisation in Active status\", function () {",
															"    pm.expect(pm.response.code).to.be.eql(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "ServiceAuthorization",
														"type": "text",
														"value": "Bearer {{AAT_AUTH_KEY}} "
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{Multi_IDAM_KEY}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"firstName\": \"Kravein4\",\n  \"lastName\": \"Thottempudi\",\n  \"email\": \"Kiranext.pcmext@gmail.com\",\n  \"status\": \"PENDING\",\n  \"roles\": [  \"pui-user-manager\",\n    \"pui-organisation-manager\",\n    \"pui-finance-manager\"\n    ],\n     \"jurisdictions\": [\n     {\n       \"id\": \"Divorce\"\n     },\n     {\n       \"id\": \"SSCS\"\n     },\n     {\n       \"id\": \"Probate\"\n     },\n     {\n       \"id\": \"Public Law\"\n     },\n     {\n       \"id\": \"Bulk Scanning\"\n     },\n     {\n       \"id\": \"Immigration & Asylum\"\n     },\n     {\n       \"id\": \"Civil Money Claims\"\n     },\n     {\n       \"id\": \"Employment\"\n     },\n     {\n       \"id\": \"Family public law and adoption\"\n     },\n     {\n       \"id\": \"Civil enforcement and possession\"\n     }\n   ]\n}"
												},
												"url": {
													"raw": "{{Testhost}}/refdata/external/v1/organisations/users/",
													"host": [
														"{{Testhost}}"
													],
													"path": [
														"refdata",
														"external",
														"v1",
														"organisations",
														"users",
														""
													]
												},
												"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add roles",
							"item": [
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "32477174-cb55-4711-b6f1-d156ea2cd9d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c36ac89-75ac-4e6c-a5d6-951b16a57864",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "04bceeb5-ba00-438c-b079-585f624339e2"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD PUM role to an active user RDCC_503",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cb9a233-e8d9-4511-afd2-4c9ac4affd72",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "227e1d10-b7af-4739-b228-86f204761082",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "04bceeb5-ba00-438c-b079-585f624339e2"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_452",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fcf1f214-8fd4-4174-8123-9cf9091aff1f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a76c6748-77dd-478d-b3ab-be43f5068e4d",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "8e23f2e3-b5a1-4fb1-9eaf-3246e35f7524"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_452 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3c42cfea-fe80-4a0d-a186-041655a7cabd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bde5464-11aa-4d50-9269-7b818ccf16ad",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "ADD POM role to an active user RDCC_503 using PCM token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "665bdfe8-8673-48a5-9e58-79a16fa5c023",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "668dd41e-82c4-43c9-993f-7292108d93c5",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"rolesAdd\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete roles",
							"item": [
								{
									"name": "Delete POM role to an active user RDCC_453",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d45b491-82f4-47c4-8278-fcab6ec6ac26",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "319317f2-a0cf-4e08-870f-b35698662387",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/04bceeb5-ba00-438c-b079-585f624339e2",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"04bceeb5-ba00-438c-b079-585f624339e2"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b27a3ef-4307-4339-8555-cd8e2a1b816a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "62557ee0-c627-4058-8108-f0df3a61f375",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PUM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-user-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/04bceeb5-ba00-438c-b079-585f624339e2",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"04bceeb5-ba00-438c-b079-585f624339e2"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete POM role to an active user RDCC_453 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "360708eb-7fe1-4d7c-9406-d285fb39f227",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ca2c4e3-4f54-4bb4-b6fa-7545fa944e5b",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/256d2169-9133-43ad-a072-cd8cabcd9df5",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												"256d2169-9133-43ad-a072-cd8cabcd9df5"
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								},
								{
									"name": "Delete PUM role to an active user RDCC_454 Negative",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eba3536c-9335-4244-823f-0a69d9c57dca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4072cbd-7829-49c0-9382-48729f346276",
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"intUserid1\",response.userIdentifier);",
													"",
													"pm.test(\"Successful Add Userid1  with all roles to an Organisation in Active status\", function () {",
													"    pm.expect(pm.response.code).to.be.eql(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "ServiceAuthorization",
												"type": "text",
												"value": "Bearer {{DEMO_AUTH_KEY}} "
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{PCM_IDAM_KEY}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"rolesDelete\": [\n   {\n     \"name\": \"pui-organisation-manager\"\n   }\n ]\n}"
										},
										"url": {
											"raw": "{{Testhost}}/refdata/external/v1/organisations/users/:userId",
											"host": [
												"{{Testhost}}"
											],
											"path": [
												"refdata",
												"external",
												"v1",
												"organisations",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "256d2169-9133-43ad-a072-cd8cabcd9df5"
												}
											]
										},
										"description": "Create an organisation you need to have the following CONSTRAINTS\n\nattributes unique\n\nPBA_NUMBER\nEMAIL_ADDRESS\nSRA_ID\nCOMPANY_NUMBER\nCOMPANY_URL\n\nATTRIBUTES NONNULLABLE:\nADDRESS_LINE1\nDX_EXCHANGE\nDX_NUMBER\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25aefe0d-670f-4385-8e71-eb33fec9518b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ffcc89c1-b27c-4c4e-a965-2d86c70a518a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}