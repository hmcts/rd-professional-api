#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

properties([
        parameters([
                string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test')
        ])
])


def type = "java"
def product = "rd"
def component = "professional-api"
def secretId = "rd-" + params.ENVIRONMENT

def secrets = [
  's2s-${env}': [
            secret('microservicekey-rd-professional-api', 'S2S_SECRET')
  ],
  (secretId): [
            secret('LD-SDK-KEY', 'LD_SDK_KEY')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

withPipeline(type, product, component) {
  
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableDbMigration('rd')
    disableLegacyDeployment()
    enableAksStagingDeployment()

    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"

    before('functionalTest:preview') {
        env.execution_environment = "preview"
    }

    before('functionalTest:aat') {
        env.execution_environment = "aat"
    }

    after('integrationTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('integrationTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enablePactAs([
            AppPipelineDsl.PactRoles.CONSUMER
    ])

}
