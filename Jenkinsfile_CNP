#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl


def type = "java"
def product = "rd"
def component = "professional-api"

def prSecrets = [
  's2s-${env}': [
   secret('microservicekey-rd-professional-api', 'S2S_SECRET')
  ]
]

def nonPrSecrets = [
  's2s-${env}': [
    secret('microservicekey-rd-professional-api', 'S2S_SECRET')
  ],
  'rd-${env}': [
   secret('professional-api-POSTGRES-HOST', 'FUNC_DATABASE_HOST'),
   secret('professional-api-POSTGRES-PASS', 'FUNC_DATABASE_PASS'),
   secret('professional-api-POSTGRES-USER', 'FUNC_DATABASE_NAME'),
   secret('professional-api-POSTGRES-DATABASE', 'FUNC_DATABASE_USER')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

withPipeline(type, product, component) {
  
    overrideVaultEnvironments(vaultOverrides)

    onPR() {
        loadVaultSecrets(prSecrets)
    }
    onNonPR() {
        loadVaultSecrets(nonPrSecrets)
    }

    enableDbMigration('rd')
    disableLegacyDeployment()
    enableAksStagingDeployment()

    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"

    after('integrationTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('integrationTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    before('functionalTest:preview') {
        withAksClient('nonprod') {
            def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
            env.FUNC_DATABASE_HOST = dockerImage.getAksServiceName().toLowerCase()"-postgresql"
            println ${env.FUNC_DATABASE_HOST}
        }

    }

    enablePactAs([
            AppPipelineDsl.PactRoles.CONSUMER
    ])

}
