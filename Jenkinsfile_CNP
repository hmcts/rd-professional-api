#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "rd"
def component = "professional-api"
/* The below Key Vault secrets will be used for functional and smoke tests */
def secrets = [
        's2s-${env}': [
                secret('microservicekey-rd-professional-api', 'PROFESSIONAL_API_S2S_SECRET')
        ],
        'rd-${env}' : [
                secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
                secret('rd-prd-storage-account-name', 'ACCOUNT_NAME'),
                secret('rd-prd-storage-account-primary-key', 'ACCOUNT_KEY'),
                secret('OAUTH2-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET'),
                secret('OAUTH2-CLIENT-AUTH', 'OAUTH2_CLIENT_AUTH'),
                secret('OAUTH2-CLIENT-ID', 'OAUTH2_CLIENT_ID'),
                secret('LD-SDK-KEY', 'LD_SDK_KEY')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
        'preview' : 'aat',
        'spreview': 'saat'
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'perftest']

// Var for testcontainers.org
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = 'pact-broker.platform.hmcts.net'
env.PACT_BROKER_SCHEME = 'https'
env.PACT_BROKER_PORT = '443'


withPipeline(type, product, component) {

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableDbMigration('rd')
    disableLegacyDeployment()
    enableAksStagingDeployment()
    
    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"

    before('functionalTest:preview') {
        env.execution_environment = "preview"
        env.TEST_URL = "http://rd-professional-api-preview.preview.hmcts.platform.net"
    }

    before('functionalTest:aat') {
        env.execution_environment = "aat"
        env.TEST_URL = "http://rd-professional-api-aat.aat.hmcts.platform.net"
    }

    before('smoketest:preview') {
        env.execution_environment = "preview"
        env.TEST_URL = "http://rd-professional-api-preview.preview.platform.hmcts.net"
    }

    before('smoketest:aat') {
        env.execution_environment = "aat"
        env.TEST_URL = "http://rd-professional-api-aat.aat.platform.hmcts.net"
    }

    // Sync demo and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

    afterAlways('sonarscan') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "Unit Tests Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/integration",
            reportFiles          : "index.html",
            reportName           : "Integration Test Report"
        ]
    }

    afterAlways('smoketest:preview') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
    }

    afterAlways('smoketest:aat') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
   }

    afterAlways('functionalTest:aat') {
       steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
       publishHTML target: [
           allowMissing         : true,
           alwaysLinkToLastBuild: true,
           keepAll              : true,
           reportDir            : "target/site/serenity/",
           reportFiles          : "index.html",
           reportName           : "Functional Tests Report"
       ]
   }

    afterAlways('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
        ]
    }

    afterAlways('pact-provider-verification') {
        publishHTML target: [
                     allowMissing         : true,
                     alwaysLinkToLastBuild: true,
                     keepAll              : true,
                    reportDir            : "build/reports/tests/runProviderPactVerification",
                    reportFiles          : "index.html",
                    reportName           : "Contract Tests Report"
                ]
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    }

    afterAlways('sonarscan') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "Unit Tests Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/integration",
            reportFiles          : "index.html",
            reportName           : "Integration Test Report"
        ]
    }

    afterAlways('smoketest:preview') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
    }

    afterAlways('smoketest:aat') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
   }

    afterAlways('functionalTest:aat') {
       steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
       publishHTML target: [
           allowMissing         : true,
           alwaysLinkToLastBuild: true,
           keepAll              : true,
           reportDir            : "target/site/serenity/",
           reportFiles          : "index.html",
           reportName           : "Functional Tests Report"
       ]
   }

    afterAlways('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
        ]
    }

    afterAlways('pact-provider-verification') {
        publishHTML target: [
                     allowMissing         : true,
                     alwaysLinkToLastBuild: true,
                     keepAll              : true,
                    reportDir            : "build/reports/tests/runProviderPactVerification",
                    reportFiles          : "index.html",
                    reportName           : "Contract Tests Report"
                ]
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    }
    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])
    }
    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])

    }
}
