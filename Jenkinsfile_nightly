#!groovy

properties([
        pipelineTriggers([cron('21 01 * * *')]), // scheduling to trigger jenkins job
        parameters([
                string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
                string(name: 'URL_TO_TEST', defaultValue: 'http://rd-professional-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
            string(name: 'SecurityRules',
                defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                description: 'The URL you want to run these tests against'),
        ])
])

@Library("Infrastructure")

def type = "java"
def product = "rd"
def component = "professional-api"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-rd-professional-api', 'PROFESSIONAL_API_S2S_SECRET')
  ],
  'rd-${env}': [
          secret('OAUTH2-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET'),
          secret('OAUTH2-CLIENT-AUTH', 'OAUTH2_CLIENT_AUTH'),
          secret('OAUTH2-CLIENT-ID', 'OAUTH2_CLIENT_ID'),
          secret('LD-SDK-KEY', 'LD_SDK_KEY'),
          secret('professional-api-POSTGRES-HOST', 'FUNC_DATABASE_HOST'),
          secret('professional-api-POSTGRES-PASS', 'FUNC_DATABASE_PASS'),
          secret('professional-api-POSTGRES-USER', 'FUNC_DATABASE_USER'),
          secret('professional-api-POSTGRES-DATABASE', 'FUNC_DATABASE_NAME'),
          secret('professional-api-POSTGRES-PORT', 'FUNC_DATABASE_PORT')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

import uk.gov.hmcts.contino.AppPipelineConfig

def subscription = "nonprod"
def config = new AppPipelineConfig()
config.vaultSecrets = secrets

withNightlyPipeline(type, product, component) {


    env.TEST_URL = params.URL_TO_TEST
    env.TEST_URL = "http://rd-professional-api-aat.service.core-compute-aat.internal"
    env.execution_environment = "aat"
    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.Rules = params.SecurityRules

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableMutationTest()
    enableFullFunctionalTest()
    enableSecurityScan()
    enableFortifyScan()

    after('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Functional Tests Report"
        ]

        print "calling delete script for nightly"
        withSubscription(subscription) {
            withTeamSecrets(config, params.ENVIRONMENT) {
                deleteFunctionalDbData()
            }
        }
        print "completed delete script for nightly"
    }

    after('mutationTest') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/pitest",
                reportFiles          : "index.html",
                reportName           : "Mutation Test Report"
        ]
    }

     after('fortify-scan') {
       steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
     }
}

def deleteFunctionalDbData() {
    withDocker('jbergknoff/postgresql-client', "--entrypoint='' -e PGPASSWORD=${FUNC_DATABASE_PASS} -v ${WORKSPACE}/deletescript/:/deletescript") {
        sh "chmod +x /deletescript/delete-functional-data.sh"
        sh "/deletescript/delete-functional-data.sh \
                        ${FUNC_DATABASE_USER} \
                        ${FUNC_DATABASE_NAME} \
                        ${FUNC_DATABASE_HOST} \
                        ${FUNC_DATABASE_PORT}"
    }
}
